[{"content":"1. Overview Process Context The kernel executes code on behalf of a user-space process (e.g., handling a system call like read() or write()). Key Properties: Associated with a struct task_struct (process descriptor). Can sleep (use blocking functions like mutex_lock()). Can access user-space memory (via copy_from_user()). Interrupt Context \u0026ldquo;Atomic context\u0026rdquo; or \u0026ldquo;Interrupt context\u0026rdquo;, The kernel executes code to handle a hardware interrupt or softirq (e.g., a network packet arriving) Key Properties: No associated process (current macro points to an idle task). Cannot sleep (blocking functions like kmalloc(GFP_KERNEL) are forbidden). Runs with interrupts disabled (on the current CPU). 2. CPU Execution States in ARM ARM architectures (e.g., ARMv8-A) define exception levels (ELs) that correspond to CPU execution states:\nException Level Privilege Typical Use Case EL0 User mode (least privileged) User-space processes. EL1 Kernel mode (OS privilege) Kernel process/interrupt context. EL2 Hypervisor mode Virtualization (e.g., KVM). EL3 Secure monitor mode TrustZone secure/non-secure transitions. How Contexts Map to ARM States Process Context: Runs in EL1 (kernel mode) but is tied to a process (e.g., system calls) Example: sys_read() executes in EL1 but is part of the process\u0026rsquo;s execution flow Interrupt Context: Runs in EL1 (kernel mode) but not tied to any process Example: Handling a timer interrupt (IRQ) triggers a switch from EL0 → EL1 Key ARM Registers for Context Switching SPSR_EL1: Saved Process Status Register (stores CPU state before exception). ELR_EL1: Exception Link Register (saves return address to resume after interrupt). SP_EL0/SP_EL1: Stack pointers for EL0 (user) and EL1 (kernel). 3. How Contexts Are Managed Switching to Interrupt Context Interrupt Occurs: CPU switches from EL0 → EL1 (or stays in EL1 if already in kernel mode). Saves PC (Program Counter) to ELR_EL1 and PSTATE (processor state) to SPSR_EL1. Interrupt Stack: ARM uses a dedicated interrupt stack (configured via SP_EL1) for interrupt handling Interrupt Handler: Executes in EL1 (interrupt context). Acknowledges the interrupt (e.g., via GIC). May trigger softirqs/tasklets for deferred processing. Returning to Process Context eret Instruction: Restores PC from ELR_EL1 and PSTATE from SPSR_EL1 Resumes Execution: Returns to EL0 (user mode) or EL1 (kernel process context). 4. Other CPU Execution States Beyond process/interrupt contexts, CPUs have additional states:\nIdle Context: When no processes are running, the CPU executes the idle thread (PID 0). ARM: Runs in EL1 with interrupts enabled. NMI (Non-Maskable Interrupt) Context: Highest-priority interrupts (e.g., hardware failures). ARM: Handled similarly to IRQs but cannot be masked. Hypervisor Context (EL2): Used by hypervisors (e.g., KVM) to manage virtual machines. Secure Monitor Context (EL3): Handles transitions between secure/non-secure worlds (ARM TrustZone). 5. Key Kernel APIs \u0026amp; Functions Process Context schedule(): Voluntarily yield the CPU (allowed in process context). current: Macro to access the current task_struct Interrupt Context in_interrupt(): Returns true if in interrupt context. local_irq_disable()/local_irq_enable(): Disable/enable interrupts on the local CPU. 6. Examples Process Context // Kernel module handling a syscall (process context) SYSCALL_DEFINE3(write, int, fd, const char __user *, buf, size_t, count) { struct file *file = fget(fd); // Blocking operation (allowed) copy_from_user(kernel_buf, buf, count); // Access user memory // ... } Interrupt Context // Interrupt handler for a GPIO button (interrupt context) irqreturn_t button_isr(int irq, void *dev_id) { if (in_interrupt()) printk(\u0026#34;Running in interrupt context!\\n\u0026#34;); tasklet_schedule(\u0026amp;deferred_task); // Defer work to process context return IRQ_HANDLED; } 7. Tools for Debugging Contexts perf: Trace transitions between EL0/EL1. perf record -e exceptions:el1_sync ./my_program ftrace: Track function calls in process/interrupt contexts. /proc/interrupts: View interrupt counts per CPU. References Linux Kernel Docs: Kernel Execution Contexts ARM Manuals: ARM Architecture Reference Manual ","permalink":"https://blog.rishavs.in/posts/0-inbox/cpu-execution-states-on-arm/","summary":"\u003ch2 id=\"1-overview\"\u003e1. Overview\u003c/h2\u003e\n\u003ch3 id=\"process-context\"\u003eProcess Context\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe kernel executes code \u003cstrong\u003eon behalf of a user-space process\u003c/strong\u003e (e.g., handling a system call like \u003ccode\u003eread()\u003c/code\u003e or \u003ccode\u003ewrite()\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKey Properties\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAssociated with a \u003ccode\u003estruct task_struct\u003c/code\u003e (process descriptor).\u003c/li\u003e\n\u003cli\u003eCan \u003cstrong\u003esleep\u003c/strong\u003e (use blocking functions like \u003ccode\u003emutex_lock()\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eCan access user-space memory (via \u003ccode\u003ecopy_from_user()\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"interrupt-context\"\u003eInterrupt Context\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;Atomic context\u0026rdquo; or \u0026ldquo;Interrupt context\u0026rdquo;, The kernel executes code \u003cstrong\u003eto handle a hardware interrupt or softirq\u003c/strong\u003e (e.g., a network packet arriving)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKey Properties\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNo associated process\u003c/strong\u003e (\u003ccode\u003ecurrent\u003c/code\u003e macro points to an idle task).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCannot sleep\u003c/strong\u003e (blocking functions like \u003ccode\u003ekmalloc(GFP_KERNEL)\u003c/code\u003e are forbidden).\u003c/li\u003e\n\u003cli\u003eRuns with \u003cstrong\u003einterrupts disabled\u003c/strong\u003e (on the current CPU).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-cpu-execution-states-in-arm\"\u003e2. CPU Execution States in ARM\u003c/h2\u003e\n\u003cp\u003eARM architectures (e.g., ARMv8-A) define \u003cstrong\u003eexception levels (ELs)\u003c/strong\u003e that correspond to CPU execution states:\u003c/p\u003e","title":"CPU Execution States on ARM"},{"content":"1. System Call Basics System calls (syscalls) are the interface for user-space programs to request services from the kernel. Examples include:\nFile I/O: read(), write(), open(), close(). Device Control: ioctl(). Signal Handling: kill(), signal(). 2. System Call Table and Registration Syscall Table: A table (sys_call_table) maps syscall numbers to handler functions. Architecture-Specific: x86: Defined in arch/x86/entry/syscalls/syscall_64.tbl. ARM: Defined in arch/arm/tools/syscall.tbl. Registration: Syscalls are registered at compile time using macros like SYSCALL_DEFINE (e.g., SYSCALL_DEFINE3(write, ...) for write()). For custom syscalls (rare and discouraged), you would: Add an entry to the syscall table. Define the handler using SYSCALL_DEFINE. Recompile the kernel (or use modules for dynamic insertion). 3. Flow of System Calls 1. User-Space Invocation The libc wrapper (e.g., read(), ioctl()) triggers a software interrupt (int 0x80 on x86) or uses the syscall instruction (modern x86/ARM). // User-space code fd = open(\u0026#34;/dev/mydevice\u0026#34;, O_RDWR); // Syscall 1: open() read(fd, buf, 100); // Syscall 2: read() ioctl(fd, MY_CMD, arg); // Syscall 3: ioctl() close(fd); // Syscall 4: close() 2. Transition to Kernel Mode Switches to kernel mode (ring 0 on x86, EL1 on ARM). Saves user-space registers (e.g., RIP, RSP, EFLAGS). Jumps to the kernel\u0026rsquo;s syscall entry point (e.g., entry_SYSCALL_64 on x86) 3. Syscall Dispatching Syscall Number: The syscall number is stored in a register (e.g., RAX on x86, R7 on ARM). Example: __NR_read (syscall number for read()). Syscall Table: The kernel uses sys_call_table (array of function pointers) to find the handler. Example: sys_call_table[__NR_read] points to sys_read(). 4. Handler Execution in Process Context Generic Steps for All Syscalls: Argument Validation: Check pointers (e.g., buf in read()) using access_ok() Copy arguments from user space with copy_from_user() or get_user() Kernel Function Execution: Perform the requested operation (e.g., read from a file, send an ioctl command) File Operations (read/write): File Descriptor Resolution: Convert fd to a struct file using fdget(). Check file permissions (FMODE_READ/FMODE_WRITE). Driver Interaction: Call the read/write method from the file’s file_operations struct. Example: For /dev/mydevice, this invokes the driver’s .read function. I/O Control (ioctl): The ioctl syscall (sys_ioctl()) calls the driver\u0026rsquo;s .unlocked_ioctl method. !../3-Resource/Platform/IOCTL in Kernel Device Drivers#3. Integrate into file_operations 5. Return to User Space: Result is stored in eax/r0, and the kernel restores user registers Execute iret (x86) or exception return (ARM) to resume user-mode execution. 4. Device File Operations Character devices (e.g., /dev/char_dev) expose operations via file_operations:\nstruct file_operations { ssize_t (*read)(struct file *, char __user *, size_t, loff_t *); ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *); long (*unlocked_ioctl)(struct file *, unsigned int, unsigned long); // ... }; Examples: Character Device Management in Kernel Drivers IOCTL in Kernel Device Drivers 5. Signal Handling (Ctrl+C) Ctrl+C sends a SIGINT to the foreground process. Kernel Flow: The terminal driver (e.g., tty_io.c) receives the interrupt. The kernel\u0026rsquo;s signal-handling code (kernel/signal.c) delivers SIGINT to the process. The process\u0026rsquo;s signal handler (if registered via signal() or sigaction()) is invoked. Key APIs: send_signal(): Kernel function to queue a signal. do_signal(): Handles signal delivery during return to user space. 6. Example: Tracing the read() Syscall User-Space: read(fd, buf, 100); // Invokes syscall via libc Kernel-Space: sys_read() resolves fd to a struct file. Calls vfs_read(), which invokes the driver’s .read method. Driver copies data from device to kernel buffer, then to user space using copy_to_user(). 7. Key Kernel APIs and Modules APIs for Syscalls: SYSCALL_DEFINE{0-6}: Define syscall handlers (e.g., SYSCALL_DEFINE3(read, ...)). copy_to_user()/copy_from_user(): Safely copy data between kernel and user space. get_user()/put_user(): Access single values in user memory. APIs for Device Drivers: register_chrdev(): Register a character device. unregister_chrdev(): Unregister a device. class_create()/device_create(): Create device nodes in /dev. APIs for Signals: kill_pid(): Send a signal to a process sigaction(): User-space API to register signal handlers 8. Critical Concepts to Know Syscall Table: Architecture-specific table mapping syscall numbers to handlers. Process Context vs. Interrupt Context: Syscalls run in process context (can sleep). Hardware interrupts run in interrupt context (atomic). Device File Operations: file_operations struct ties syscalls to driver functions. User/Kernel Boundary: Use copy_to_user/copy_from_user to safely exchange data. Signals: Delivered via send_signal and handled during syscall return. References Linux Kernel Documentation: Syscalls: Documentation/admin-guide/sysctl/kernel.rst. Device Drivers: Documentation/driver-api/. Signals: Documentation/core-api/signal.rst. Books: Linux Device Drivers (O\u0026rsquo;Reilly). link Understanding the Linux Kernel (O\u0026rsquo;Reilly). link ","permalink":"https://blog.rishavs.in/posts/0-inbox/system-call-software-interrupt/","summary":"\u003ch2 id=\"1-system-call-basics\"\u003e1. System Call Basics\u003c/h2\u003e\n\u003cp\u003eSystem calls (syscalls) are the interface for user-space programs to request services from the kernel. Examples include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFile I/O\u003c/strong\u003e: \u003ccode\u003eread()\u003c/code\u003e, \u003ccode\u003ewrite()\u003c/code\u003e, \u003ccode\u003eopen()\u003c/code\u003e, \u003ccode\u003eclose()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDevice Control\u003c/strong\u003e: \u003ccode\u003eioctl()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignal Handling\u003c/strong\u003e: \u003ccode\u003ekill()\u003c/code\u003e, \u003ccode\u003esignal()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-system-call-table-and-registration\"\u003e2. System Call Table and Registration\u003c/h2\u003e\n\u003ch3 id=\"syscall-table\"\u003eSyscall Table:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA table (\u003ccode\u003esys_call_table\u003c/code\u003e) maps syscall numbers to handler functions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eArchitecture-Specific\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ex86\u003c/strong\u003e: Defined in \u003ccode\u003earch/x86/entry/syscalls/syscall_64.tbl\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eARM\u003c/strong\u003e: Defined in \u003ccode\u003earch/arm/tools/syscall.tbl\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRegistration\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSyscalls are registered at compile time using macros like \u003ccode\u003eSYSCALL_DEFINE\u003c/code\u003e (e.g., \u003ccode\u003eSYSCALL_DEFINE3(write, ...)\u003c/code\u003e for \u003ccode\u003ewrite()\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eFor custom syscalls (rare and discouraged), you would:\n\u003col\u003e\n\u003cli\u003eAdd an entry to the syscall table.\u003c/li\u003e\n\u003cli\u003eDefine the handler using \u003ccode\u003eSYSCALL_DEFINE\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRecompile the kernel (or use modules for dynamic insertion).\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-flow-of-system-calls\"\u003e3. Flow of System Calls\u003c/h2\u003e\n\u003ch3 id=\"1-user-space-invocation\"\u003e1. User-Space Invocation\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe libc wrapper (e.g., \u003ccode\u003eread()\u003c/code\u003e, \u003ccode\u003eioctl()\u003c/code\u003e) triggers a \u003cstrong\u003esoftware interrupt\u003c/strong\u003e (\u003ccode\u003eint 0x80\u003c/code\u003e on x86) or uses the \u003ccode\u003esyscall\u003c/code\u003e instruction (modern x86/ARM).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// User-space code\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003efd \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/dev/mydevice\u0026#34;\u003c/span\u003e, O_RDWR);  \u003cspan style=\"color:#75715e\"\u003e// Syscall 1: open()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eread\u003c/span\u003e(fd, buf, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e);                  \u003cspan style=\"color:#75715e\"\u003e// Syscall 2: read()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eioctl\u003c/span\u003e(fd, MY_CMD, arg);              \u003cspan style=\"color:#75715e\"\u003e// Syscall 3: ioctl()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e(fd);                           \u003cspan style=\"color:#75715e\"\u003e// Syscall 4: close()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-transition-to-kernel-mode\"\u003e2. Transition to Kernel Mode\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSwitches to kernel mode (ring 0 on x86, EL1 on ARM).\u003c/li\u003e\n\u003cli\u003eSaves user-space registers (e.g., RIP, RSP, EFLAGS).\u003c/li\u003e\n\u003cli\u003eJumps to the kernel\u0026rsquo;s syscall entry point (e.g., \u003ccode\u003eentry_SYSCALL_64\u003c/code\u003e on x86)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-syscall-dispatching\"\u003e3. Syscall Dispatching\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSyscall Number\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eThe syscall number is stored in a register (e.g., \u003ccode\u003eRAX\u003c/code\u003e on x86, \u003ccode\u003eR7\u003c/code\u003e on ARM).\u003c/li\u003e\n\u003cli\u003eExample: \u003ccode\u003e__NR_read\u003c/code\u003e (syscall number for \u003ccode\u003eread()\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSyscall Table\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eThe kernel uses \u003ccode\u003esys_call_table\u003c/code\u003e (array of function pointers) to find the handler.\u003c/li\u003e\n\u003cli\u003eExample: \u003ccode\u003esys_call_table[__NR_read]\u003c/code\u003e points to \u003ccode\u003esys_read()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-handler-execution-in-process-context\"\u003e4. Handler Execution in Process Context\u003c/h3\u003e\n\u003ch4 id=\"generic-steps-for-all-syscalls\"\u003eGeneric Steps for All Syscalls:\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eArgument Validation:\n\u003cul\u003e\n\u003cli\u003eCheck pointers (e.g., \u003ccode\u003ebuf\u003c/code\u003e in \u003ccode\u003eread()\u003c/code\u003e) using \u003ccode\u003eaccess_ok()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCopy arguments from user space with \u003ccode\u003ecopy_from_user()\u003c/code\u003e or \u003ccode\u003eget_user()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKernel Function Execution:\n\u003cul\u003e\n\u003cli\u003ePerform the requested operation (e.g., read from a file, send an \u003ccode\u003eioctl\u003c/code\u003e command)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"file-operations-readwrite\"\u003eFile Operations (\u003ccode\u003eread\u003c/code\u003e/\u003ccode\u003ewrite\u003c/code\u003e):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFile Descriptor Resolution:\n\u003cul\u003e\n\u003cli\u003eConvert \u003ccode\u003efd\u003c/code\u003e to a \u003ccode\u003estruct file\u003c/code\u003e using \u003ccode\u003efdget()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCheck file permissions (\u003ccode\u003eFMODE_READ\u003c/code\u003e/\u003ccode\u003eFMODE_WRITE\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDriver Interaction:\n\u003cul\u003e\n\u003cli\u003eCall the \u003ccode\u003eread\u003c/code\u003e/\u003ccode\u003ewrite\u003c/code\u003e method from the file’s \u003ccode\u003efile_operations\u003c/code\u003e struct.\u003c/li\u003e\n\u003cli\u003eExample: For \u003ccode\u003e/dev/mydevice\u003c/code\u003e, this invokes the driver’s \u003ccode\u003e.read\u003c/code\u003e function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"io-control-ioctl\"\u003eI/O Control (\u003ccode\u003eioctl\u003c/code\u003e):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eioctl\u003c/code\u003e syscall (\u003ccode\u003esys_ioctl()\u003c/code\u003e) calls the driver\u0026rsquo;s \u003ccode\u003e.unlocked_ioctl\u003c/code\u003e method.\n!../3-Resource/Platform/IOCTL in Kernel Device Drivers#3. Integrate into file_operations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-return-to-user-space\"\u003e5. Return to User Space:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eResult is stored in \u003ccode\u003eeax\u003c/code\u003e/\u003ccode\u003er0\u003c/code\u003e, and the kernel restores user registers\u003c/li\u003e\n\u003cli\u003eExecute \u003ccode\u003eiret\u003c/code\u003e (x86) or exception return (ARM) to resume user-mode execution.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-device-file-operations\"\u003e4. Device File Operations\u003c/h2\u003e\n\u003cp\u003eCharacter devices (e.g., \u003ccode\u003e/dev/char_dev\u003c/code\u003e) expose operations via \u003ccode\u003efile_operations\u003c/code\u003e:\u003c/p\u003e","title":"System Call (Software Interrupt)"},{"content":"1. Interrupt Generation A hardware device (e.g., NIC, keyboard) raises an interrupt via the Programmable Interrupt Controller (PIC/APIC). The PIC converts the IRQ line into a vector number and signals the CPU via the INTR/NMI pin. 2. CPU State Save \u0026amp; Context Switch The CPU finishes the current instruction, saves the process context (registers, PC, flags) to the stack, and disables local interrupts Switches to the interrupt context (no associated process, interrupts disabled). 3. IDT Lookup The CPU uses the Interrupt Descriptor Table (IDT) to find the handler address for the interrupt vector. On ARM, the vector table (similar to x86 IDT) is preconfigured with handlers like handle_level_irq or handle_edge_irq. 4. Top Half Execution Immediate Actions: Acknowledge the interrupt at the hardware level (irq_data.chip-\u0026gt;irq_ack()) Read device status registers to confirm the interrupt source Minimal Processing: Copy critical data (e.g., network packets) to kernel buffers. Schedule deferred processing via bottom halves (tasklets, softirqs) APIs: request_irq(), free_irq() for driver-level registration. 5. Bottom Half Execution Deferred Work: Process data in safe contexts (e.g., tasklet_schedule() or workqueues). Runs with interrupts enabled (softirq context) or in process context (workqueues). Mechanisms: SoftIRQs: Statically allocated, high-priority (e.g., network RX) Tasklets: Dynamically allocated, atomic (e.g., USB transfers). Workqueues: Sleepable, process context (e.g., filesystem I/O) . 6. Interrupt Completion Send End-of-Interrupt (EOI) to the PIC (e.g., irq_data.chip-\u0026gt;irq_eoi()) The result is stored in eax/r0, and the kernel uses iret (x86) or exception return (ARM) to resume user execution. 7. Examples Network Driver (Hardware Interrupt) Top Half: irqreturn_t nic_isr(int irq, void *dev_id) { // Read packet from hardware buffer tasklet_schedule(\u0026amp;nic_tasklet); // Schedule bottom half return IRQ_HANDLED; } Bottom Half: void nic_tasklet_fn(unsigned long data) { // Process packets, update kernel networking stack } ","permalink":"https://blog.rishavs.in/posts/0-inbox/interrupt-handling-flow/","summary":"\u003ch3 id=\"1-interrupt-generation\"\u003e1. Interrupt Generation\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA hardware device (e.g., NIC, keyboard) raises an interrupt via the Programmable Interrupt Controller (PIC/APIC).\u003c/li\u003e\n\u003cli\u003eThe PIC converts the IRQ line into a vector number and signals the CPU via the INTR/NMI pin.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-cpu-state-save--context-switch\"\u003e2. CPU State Save \u0026amp; Context Switch\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe CPU finishes the current instruction, saves the process context (registers, PC, flags) to the stack, and disables local interrupts\u003c/li\u003e\n\u003cli\u003eSwitches to the \u003cstrong\u003einterrupt context\u003c/strong\u003e (no associated process, interrupts disabled).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-idt-lookup\"\u003e3. IDT Lookup\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe CPU uses the Interrupt Descriptor Table (IDT) to find the handler address for the interrupt vector.\u003c/li\u003e\n\u003cli\u003eOn ARM, the vector table (similar to x86 IDT) is preconfigured with handlers like \u003ccode\u003ehandle_level_irq\u003c/code\u003e or \u003ccode\u003ehandle_edge_irq\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-top-half-execution\"\u003e4. Top Half Execution\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eImmediate Actions\u003c/strong\u003e:\u003c/li\u003e\n\u003cli\u003eAcknowledge the interrupt at the hardware level (\u003ccode\u003eirq_data.chip-\u0026gt;irq_ack()\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eRead device status registers to confirm the interrupt source\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMinimal Processing\u003c/strong\u003e:\u003c/li\u003e\n\u003cli\u003eCopy critical data (e.g., network packets) to kernel buffers.\u003c/li\u003e\n\u003cli\u003eSchedule deferred processing via bottom halves (tasklets, softirqs)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAPIs\u003c/strong\u003e: \u003ccode\u003erequest_irq()\u003c/code\u003e, \u003ccode\u003efree_irq()\u003c/code\u003e for driver-level registration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-bottom-half-execution\"\u003e5. Bottom Half Execution\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDeferred Work\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eProcess data in safe contexts (e.g., \u003ccode\u003etasklet_schedule()\u003c/code\u003e or workqueues).\u003c/li\u003e\n\u003cli\u003eRuns with interrupts enabled (softirq context) or in process context (workqueues).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMechanisms\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSoftIRQs\u003c/strong\u003e: Statically allocated, high-priority (e.g., network RX)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTasklets\u003c/strong\u003e: Dynamically allocated, atomic (e.g., USB transfers).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWorkqueues\u003c/strong\u003e: Sleepable, process context (e.g., filesystem I/O) .\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"6-interrupt-completion\"\u003e6. Interrupt Completion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSend End-of-Interrupt (EOI) to the PIC (e.g., \u003ccode\u003eirq_data.chip-\u0026gt;irq_eoi()\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe result is stored in \u003ccode\u003eeax\u003c/code\u003e/\u003ccode\u003er0\u003c/code\u003e, and the kernel uses \u003ccode\u003eiret\u003c/code\u003e (x86) or exception return (ARM) to resume user execution.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"7-examples\"\u003e7. Examples\u003c/h3\u003e\n\u003ch4 id=\"network-driver-hardware-interrupt\"\u003eNetwork Driver (Hardware Interrupt)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTop Half:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eirqreturn_t\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enic_isr\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e irq, \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edev_id) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Read packet from hardware buffer\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etasklet_schedule\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003enic_tasklet); \u003cspan style=\"color:#75715e\"\u003e// Schedule bottom half\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e IRQ_HANDLED;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eBottom Half:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enic_tasklet_fn\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e data) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Process packets, update kernel networking stack\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Interrupt Handling Flow"},{"content":"Q1: What happens if another interrupt occurs while a top half (ISR) is executing? Answer:\nBy default, interrupts are disabled during the top half execution. When the CPU enters the ISR (via the IDT), it automatically clears the Interrupt Flag (IF) on x86 (using cli), preventing further interrupts until the ISR finishes. Exception: Some architectures or configurations (e.g., nested interrupts) allow interrupts to preempt an ISR. For example: IRQF_DISABLED (now deprecated): Previously controlled whether interrupts were disabled during the ISR. Modern kernels typically disable interrupts for all IRQ handlers by default. Threaded interrupts (using IRQF_ONESHOT or IRQF_THREAD): The \u0026ldquo;top half\u0026rdquo; runs in a kernel thread with interrupts enabled. Key Takeaway:\nMost ISRs run with interrupts disabled, ensuring atomicity. If a nested interrupt occurs (rare), it will be queued and handled after the current ISR completes. Q2: How does the kernel prevent stack overflow due to nested interrupts? Answer:\nEach CPU has separate stacks for different contexts: Hardware Interrupt Stack: A small, fixed-size per-CPU stack (e.g., 4KB–16KB). Process Stack: Used when executing in process context. Nesting Depth: The kernel limits interrupt nesting (e.g., x86 allows limited depth before a double fault is triggered). Example:\nIf an ISR for IRQ 1 (keyboard) is interrupted by IRQ 12 (mouse), the CPU switches to the interrupt stack. If nesting exceeds the stack size, the kernel panics with a stack overflow.\nQ3: What happens if two devices share the same IRQ line? Answer:\nShared IRQs: Drivers can register handlers with IRQF_SHARED in request_irq(). During ISR execution, the kernel calls all registered handlers for that IRQ. Each handler checks if its device triggered the interrupt (e.g., by reading a device status register). The first handler that acknowledges the interrupt (returns IRQ_HANDLED) stops further propagation. Example:\n// Driver 1 (Shared IRQ 9) request_irq(9, my_isr1, IRQF_SHARED, \u0026#34;dev1\u0026#34;, \u0026amp;dev1); // Driver 2 (Shared IRQ 9) request_irq(9, my_isr2, IRQF_SHARED, \u0026#34;dev2\u0026#34;, \u0026amp;dev2); In my_isr1, the driver reads a hardware register to confirm the interrupt was from dev1. If not, it returns IRQ_NONE, allowing my_isr2 to run.\nQ4: Can the same IRQ be handled concurrently on different CPUs? Answer:\nYes, if the interrupt is not marked as per-CPU (IRQF_PERCPU). The kernel allows an IRQ to be handled on any CPU unless restricted. Race Conditions: Shared data between CPUs requires synchronization (e.g., spinlocks with spin_lock_irqsave()). Best Practice:\nUse IRQF_PERCPU for interrupts that are inherently CPU-local (e.g., APIC timer interrupts).\nQ5: What happens if you call a blocking function (e.g., sleep()) in the top half? Answer:\nNever do this! The top half runs in atomic context (interrupts disabled, no process context). Blocking functions like sleep(), kmalloc(GFP_KERNEL), or mutexes will cause a kernel panic or deadlock. Safe Functions:\nUse kmalloc(GFP_ATOMIC) for memory allocation. Use spinlocks instead of mutexes. Interview Tip:\nIf asked how to debug a hung system, suspect a blocking call in an ISR. Tools like kgdb or analyzing crash dumps can help.\nQ6: How does the kernel ensure the top half is minimal? Answer:\nDesign Principle: The top half only does time-critical work (e.g., acknowledging the interrupt, reading hardware status). All other processing is deferred to the bottom half (tasklets, softirqs, workqueues). Kernel Enforcement: No explicit enforcement, but violating this principle causes performance issues (e.g., high interrupt latency). Example:\nA network driver\u0026rsquo;s top half copies a packet from the device to a buffer and schedules a softirq (NET_RX_SOFTIRQ) for further processing.\nQ7: How to handle reentrancy in the top half? Answer:\nReentrancy: If the same IRQ can interrupt its own handler (e.g., nested interrupts), use reentrancy-safe techniques: Disable interrupts locally: Use local_irq_save(flags) to manually disable interrupts. Per-CPU Data: Use get_cpu_var() to access CPU-local variables. Example:\nirqreturn_t my_isr(int irq, void *dev_id) { unsigned long flags; local_irq_save(flags); // Disable interrupts // Critical section local_irq_restore(flags); // Re-enable return IRQ_HANDLED; } Q8: How to measure the latency of a top half? Answer:\nTools: ftrace with irqsoff tracer to measure time interrupts are disabled. perf to profile ISR execution time. Metric: Aim for top-half execution time in microseconds. Command:\necho irqsoff \u0026gt; /sys/kernel/debug/tracing/current_tracer cat /sys/kernel/debug/tracing/trace Q9: What is the difference between IRQF_SHARED and IRQF_PERCPU? Answer:\nIRQF_SHARED: Allows multiple devices to share the same IRQ line (e.g., PCI devices) IRQF_PERCPU: The IRQ is mapped to a specific CPU (e.g., timer interrupts) Use Case:\nUse IRQF_SHARED for devices like USB controllers. Use IRQF_PERCPU for CPU-local events (e.g., APIC timer). Q10: How to safely exit a top half if the interrupt wasn’t for your device? Answer:\nReturn IRQ_NONE in the ISR. This tells the kernel to continue probing other handlers for the shared IRQ. Example:\nirqreturn_t my_isr(int irq, void *dev_id) { if (!check_device_status(dev_id)) // Not our interrupt return IRQ_NONE; // Process interrupt return IRQ_HANDLED; } Key Takeaways for Interviews: Atomicity: Top halves run with interrupts disabled. No Blocking: Never call sleeping functions. Defer Work: Use bottom halves for non-urgent tasks. Concurrency: Shared IRQs require reentrancy checks. Debugging: Tools like ftrace and perf are essential. ","permalink":"https://blog.rishavs.in/posts/0-inbox/interrupt-questions/","summary":"\u003ch3 id=\"q1-what-happens-if-another-interrupt-occurs-while-a-top-half-isr-is-executing\"\u003eQ1: What happens if another interrupt occurs while a top half (ISR) is executing?\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eAnswer\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBy default, \u003cstrong\u003einterrupts are disabled\u003c/strong\u003e during the top half execution. When the CPU enters the ISR (via the IDT), it automatically clears the \u003cstrong\u003eInterrupt Flag (IF)\u003c/strong\u003e on x86 (using \u003ccode\u003ecli\u003c/code\u003e), preventing further interrupts until the ISR finishes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eException\u003c/strong\u003e: Some architectures or configurations (e.g., \u003cstrong\u003enested interrupts\u003c/strong\u003e) allow interrupts to preempt an ISR. For example:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIRQF_DISABLED\u003c/strong\u003e (now deprecated): Previously controlled whether interrupts were disabled during the ISR. Modern kernels typically disable interrupts for all IRQ handlers by default.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThreaded interrupts\u003c/strong\u003e (using \u003ccode\u003eIRQF_ONESHOT\u003c/code\u003e or \u003ccode\u003eIRQF_THREAD\u003c/code\u003e): The \u0026ldquo;top half\u0026rdquo; runs in a kernel thread with interrupts enabled.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eKey Takeaway\u003c/strong\u003e:\u003c/p\u003e","title":"Interrupt Questions"},{"content":"Overview An interrupt is a signal that breaks the normal execution flow to handle an event. When an interrupt occurs, the CPU pauses its current task, jumps to an interrupt service routine (ISR), and after the ISR completes it resumes the original task. In other words, interrupts let hardware or software requests \u0026ldquo;call\u0026rdquo; the CPU’s attention immediately, then let the program continue \u0026ldquo;as if nothing happened\u0026rdquo; after handling it.\nWhy are interrupts needed? Avoid Polling: More efficient than continuously checking device status (polling), reducing CPU overhead and increasing system throughput Real-Time Responsiveness: Essential for systems requiring quick reactions to events Automotive airbag systems detecting collisions Network Interface Cards (NICs) processing incoming packets Interrupt Types Hardware Interrupts: Triggered by devices (e.g., keyboard, NIC). Managed by the Programmable Interrupt Controller (PIC) or APIC. Software Interrupts: Generated by software (e.g., int 0x80 for syscalls). Exceptions: CPU-generated (e.g., divide-by-zero, page faults). How the Kernel Registers Interrupts Interrupt Descriptor Table (IDT) Initialization: At boot, the kernel populates the IDT with default handlers (e.g., for exceptions). Hardware interrupts are mapped to a generic entry (e.g., common_interrupt on x86). Device Drivers: Drivers request a specific IRQ (Interrupt Request Line) using request_irq(). Example: int request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev); irq: The interrupt number (e.g., IRQ 1 for keyboard). handler: The ISR function. flags: Options like IRQF_SHARED for shared interrupts. dev: A cookie passed to the ISR (used for shared IRQs). What happens when an interrupt is occurred? See Interrupt Handling Flow\nReferences Linux Kernel: Interrupts - https://youtu.be/ExcpAmWJZw0 https://en.wikipedia.org/wiki/Interrupt_descriptor_table Prompt I want you to explain me what happens in the kernel when the interrupt is called. Start from where the kernel/cpu comes to know that what interrupts even exist, then what interrupt descriptor table is and how the cpu knows about it, how is this table used and managed. Also what the programmer would do to add their own interrupt in any device driver. I know little about top half and bottom half, so your job is to teach me the concepts necessary for actually calling interrupts or isr and routing back to the original cpu state. Give all the kernel apis used in this process. Give relevant example.\n","permalink":"https://blog.rishavs.in/posts/0-inbox/interrupt/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eAn \u003cem\u003einterrupt\u003c/em\u003e is a signal that breaks the normal execution flow to handle an event. When an interrupt occurs, the CPU \u003cstrong\u003epauses\u003c/strong\u003e its current task, jumps to an interrupt service routine (ISR), and after the ISR completes it \u003cstrong\u003eresumes\u003c/strong\u003e the original task. In other words, interrupts let hardware or software requests \u0026ldquo;call\u0026rdquo; the CPU’s attention immediately, then let the program continue \u0026ldquo;as if nothing happened\u0026rdquo; after handling it.\u003c/p\u003e\n\u003ch2 id=\"why-are-interrupts-needed\"\u003eWhy are interrupts needed?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAvoid Polling: More efficient than continuously checking device status (polling), reducing CPU overhead and increasing system throughput\u003c/li\u003e\n\u003cli\u003eReal-Time Responsiveness: Essential for systems requiring quick reactions to events\n\u003cul\u003e\n\u003cli\u003eAutomotive airbag systems detecting collisions\u003c/li\u003e\n\u003cli\u003eNetwork Interface Cards (NICs) processing incoming packets\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"interrupt-types\"\u003eInterrupt Types\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHardware Interrupts\u003c/strong\u003e: Triggered by devices (e.g., keyboard, NIC). Managed by the \u003cstrong\u003eProgrammable Interrupt Controller (PIC)\u003c/strong\u003e or \u003cstrong\u003eAPIC\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSoftware Interrupts\u003c/strong\u003e: Generated by software (e.g., \u003ccode\u003eint 0x80\u003c/code\u003e for syscalls).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExceptions\u003c/strong\u003e: CPU-generated (e.g., divide-by-zero, page faults).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"how-the-kernel-registers-interrupts\"\u003eHow the Kernel Registers Interrupts\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/posts/0-inbox/interrupt-descriptor-table-idt/\"\u003eInterrupt Descriptor Table (IDT)\u003c/a\u003e Initialization:\n\u003cul\u003e\n\u003cli\u003eAt boot, the kernel populates the IDT with default handlers (e.g., for exceptions).\u003c/li\u003e\n\u003cli\u003eHardware interrupts are mapped to a generic entry (e.g., common_interrupt on x86).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDevice Drivers\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eDrivers request a specific IRQ (Interrupt Request Line) using \u003ccode\u003erequest_irq()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eExample:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequest_irq\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e irq, \u003cspan style=\"color:#66d9ef\"\u003eirq_handler_t\u003c/span\u003e handler, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e flags,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ename, \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edev);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eirq\u003c/code\u003e: The interrupt number (e.g., \u003ccode\u003eIRQ 1\u003c/code\u003e for keyboard).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehandler\u003c/code\u003e: The ISR function.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eflags\u003c/code\u003e: Options like \u003ccode\u003eIRQF_SHARED\u003c/code\u003e for shared interrupts.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edev\u003c/code\u003e: A cookie passed to the ISR (used for shared IRQs).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"what-happens-when-an-interrupt-is-occurred\"\u003eWhat happens when an interrupt is occurred?\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"/posts/0-inbox/interrupt-handling-flow/\"\u003eInterrupt Handling Flow\u003c/a\u003e\u003c/p\u003e","title":"Interrupt"},{"content":"Using External Toolchain Option 1: Give tarball URL Specify URL for the tarball in BR_TOOLCHAIN_EXTERNAL_URL\nExample:\nBR_TOOLCHAIN_EXTERNAL_URL=http://192.168.101.52:8082/artifactory/toolchain.tar.xz In this case you will have to deselect BR2_PRIMARY_SITE_ONLY option\nOption 2: Give tarball relative dl path If BR2_PRIMARY_SITE_ONLY option is selected then you have to keep the toolchain inside dl/toolchain-external-custom/ directory and pass the name of tarball to BR_TOOLCHAIN_EXTERNAL_URL\nExample:\nBR2_PRIMARY_SITE=\u0026#34;http://192.168.101.52:8082/artifactory/dl\u0026#34; BR2_PRIMARY_SITE_ONLY=y BR_TOOLCHAIN_EXTERNAL_URL=nvrx-rk3588-toolcahin.tar.xz This will extract the toolchain to buildroot\u0026rsquo;s build directory output/host/opt/ext-toolchain\nReferences https://buildroot.org/downloads/manual/manual.html ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/external-toolchain-in-buildroot/","summary":"\u003ch2 id=\"using-external-toolchain\"\u003eUsing External Toolchain\u003c/h2\u003e\n\u003ch3 id=\"option-1-give-tarball-url\"\u003eOption 1: Give tarball URL\u003c/h3\u003e\n\u003cp\u003eSpecify URL for the tarball in \u003ccode\u003eBR_TOOLCHAIN_EXTERNAL_URL\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-config\" data-lang=\"config\"\u003eBR_TOOLCHAIN_EXTERNAL_URL=http://192.168.101.52:8082/artifactory/toolchain.tar.xz\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003eIn this case you will have to deselect \u003ccode\u003eBR2_PRIMARY_SITE_ONLY\u003c/code\u003e option\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"option-2-give-tarball-relative-dl-path\"\u003eOption 2: Give tarball relative dl path\u003c/h3\u003e\n\u003cp\u003eIf \u003ccode\u003eBR2_PRIMARY_SITE_ONLY\u003c/code\u003e option is selected then you have to keep the toolchain inside \u003ccode\u003edl/toolchain-external-custom/\u003c/code\u003e directory and pass the name of tarball to \u003ccode\u003eBR_TOOLCHAIN_EXTERNAL_URL\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-config\" data-lang=\"config\"\u003eBR2_PRIMARY_SITE=\u0026#34;http://192.168.101.52:8082/artifactory/dl\u0026#34;\nBR2_PRIMARY_SITE_ONLY=y\nBR_TOOLCHAIN_EXTERNAL_URL=nvrx-rk3588-toolcahin.tar.xz\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will extract the toolchain to buildroot\u0026rsquo;s build directory \u003ccode\u003eoutput/host/opt/ext-toolchain\u003c/code\u003e\u003c/p\u003e","title":"External Toolchain in Buildroot"},{"content":"Overview A relocatable toolchain/SDK is a self-contained set of cross-compilation tools that can be moved to different locations without breaking dependencies. Buildroot provides an option to generate such a toolchain, allowing developers to use it for cross-compiling applications without depending on a fixed absolute path.\nPrepare Relocatable SDK Configure Buildroot for SDK Generation Disable BusyBox and set /bin/sh to None under System configuration. This prevents unnecessary shell dependencies within the SDK, ensuring better relocatability.\nmake sdk # OR make prepare-sdk # tar host directory yourself tar cJf \u0026#34;$(PLATFROM_BUILD_OUTPUT_PATH)/$(SDK_PREFIX).tar.xz\u0026#34; \\ --owner=0 --group=0 --numeric-owner \\ --transform=\u0026#39;s#^$(patsubst /%,%,$(HOST_DIR))#$(SDK_PREFIX)#\u0026#39; \\ -C / $(patsubst /%,%,$(HOST_DIR)) Using external toolchain (SDK) tar -xf build/NVRX_RK3588/output/aarch64-buildroot-linux-gnu.tar.xz -C /opt/ cd /opt/aarch64-buildroot-linux-gnu \u0026amp;\u0026amp; ./relocate-sdk.sh Reference https://buildroot.org/downloads/manual/manual.html#build-toolchain-with-buildroot ","permalink":"https://blog.rishavs.in/posts/0-inbox/buildroot-relocatable-sdk/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eA relocatable toolchain/SDK is a self-contained set of cross-compilation tools that can be moved to different locations without breaking dependencies. Buildroot provides an option to generate such a toolchain, allowing developers to use it for cross-compiling applications without depending on a fixed absolute path.\u003c/p\u003e\n\u003ch2 id=\"prepare-relocatable-sdk\"\u003ePrepare Relocatable SDK\u003c/h2\u003e\n\u003ch3 id=\"configure-buildroot-for-sdk-generation\"\u003eConfigure Buildroot for SDK Generation\u003c/h3\u003e\n\u003cp\u003eDisable \u003ccode\u003eBusyBox\u003c/code\u003e and set \u003ccode\u003e/bin/sh\u003c/code\u003e to \u003ccode\u003eNone\u003c/code\u003e under \u003ccode\u003eSystem configuration\u003c/code\u003e. This prevents unnecessary shell dependencies within the SDK, ensuring better relocatability.\u003c/p\u003e","title":"Buildroot Relocatable SDK"},{"content":"Truth Table X Y X \u0026amp; Y X | Y X ^ Y 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 0 Points to Remember The left-shift and right-shift operators should not be used for negative numbers Left Shift(\u0026lt;\u0026lt;) just means multiply by 2. Similarly \u0026gt;\u0026gt; results division by 2. XOR results 0 if both bits are same. So a^1=~a , a^0=a and a^a=0. Questions How to toggle or flip a particular bit in a number? To toggle any bit in a variable, Use (^) exclusive OR operator. #define togglebit(data, bit) (data* = data ^ (1\u0026lt;\u0026lt;bit)) Write MACRO to Swap the bytes in 16bit Integer Variable. #define ByteSwap16(Value) ((Value \u0026amp; 0x00FF) \u0026lt;\u0026lt; 8) | ((Value \u0026amp; 0xFF00) \u0026gt;\u0026gt; 8) #define ByteSwap32(Value) ((Value \u0026amp; 0x000000FF) \u0026lt;\u0026lt; 24) | ((Value \u0026amp; 0x0000FF00U) \u0026lt;\u0026lt; 8) | ((Value \u0026amp; 0x00FF0000U) \u0026gt;\u0026gt; 8) | ((Value \u0026amp; 0xFF000000U) \u0026gt;\u0026gt; 24) Count the number of set bits in a number unsigned int countSetBits( unsigned int number ) { unsigned int count = 0; while( number != 0) { count++; number \u0026amp;= (number-1); } return count; } Swap 2 bits of given integer int swapBits(unsigned int n, unsigned int p1, unsigned int p2) { unsigned int bit1 = (n \u0026gt;\u0026gt; p1) \u0026amp; 1; /* Move p1\u0026#39;th to rightmost side */ unsigned int bit2 = (n \u0026gt;\u0026gt; p2) \u0026amp; 1; /* Move p2\u0026#39;th to rightmost side */ unsigned int x = (bit1 ^ bit2); /* XOR the two bits */ /* Put the xor bit back to their original positions */ x = (x \u0026lt;\u0026lt; p1) | (x \u0026lt;\u0026lt; p2); /* XOR \u0026#39;x\u0026#39; with the original number so that the two sets are swapped */ unsigned int result = n ^ x; } ","permalink":"https://blog.rishavs.in/posts/src/c-prac/notes/bitwise-operators/","summary":"\u003ch2 id=\"truth-table\"\u003eTruth Table\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eX\u003c/th\u003e\n          \u003cth\u003eY\u003c/th\u003e\n          \u003cth\u003eX \u0026amp; Y\u003c/th\u003e\n          \u003cth\u003eX | Y\u003c/th\u003e\n          \u003cth\u003eX ^ Y\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"points-to-remember\"\u003ePoints to Remember\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe left-shift and right-shift operators should not be used for negative numbers\u003c/li\u003e\n\u003cli\u003eLeft Shift(\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) just means multiply by \u003ccode\u003e2\u003c/code\u003e. Similarly \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e results division by \u003ccode\u003e2\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXOR\u003c/code\u003e results 0 if both bits are same. So \u003ccode\u003ea^1=~a\u003c/code\u003e , \u003ccode\u003ea^0=a\u003c/code\u003e and \u003ccode\u003ea^a=0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"questions\"\u003eQuestions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eHow to toggle or flip a particular bit in a number?\nTo toggle any bit in a variable, Use (^) exclusive OR operator.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define togglebit(data, bit) (data* = data ^ (1\u0026lt;\u0026lt;bit))\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eWrite MACRO to Swap the bytes in 16bit Integer Variable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ByteSwap16(Value) ((Value \u0026amp; 0x00FF) \u0026lt;\u0026lt; 8) | ((Value \u0026amp; 0xFF00) \u0026gt;\u0026gt; 8)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define ByteSwap32(Value) ((Value \u0026amp; 0x000000FF) \u0026lt;\u0026lt; 24) |\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\t\t\t  ((Value \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x0000FF00U\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t  ((Value \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x00FF0000U\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t  ((Value \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xFF000000U\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eCount the number of set bits in a number\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecountSetBits\u003c/span\u003e( \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e number ) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e( number \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    number \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e (number\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003eSwap 2 bits of given integer\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswapBits\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p1, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e bit1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e  (n \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e p1) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e/* Move p1\u0026#39;th to rightmost side */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e bit2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e  (n \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e p2) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e/* Move p2\u0026#39;th to rightmost side */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (bit1 \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e bit2); \u003cspan style=\"color:#75715e\"\u003e/* XOR the two bits */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/* Put the xor bit back to their original positions */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p1) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/* XOR \u0026#39;x\u0026#39; with the original number so that the two sets are swapped */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Bitwise Operators"},{"content":"Introduction GPIO (General Purpose Input/Output) is a fundamental interface in embedded systems and Linux-based platforms. Linux provides multiple methods to control GPIOs, including the deprecated /sys/class/gpio/ interface and the modern libgpiod (GPIO character device) API. This document provides a comprehensive guide to managing GPIOs in Linux.\nGPIO Interfaces in Linux Linux provides three primary ways to manage GPIOs:\nLegacy Sysfs Interface (/sys/class/gpio/) - Deprecated but still present on some systems. GPIO Character Device (/dev/gpiochipX) - The recommended approach using libgpiod. Direct Kernel Access - Through kernel drivers or device tree configurations. 1. Sysfs GPIO Interface (Deprecated) The sysfs-based interface was historically used to control GPIOs but has been marked as deprecated in favor of gpiod. If still available, it can be accessed via /sys/class/gpio/.\nExporting a GPIO echo \u0026lt;gpio_number\u0026gt; \u0026gt; /sys/class/gpio/export This creates a directory /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/.\nSetting GPIO Direction echo out \u0026gt; /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/direction Or for input:\necho in \u0026gt; /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/direction Controlling GPIO Value For output:\necho 1 \u0026gt; /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/value # Set HIGH echo 0 \u0026gt; /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/value # Set LOW For input:\ncat /sys/class/gpio/gpio\u0026lt;gpio_number\u0026gt;/value Unexporting GPIO echo \u0026lt;gpio_number\u0026gt; \u0026gt; /sys/class/gpio/unexport 2. GPIO Character Device Interface (libgpiod) Modern Linux kernels (\u0026gt;=4.8) use a character device model for GPIO management, accessible via /dev/gpiochipX.\nInstalling libgpiod sudo apt install gpiod libgpiod-dev Listing Available GPIOs gpioinfo This shows GPIO chips and their pin assignments.\nExporting a GPIO No need to manually export GPIOs when using gpiod.\nSetting GPIO Direction and Controlling Value Set GPIO as output and write a value: # This sets GPIO 22 to HIGH for 1 second. gpioset --mode=time --sec=1 gpiochip0 22=1 Read GPIO value: gpioget gpiochip0 22 Monitor GPIO changes: # This monitors GPIO 22 for 10 state changes. gpiomon --num-events=10 gpiochip0 22 3. Direct Kernel-Level GPIO Management For performance-sensitive applications, GPIOs can be managed directly via:\nDevice Tree (.dts) Configuration: \u0026amp;gpio { my_gpio: gpio@22 { label = \u0026#34;custom_gpio\u0026#34;; gpios = \u0026lt;\u0026amp;gpio0 22 GPIO_ACTIVE_HIGH\u0026gt;; }; }; Kernel Drivers (gpio.h): struct gpio_desc *desc; desc = gpiod_get(\u0026amp;pdev-\u0026gt;dev, \u0026#34;custom_gpio\u0026#34;, GPIOD_OUT_LOW); gpiod_set_value(desc, 1); Best Practices for GPIO Management Use libgpiod Instead of Sysfs - Future-proof applications by migrating to the character device interface. Use Device Tree for Static Configurations - Avoid runtime overhead by defining GPIO settings in the device tree. Ensure Proper Permissions - Non-root users may need udev rules to access /dev/gpiochipX. Debounce Input Signals - Use kernel debounce mechanisms for input signals. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/generic-gpio-management-in-linux/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGPIO (General Purpose Input/Output) is a fundamental interface in embedded systems and Linux-based platforms. Linux provides multiple methods to control GPIOs, including the deprecated \u003ccode\u003e/sys/class/gpio/\u003c/code\u003e interface and the modern \u003ccode\u003elibgpiod\u003c/code\u003e (GPIO character device) API. This document provides a comprehensive guide to managing GPIOs in Linux.\u003c/p\u003e\n\u003ch2 id=\"gpio-interfaces-in-linux\"\u003eGPIO Interfaces in Linux\u003c/h2\u003e\n\u003cp\u003eLinux provides three primary ways to manage GPIOs:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLegacy Sysfs Interface (\u003ccode\u003e/sys/class/gpio/\u003c/code\u003e)\u003c/strong\u003e - Deprecated but still present on some systems.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGPIO Character Device (\u003ccode\u003e/dev/gpiochipX\u003c/code\u003e)\u003c/strong\u003e - The recommended approach using \u003ccode\u003elibgpiod\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDirect Kernel Access\u003c/strong\u003e - Through kernel drivers or device tree configurations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-sysfs-gpio-interface-deprecated\"\u003e1. Sysfs GPIO Interface (Deprecated)\u003c/h2\u003e\n\u003cp\u003eThe sysfs-based interface was historically used to control GPIOs but has been marked as deprecated in favor of \u003ccode\u003egpiod\u003c/code\u003e. If still available, it can be accessed via \u003ccode\u003e/sys/class/gpio/\u003c/code\u003e.\u003c/p\u003e","title":"Generic GPIO Management in Linux"},{"content":"Overview A Bayer filter is a color filter array (CFA) that arranges RGB color filters on a square grid of photosensors.\nColor Sensitivity Digital image sensors can only detect brightness, not color. To produce color sensors, a color filter is applied to each pixel. Generally the sensor is divided into 50% green, 25% red, and 25% blue photosites.\nG R G R B G B G G R G R B G B G Demosaicing Each pixel is filtered to record only one of three colors, so the data from each pixel cannot fully specify each of the red, green, and blue values on its own. To obtain a full-color image, demosaicing algorithms are used to interpolate a set of complete red, green, and blue values for each pixel. The color of each pixel is interpolated by those around it.\nReferences https://www.red.com/red-101/bayer-sensor-strategy https://www.arrow.com/en/research-and-events/articles/introduction-to-bayer-filters ","permalink":"https://blog.rishavs.in/posts/1-project/ip-camera/bayer-filter/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eA Bayer filter is a color filter array (CFA) that arranges RGB color filters on a square grid of photosensors.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/1-project/ip-camera//posts/0-inbox/assets/pasted-image-20250217142016.png\" alt=\"Pasted image 20250217142016.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eColor Sensitivity\u003c/strong\u003e Digital image sensors can only detect brightness, not color. To produce color sensors, a color filter is applied to each pixel. Generally the sensor is divided into 50% green, 25% red, and 25% blue photosites.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eG       R       G       R\n\nB       G       B       G\n\nG       R       G       R\n\nB       G       B       G\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href=\"/posts/1-project/ip-camera/demosaicing/\"\u003eDemosaicing\u003c/a\u003e\u003c/strong\u003e Each pixel is filtered to record only one of three colors, so the data from each pixel cannot fully specify each of the red, green, and blue values on its own. To obtain a full-color image, demosaicing algorithms are used to interpolate a set of complete red, green, and blue values for each pixel. The color of each pixel is interpolated by those around it.\u003c/p\u003e","title":"Bayer Filter"},{"content":"SPI (Serial Peripheral Interface) Overview Synchronous, full-duplex serial bus. Master-slave architecture (1 master, multiple slaves). Uses 4 wires: SCLK (clock), MOSI (Master Out Slave In), MISO (Master In Slave Out), SS/CS (Slave Select). Physical Layer Push-pull outputs (faster than open-drain). Each slave requires a dedicated SS line. Data Frame Structure No start/stop bits – continuous stream synchronized to SCLK. Data sampled on clock edges defined by CPOL (clock polarity) and CPHA (clock phase): Mode 0: CPOL=0 (idle low), CPHA=0 (sample on rising edge). Mode 3: CPOL=1 (idle high), CPHA=1 (sample on falling edge). SCLK | MOSI (Data from Master) | MISO (Data from Slave) | CS (Active Low) Key Features Full-duplex communication (simultaneous MOSI/MISO). No addressing – slaves selected via SS lines. Speeds: Up to 100+ Mbps (depends on hardware). Pros \u0026amp; Cons Pros Cons High-speed communication High pin count (n+3 for n slaves) Simple protocol, flexible modes No built-in error detection Full-duplex support No multi-master support Use Cases High-speed sensors (e.g., IMUs). Display controllers (OLED, TFT). SD cards, NOR flash memory. Comparison Table Feature UART I2C SPI Clock None (async) Shared (SCL) Shared (SCLK) Duplex Full-duplex Half-duplex Full-duplex Topology Point-to-point Multi-device Master-slave Speed Low (≤115kbps) Moderate (≤3.4Mbps) High (≥10Mbps) Addressing None 7/10-bit Hardware (SS lines) Pins 2 (TX/RX) 2 (SCL/SDA) 4 + n (SS per slave) Error Handling Parity bit ACK/NACK None ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/spi/","summary":"\u003ch2 id=\"spi-serial-peripheral-interface\"\u003eSPI (Serial Peripheral Interface)\u003c/h2\u003e\n\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSynchronous\u003c/strong\u003e, \u003cstrong\u003efull-duplex\u003c/strong\u003e serial bus.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMaster-slave\u003c/strong\u003e architecture (1 master, multiple slaves).\u003c/li\u003e\n\u003cli\u003eUses \u003cstrong\u003e4 wires\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSCLK\u003c/strong\u003e (clock), \u003cstrong\u003eMOSI\u003c/strong\u003e (Master Out Slave In), \u003cstrong\u003eMISO\u003c/strong\u003e (Master In Slave Out), \u003cstrong\u003eSS/CS\u003c/strong\u003e (Slave Select).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"physical-layer\"\u003ePhysical Layer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePush-pull outputs\u003c/strong\u003e (faster than open-drain).\u003c/li\u003e\n\u003cli\u003eEach slave requires a dedicated \u003cstrong\u003eSS line\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"data-frame-structure\"\u003eData Frame Structure\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNo start/stop bits\u003c/strong\u003e – continuous stream synchronized to SCLK.\u003c/li\u003e\n\u003cli\u003eData sampled on clock edges defined by \u003cstrong\u003eCPOL\u003c/strong\u003e (clock polarity) and \u003cstrong\u003eCPHA\u003c/strong\u003e (clock phase):\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMode 0\u003c/strong\u003e: CPOL=0 (idle low), CPHA=0 (sample on rising edge).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMode 3\u003c/strong\u003e: CPOL=1 (idle high), CPHA=1 (sample on falling edge).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSCLK | MOSI (Data from Master) | MISO (Data from Slave) | CS (Active Low)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"key-features\"\u003eKey Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFull-duplex\u003c/strong\u003e communication (simultaneous MOSI/MISO).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNo addressing\u003c/strong\u003e – slaves selected via SS lines.\u003c/li\u003e\n\u003cli\u003eSpeeds: Up to 100+ Mbps (depends on hardware).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"pros--cons\"\u003ePros \u0026amp; Cons\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003ePros\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eCons\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHigh-speed communication\u003c/td\u003e\n          \u003ctd\u003eHigh pin count (n+3 for n slaves)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSimple protocol, flexible modes\u003c/td\u003e\n          \u003ctd\u003eNo built-in error detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eFull-duplex support\u003c/td\u003e\n          \u003ctd\u003eNo multi-master support\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"use-cases\"\u003eUse Cases\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eHigh-speed sensors (e.g., IMUs).\u003c/li\u003e\n\u003cli\u003eDisplay controllers (OLED, TFT).\u003c/li\u003e\n\u003cli\u003eSD cards, NOR flash memory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"comparison-table\"\u003eComparison Table\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003eFeature\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eUART\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eI2C\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eSPI\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eClock\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eNone (async)\u003c/td\u003e\n          \u003ctd\u003eShared (SCL)\u003c/td\u003e\n          \u003ctd\u003eShared (SCLK)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eDuplex\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eFull-duplex\u003c/td\u003e\n          \u003ctd\u003eHalf-duplex\u003c/td\u003e\n          \u003ctd\u003eFull-duplex\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eTopology\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003ePoint-to-point\u003c/td\u003e\n          \u003ctd\u003eMulti-device\u003c/td\u003e\n          \u003ctd\u003eMaster-slave\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eSpeed\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLow (≤115kbps)\u003c/td\u003e\n          \u003ctd\u003eModerate (≤3.4Mbps)\u003c/td\u003e\n          \u003ctd\u003eHigh (≥10Mbps)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eAddressing\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eNone\u003c/td\u003e\n          \u003ctd\u003e7/10-bit\u003c/td\u003e\n          \u003ctd\u003eHardware (SS lines)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003ePins\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e2 (TX/RX)\u003c/td\u003e\n          \u003ctd\u003e2 (SCL/SDA)\u003c/td\u003e\n          \u003ctd\u003e4 + n (SS per slave)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eError Handling\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eParity bit\u003c/td\u003e\n          \u003ctd\u003eACK/NACK\u003c/td\u003e\n          \u003ctd\u003eNone\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"SPI"},{"content":"UART (Universal Asynchronous Receiver-Transmitter) UART is a simple, asynchronous serial communication protocol used for full-duplex communication between two devices.\nKey Features: Asynchronous: No clock signal – relies on pre-agreed baud rate (e.g., 9600, 115200 bps). Uses two main lines: TX (Transmit) and RX (Receive). Configurable baud rate (e.g., 9600, 115200 bps). Error detection: Parity bit (optional). Flow control: Hardware (RTS/CTS) or software (XON/XOFF). No addressing – only two devices per bus. Data Frame Structure Start bit (1 bit, logic low). Data bits (5–9 bits, LSB-first). Parity bit (optional, even/odd/none). Stop bit(s) (1 or 2 bits, logic high). Start Bit | Data Bits (5-9) | Parity Bit (Optional) | Stop Bit (1-2) Points to Remember If the baud rate is set as 115200, then the recever will expect stop bit that is high state for 1 baud period(generally). Usage in Linux Kernel: #include \u0026lt;linux/serial_core.h\u0026gt; struct uart_port *port; uart_write(port, \u0026#34;Hello\u0026#34;, 5); Use Cases Debugging consoles (e.g., Linux kernel printk via UART). GPS modules, Bluetooth/Wi-Fi modules. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/uart/","summary":"\u003ch2 id=\"uart-universal-asynchronous-receiver-transmitter\"\u003eUART (Universal Asynchronous Receiver-Transmitter)\u003c/h2\u003e\n\u003cp\u003eUART is a simple, asynchronous serial communication protocol used for full-duplex communication between two devices.\u003c/p\u003e\n\u003ch3 id=\"key-features\"\u003eKey Features:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAsynchronous: \u003cstrong\u003eNo clock signal\u003c/strong\u003e – relies on pre-agreed \u003cstrong\u003ebaud rate\u003c/strong\u003e (e.g., 9600, 115200 bps).\u003c/li\u003e\n\u003cli\u003eUses two main lines: \u003cstrong\u003eTX (Transmit)\u003c/strong\u003e and \u003cstrong\u003eRX (Receive)\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eConfigurable baud rate (e.g., 9600, 115200 bps).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eError detection\u003c/strong\u003e: Parity bit (optional).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlow control\u003c/strong\u003e: Hardware (RTS/CTS) or software (XON/XOFF).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNo addressing\u003c/strong\u003e – only two devices per bus.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"data-frame-structure\"\u003eData Frame Structure\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eStart bit\u003c/strong\u003e (1 bit, logic low).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData bits\u003c/strong\u003e (5–9 bits, LSB-first).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eParity bit\u003c/strong\u003e (optional, even/odd/none).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStop bit(s)\u003c/strong\u003e (1 or 2 bits, logic high).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eStart Bit | Data Bits (5-9) | Parity Bit (Optional) | Stop Bit (1-2)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"points-to-remember\"\u003ePoints to Remember\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIf the baud rate is set as 115200, then the recever will expect stop bit that is high state for 1 baud period(generally).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"usage-in-linux-kernel\"\u003eUsage in Linux Kernel:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;linux/serial_core.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e uart_port \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eport;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003euart_write\u003c/span\u003e(port, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"use-cases\"\u003eUse Cases\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDebugging consoles (e.g., Linux kernel \u003ccode\u003eprintk\u003c/code\u003e via UART).\u003c/li\u003e\n\u003cli\u003eGPS modules, Bluetooth/Wi-Fi modules.\u003c/li\u003e\n\u003c/ul\u003e","title":"UART"},{"content":"1. Introduction In a multitasking environment, multiple processes and threads may need to access shared resources concurrently. Without proper synchronization, race conditions, deadlocks, and data corruption can occur. The Linux kernel provides various synchronization primitives to ensure safe concurrent access while maintaining performance.\n2. Spinlocks Spinlocks are busy-waiting locks used in scenarios where critical sections are short and must be protected from concurrent access.\nKey Features: Suitable for short, critical sections. Does not sleep, making it ideal for use in interrupt handlers. If contention occurs, the CPU spins in a loop until the lock is available. Usage: spinlock_t my_lock; spin_lock_init(\u0026amp;my_lock); spin_lock(\u0026amp;my_lock); /* Critical section */ spin_unlock(\u0026amp;my_lock); Types of Spinlocks:\nRaw Spinlocks (raw_spinlock_t) - Used in low-level kernel code. Regular Spinlocks (spinlock_t) - Used in general kernel development. Read-Write Spinlocks (rwlock_t) - Allows multiple readers but only one writer. When to use In interrupt handlers. When the critical section is very short. Downsides of Spinlocks Busy-waiting wastes CPU cycles. Not suitable for long critical sections. Can lead to priority inversion issues. 3. Mutexes (Mutual Exclusion) A mutex allows only one thread to access a resource at a time, sleeping if it is unavailable.\nKey Features: Suitable for longer critical sections. Sleeps instead of busy-waiting (unlike spinlocks). Can be used in process context but not in interrupt context. Usage: struct mutex my_mutex; mutex_init(\u0026amp;my_mutex); mutex_lock(\u0026amp;my_mutex); /* Critical section */ mutex_unlock(\u0026amp;my_mutex); When to use: In process context where sleeping is allowed. When the critical section is long. Differences Between Mutexes and Spinlocks: Feature Mutex Spinlock Blocking Yes (sleeps) No (busy-waits) Used in IRQ Handlers No Yes Suitable for Long Critical Sections Yes No CPU Efficient Yes No 4. Semaphores Semaphores are counter-based locks that allow multiple threads to access a resource.\nKey Features: Allows multiple processes to access the resource up to a limit (unlike mutexes). Supports both blocking and non-blocking operations. Used for producer-consumer problems. Usage: struct semaphore my_sem; sema_init(\u0026amp;my_sem, 1); down(\u0026amp;my_sem); // Acquire /* Critical section */ up(\u0026amp;my_sem); // Release down() decrements the semaphore count and blocks if it is 0. up() increments the count and wakes up waiting tasks. When to use: When multiple processes need shared access with limited instances. Binary Semaphore vs. Mutex: A mutex can only be released by the same thread that acquired it. A semaphore can be released by any thread. 5. Barriers Barriers synchronize multiple threads so that they all reach a specific point before continuing. Generally, used in parallel computing for task synchronization. Example:\n#include \u0026lt;linux/smp.h\u0026gt; smp_mb(); // Prevents memory reordering Memory barriers like smp_mb(), smp_rmb(), and smp_wmb() prevent the compiler and CPU from reordering memory operations. When to use: Synchronizing parallel tasks. 6. Read-Copy Update (RCU) RCU allows fast, lockless reads and safe updates.\nKey Features: Readers never block, making it efficient for frequent reads. Writers update data by copying and replacing, avoiding contention. Useful in scenarios with many readers and few writers. Usage: struct my_data { int value; struct rcu_head rcu; }; struct my_data *global_ptr; rcu_read_lock(); struct my_data *data = rcu_dereference(global_ptr); /* Read data safely */ rcu_read_unlock(); Updating: struct my_data *new_data = kmalloc(sizeof(*new_data), GFP_KERNEL); new_data-\u0026gt;value = 42; rcu_assign_pointer(global_ptr, new_data); synchronize_rcu(); // Ensure old readers have finished When to use: In scenarios with frequent reads and infrequent writes. Advantages of RCU: Lock-free reads (fast access in read-heavy scenarios). Good for linked lists and large datasets. Used in the Linux kernel for managing task lists and network routing tables. 7. Completion Mechanism Used to signal completion of an operation. Usage:\nstruct completion my_completion; init_completion(\u0026amp;my_completion); complete(\u0026amp;my_completion); wait_for_completion(\u0026amp;my_completion); When to use:\nWhen a process needs to wait for an event. 8. Choosing the Right Synchronization Primitive Scenario Recommended Primitive Short critical section in IRQ Spinlock Long critical section Mutex Multiple readers, one writer Read-Write Lock Multiple accesses with blocking Semaphore Synchronizing multiple threads Barrier High-read, low-write scenarios RCU Waiting for an event Completion 9. Conclusion Understanding and correctly using synchronization mechanisms in the Linux kernel is essential to prevent concurrency issues and optimize performance. The right synchronization primitive depends on the execution context, critical section length, and performance requirements.\n","permalink":"https://blog.rishavs.in/posts/3-resource/platform/kernel-synchronization-in-linux/","summary":"\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eIn a multitasking environment, multiple processes and threads may need to access shared resources concurrently. Without proper synchronization, race conditions, deadlocks, and data corruption can occur. The Linux kernel provides various synchronization primitives to ensure safe concurrent access while maintaining performance.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-spinlocks\"\u003e2. Spinlocks\u003c/h2\u003e\n\u003cp\u003eSpinlocks are busy-waiting locks used in scenarios where critical sections are short and must be protected from concurrent access.\u003c/p\u003e\n\u003ch3 id=\"key-features\"\u003eKey Features:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSuitable for short, critical sections.\u003c/li\u003e\n\u003cli\u003eDoes \u003cstrong\u003enot\u003c/strong\u003e sleep, making it ideal for use in interrupt handlers.\u003c/li\u003e\n\u003cli\u003eIf contention occurs, the CPU \u003cstrong\u003espins in a loop\u003c/strong\u003e until the lock is available.\n\u003cstrong\u003eUsage:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003espinlock_t\u003c/span\u003e my_lock;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003espin_lock_init\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_lock);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003espin_lock\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_lock);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/* Critical section */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003espin_unlock\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_lock);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eTypes of Spinlocks:\u003c/strong\u003e\u003c/p\u003e","title":"Kernel Synchronization in Linux"},{"content":"Monolithic Kernel All core OS services (memory management, process scheduling, file systems, drivers) reside in kernel space. Example: Linux Kernel. Pros: Fast performance, directaccess to hardware. Cons: Large codebase, difficult debugging, crashes can affect the whole system. Microkernel Minimal core kernel, with most services running in user space. Example: QNX, Minix. Pros: Stability, modularity, better security. Cons: Performance overhead due to inter-process communication (IPC). ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/monolithic-vs-microkernel/","summary":"\u003ch3 id=\"monolithic-kernel\"\u003eMonolithic Kernel\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAll core OS services (memory management, process scheduling, file systems, drivers) reside in kernel space.\u003c/li\u003e\n\u003cli\u003eExample: Linux Kernel.\u003c/li\u003e\n\u003cli\u003ePros: Fast performance, directaccess to hardware.\u003c/li\u003e\n\u003cli\u003eCons: Large codebase, difficult debugging, crashes can affect the whole system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"microkernel\"\u003eMicrokernel\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMinimal core kernel, with most services running in user space.\u003c/li\u003e\n\u003cli\u003eExample: QNX, Minix.\u003c/li\u003e\n\u003cli\u003ePros: Stability, modularity, better security.\u003c/li\u003e\n\u003cli\u003eCons: Performance overhead due to inter-process communication (IPC).\u003c/li\u003e\n\u003c/ul\u003e","title":"Monolithic vs Microkernel"},{"content":"Overview Kernel Space: This is where the Linux kernel executes and provides low-level access to hardware, system memory management, process scheduling, and device drivers. Kernel space has privileged access to system resources and is protected from direct user interference. For example, when a user requests data from a hardware sensor, the kernel driver handles communication with the hardware, processes the request, and returns the data to user space through system calls. User Space: This is where applications and system utilities run. User-space processes operate with restricted privileges and interact with the kernel via system calls, libraries, and IPC mechanisms. For example, a user-space daemon may monitor the watchdog status by writing to /dev/watchdog, or a mobile app may read light intensity from /sys/bus/i2c/devices/1-0039/lux. Communication Methods between Kernel and User Space There are several ways to facilitate communication between user space and kernel space in an embedded Linux environment:\nSystem Calls The primary interface between user space and kernel space. Standard POSIX APIs like open(), read(), write(), mmap(), etc. Example: A watchdog daemon calls write(fd, \u0026amp;data, sizeof(data)) to reset the watchdog timer. ioctl (Input/Output Control) Used for sending custom commands to kernel drivers. Allows direct communication with device drivers. Example: ioctl(fd, CMD, arg); Proc Filesystem (/proc) A virtual filesystem providing a mechanism to read/write kernel information. Example: /proc/sys/kernel/ for system configurations. Sysfs (/sys) A virtual filesystem primarily used for exporting kernel object attributes. Example: /sys/class/gpio/ for GPIO control. Character and Block Device Drivers User space can interact with device files (/dev/xyz) using standard file operations. Example: echo \u0026quot;data\u0026quot; \u0026gt; /dev/watchdog to prevent system reset. Netlink Sockets Provides full-duplex communication between kernel and user space. Used for networking-related operations, system monitoring, etc. Example: A kernel module sending system event notifications to a user-space monitoring application. Message Queues (POSIX \u0026amp; System V) IPC mechanism for exchanging messages between processes. Can be used between a user-space application and kernel-space service. Example: A watchdog driver sending failure notifications to a monitoring daemon. Shared Memory (mmap()) Allows user space and kernel space to share memory regions. Used in high-speed data transfer applications. Example: A video processing pipeline using shared memory for fast frame exchange between kernel-space drivers and user-space applications. FIFOs (Named Pipes) A simple IPC mechanism that allows data transfer between user and kernel space through files. Signals Used to notify user-space processes about kernel events asynchronously. Example: kill -SIGUSR1 \u0026lt;pid\u0026gt;. UPROBE and KPROBE Kernel probes allowing user-space debugging and performance monitoring. Example: Debugging an I2C driver by probing read/write operations. eBPF (Extended Berkeley Packet Filter) Used for tracing and monitoring without modifying kernel code. Choosing the Right Communication Mechanism System Health Monitoring: Use Character Devices or ioctl (e.g., /dev/watchdog). Sensor Interfaces: Use Sysfs for simple reads, ioctl for advanced configs. High-Speed Data Transfer: Use Shared Memory (**mmap()**). Event Notifications: Use Netlink Sockets. Device Control: Use ioctl for structured commands. Debugging \u0026amp; Performance Monitoring: Use eBPF. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/kernel-space-vs-user-space/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKernel Space\u003c/strong\u003e: This is where the Linux kernel executes and provides low-level access to hardware, system memory management, process scheduling, and device drivers. Kernel space has privileged access to system resources and is protected from direct user interference. For example, when a user requests data from a hardware sensor, the kernel driver handles communication with the hardware, processes the request, and returns the data to user space through system calls.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Space\u003c/strong\u003e: This is where applications and system utilities run. User-space processes operate with restricted privileges and interact with the kernel via system calls, libraries, and IPC mechanisms. For example, a user-space daemon may monitor the watchdog status by writing to \u003ccode\u003e/dev/watchdog\u003c/code\u003e, or a mobile app may read light intensity from \u003ccode\u003e/sys/bus/i2c/devices/1-0039/lux\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"communication-methods-between-kernel-and-user-space\"\u003eCommunication Methods between Kernel and User Space\u003c/h2\u003e\n\u003cp\u003eThere are several ways to facilitate communication between user space and kernel space in an embedded Linux environment:\u003c/p\u003e","title":"Kernel Space vs User Space"},{"content":"1. Overview RTOS (Real-Time Operating System): Designed for deterministic, time-critical applications with low-latency response. Why RTOS over Linux? Deterministic Execution: RTOS ensures tasks meet strict timing deadlines, unlike Linux, which has non-deterministic scheduling. Low Overhead: RTOS has minimal context switching overhead and no user/kernel space separation. Resource-Constrained Devices: Ideal for microcontrollers (MCUs) with limited memory and processing power. Fast Boot Times: RTOS boots in milliseconds, while Linux requires a much longer initialization process. Interrupt Handling: More responsive to real-time interrupts, whereas Linux introduces latency due to its complex scheduler. FreeRTOS: A lightweight, open-source RTOS widely used in embedded systems. Linux Kernel: A general-purpose OS with multi-user capabilities, used in complex embedded and desktop/server systems. 2. FreeRTOS vs. Linux Kernel (Key Differences) Kernel vs. User Space FreeRTOS: It doesn\u0026rsquo;t have the concept of a user space and kernel space like Linux. The whole system is essentially one space, and tasks directly interact with the kernel (RTOS). You can think of FreeRTOS as a single program running with different tasks that can interact with each other or with hardware directly. Linux Kernel: Linux operates with a strict separation between user space and kernel space. User applications cannot directly interact with hardware; they must go through system calls, which are handled by the kernel. Scheduler FreeRTOS: Preemptive, cooperative, or tickless scheduling. Supports priority-based scheduling (fixed priority, round-robin, etc.). Simple task model, each task runs in its own stack but shares memory. Linux Kernel Also has a preemptive scheduler, but it is much more complex, as it must handle multiple users, system calls, different types of scheduling (e.g., real-time, normal tasks), and various priorities. Linux is optimized for fairness CFS (Completely Fair Scheduler) and general-purpose multitasking. The FreeRTOS scheduler, by contrast, is simpler and more deterministic. Processes FreeRTOS: Does not have a \u0026ldquo;process\u0026rdquo; model like Linux. Instead, it has tasks. Tasks in FreeRTOS can be thought of as lightweight threads. FreeRTOS doesn’t manage the memory space for each task in the same way Linux does for processes. All tasks share the same address space and run in the same context. Linux Kernel: Linux uses processes, each of which has its own memory space. Processes in Linux can be multi-threaded, and each thread can have different scheduling characteristics. Linux processes are isolated from each other, so one process crashing doesn\u0026rsquo;t affect others. Memory Management FreeRTOS: Memory management is more manual. FreeRTOS does not have sophisticated memory management like Linux. It provides basic functions for allocating fixed-size blocks or dynamic memory pools (pvPortMalloc, vPortFree). It doesn\u0026rsquo;t have virtual memory, so all tasks have access to the same memory space, making it much simpler but also more prone to memory corruption if not managed properly. Linux Kernel: Linux includes virtual memory, meaning each process has its own virtual address space. It supports advanced features like paging and memory protection. The Linux kernel has a memory management unit (MMU) and sophisticated memory allocators for heap, stack, and memory mapping. Drivers FreeRTOS: Drivers in FreeRTOS are usually written to interface directly with the hardware. Embedded developers write hardware-specific drivers for devices such as GPIO, UART, SPI, I2C, etc. The drivers are tightly coupled with the hardware and typically run in the same task context as the rest of the application. Interfacing with hardware is done via direct memory-mapped registers and interrupt service routines (ISRs). Linux Kernel: The Linux kernel has a comprehensive set of device drivers for a wide variety of hardware. Drivers in Linux are implemented as kernel modules, which can be dynamically loaded and unloaded. These drivers abstract hardware interactions and often provide a system call interface for user-space applications to interact with hardware. GPIO Management FreeRTOS: Direct register manipulation or vendor-specific HAL libraries. No standard GPIO subsystem like Linux. GPIO interrupts are handled using ISR (Interrupt Service Routines) with FreeRTOS primitives like queues for event notification. Linux Kernel: GPIO Subsystem: Provides an abstraction layer using sysfs, character devices, or device tree bindings. Uses kernel interrupt handling with debounce and polling mechanisms. Interrupt Handling FreeRTOS: Interrupt handling is done through Interrupt Service Routines (ISRs), which are small, time-critical functions that handle hardware interrupts. FreeRTOS provides mechanisms to synchronize tasks with ISRs via semaphores or queues. Linux Kernel: Linux also uses ISRs, but in addition to regular interrupts, it has a more complex mechanism for handling asynchronous events, such as software interrupts, tasklets, work queues, etc. The kernel abstracts much of the interrupt management for portability. Synchronization Mechanisms FreeRTOS: Offers simple synchronization primitives like semaphores, mutexes, queues, and event groups. These are lightweight and highly optimized for small systems with limited resources. Linux Kernel: Linux also provides synchronization mechanisms like semaphores, mutexes, and spinlocks. However, these mechanisms are more complex and support features like priority inversion prevention, as well as various types of locking for different kernel contexts. Filesystem and I/O FreeRTOS: By default, FreeRTOS does not provide any filesystem management or complex I/O subsystem. I/O is typically done through simple APIs provided by the BSP or device driver code. Linux Kernel: Linux supports a full-fledged filesystem with many types (e.g., ext4, NTFS) and includes complex device I/O management, including file descriptors, blocking/non-blocking I/O, and extensive support for network file systems (NFS, CIFS). Conclusion: Feature FreeRTOS Linux Kernel Kernel/User Space Single space Separated Scheduler Priority-based, Preemptive CFS, RT scheduling Driver Model Direct access, HAL-based Kernel module-based GPIO Management Direct register access Standard GPIO subsystem Process Model Tasks only Processes \u0026amp; Threads Memory Management Heap-based, no MMU Virtual memory, MMU support Use Cases Real-time, MCUs High-performance, SBCs, SoCs FreeRTOS and Linux serve different purposes in embedded systems:\nFreeRTOS is a lightweight, real-time operating system, designed to run on microcontrollers or systems with minimal resources, providing basic multitasking, real-time scheduling, and hardware management. It’s optimized for embedded and resource-constrained applications. Linux is a general-purpose operating system, providing much more advanced features like virtual memory, a full filesystem, multi-user support, and advanced scheduling. It’s ideal for systems with more resources and when complex system services are required. For an embedded BSP developer, FreeRTOS offers a simpler, more deterministic environment for managing hardware and real-time tasks, while Linux is suitable for more complex systems requiring multitasking, networking, and extensive user-space applications.\n","permalink":"https://blog.rishavs.in/posts/0-inbox/rtos-free-rtos-vs-linux-kernel/","summary":"\u003ch2 id=\"1-overview\"\u003e1. Overview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRTOS (Real-Time Operating System)\u003c/strong\u003e: Designed for deterministic, time-critical applications with low-latency response.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhy RTOS over Linux?\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDeterministic Execution\u003c/strong\u003e: RTOS ensures tasks meet strict timing deadlines, unlike Linux, which has non-deterministic scheduling.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLow Overhead\u003c/strong\u003e: RTOS has minimal context switching overhead and no user/kernel space separation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResource-Constrained Devices\u003c/strong\u003e: Ideal for microcontrollers (MCUs) with limited memory and processing power.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFast Boot Times\u003c/strong\u003e: RTOS boots in milliseconds, while Linux requires a much longer initialization process.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInterrupt Handling\u003c/strong\u003e: More responsive to real-time interrupts, whereas Linux introduces latency due to its complex scheduler.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS\u003c/strong\u003e: A lightweight, open-source RTOS widely used in embedded systems.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel\u003c/strong\u003e: A general-purpose OS with multi-user capabilities, used in complex embedded and desktop/server systems.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-freertos-vs-linux-kernel-key-differences\"\u003e2. FreeRTOS vs. Linux Kernel (Key Differences)\u003c/h2\u003e\n\u003ch3 id=\"kernel-vs-user-space\"\u003eKernel vs. User Space\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e It doesn\u0026rsquo;t have the concept of a user space and kernel space like Linux. The whole system is essentially one space, and tasks directly interact with the kernel (RTOS). You can think of FreeRTOS as a single program running with different tasks that can interact with each other or with hardware directly.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux operates with a strict separation between user space and kernel space. User applications cannot directly interact with hardware; they must go through system calls, which are handled by the kernel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"scheduler\"\u003eScheduler\u003c/h3\u003e\n\u003ch5 id=\"freertos\"\u003eFreeRTOS:\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003ePreemptive, cooperative, or tickless scheduling.\u003c/li\u003e\n\u003cli\u003eSupports priority-based scheduling (fixed priority, round-robin, etc.).\u003c/li\u003e\n\u003cli\u003eSimple task model, each task runs in its own stack but shares memory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"linux-kernel\"\u003eLinux Kernel\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eAlso has a preemptive scheduler, but it is much more complex, as it must handle multiple users, system calls, different types of scheduling (e.g., real-time, normal tasks), and various priorities.\u003c/li\u003e\n\u003cli\u003eLinux is optimized for fairness \u003cstrong\u003eCFS (Completely Fair Scheduler)\u003c/strong\u003e and general-purpose multitasking. The FreeRTOS scheduler, by contrast, is simpler and more deterministic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"processes\"\u003eProcesses\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e Does not have a \u0026ldquo;process\u0026rdquo; model like Linux. Instead, it has tasks. Tasks in FreeRTOS can be thought of as lightweight threads. FreeRTOS doesn’t manage the memory space for each task in the same way Linux does for processes. All tasks share the same address space and run in the same context.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux uses processes, each of which has its own memory space. Processes in Linux can be multi-threaded, and each thread can have different scheduling characteristics. Linux processes are isolated from each other, so one process crashing doesn\u0026rsquo;t affect others.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"memory-management\"\u003eMemory Management\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e Memory management is more manual. FreeRTOS does not have sophisticated memory management like Linux. It provides basic functions for allocating fixed-size blocks or dynamic memory pools (\u003ccode\u003epvPortMalloc\u003c/code\u003e, \u003ccode\u003evPortFree\u003c/code\u003e). It doesn\u0026rsquo;t have virtual memory, so all tasks have access to the same memory space, making it much simpler but also more prone to memory corruption if not managed properly.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux includes virtual memory, meaning each process has its own virtual address space. It supports advanced features like paging and memory protection. The Linux kernel has a memory management unit (MMU) and sophisticated memory allocators for heap, stack, and memory mapping.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"drivers\"\u003eDrivers\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e Drivers in FreeRTOS are usually written to interface directly with the hardware. Embedded developers write hardware-specific drivers for devices such as GPIO, UART, SPI, I2C, etc. The drivers are tightly coupled with the hardware and typically run in the same task context as the rest of the application. Interfacing with hardware is done via direct memory-mapped registers and interrupt service routines (ISRs).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e The Linux kernel has a comprehensive set of device drivers for a wide variety of hardware. Drivers in Linux are implemented as kernel modules, which can be dynamically loaded and unloaded. These drivers abstract hardware interactions and often provide a system call interface for user-space applications to interact with hardware.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"gpio-management\"\u003eGPIO Management\u003c/h3\u003e\n\u003ch5 id=\"freertos-1\"\u003eFreeRTOS:\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eDirect register manipulation or vendor-specific HAL libraries.\u003c/li\u003e\n\u003cli\u003eNo standard GPIO subsystem like Linux.\u003c/li\u003e\n\u003cli\u003eGPIO interrupts are handled using \u003cstrong\u003eISR (Interrupt Service Routines)\u003c/strong\u003e with FreeRTOS primitives like queues for event notification.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"linux-kernel-1\"\u003eLinux Kernel:\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGPIO Subsystem\u003c/strong\u003e: Provides an abstraction layer using sysfs, character devices, or device tree bindings.\u003c/li\u003e\n\u003cli\u003eUses kernel interrupt handling with debounce and polling mechanisms.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"interrupt-handling\"\u003eInterrupt Handling\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e Interrupt handling is done through \u003cstrong\u003eInterrupt Service Routines (ISRs)\u003c/strong\u003e, which are small, time-critical functions that handle hardware interrupts. FreeRTOS provides mechanisms to synchronize tasks with ISRs via \u003cstrong\u003esemaphores\u003c/strong\u003e or \u003cstrong\u003equeues\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux also uses ISRs, but in addition to regular interrupts, it has a more complex mechanism for handling asynchronous events, such as software interrupts, tasklets, work queues, etc. The kernel abstracts much of the interrupt management for portability.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"synchronization-mechanisms\"\u003eSynchronization Mechanisms\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e Offers simple synchronization primitives like \u003cstrong\u003esemaphores\u003c/strong\u003e, \u003cstrong\u003emutexes\u003c/strong\u003e, \u003cstrong\u003equeues\u003c/strong\u003e, and \u003cstrong\u003eevent groups\u003c/strong\u003e. These are lightweight and highly optimized for small systems with limited resources.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux also provides synchronization mechanisms like \u003cstrong\u003esemaphores\u003c/strong\u003e, \u003cstrong\u003emutexes\u003c/strong\u003e, and \u003cstrong\u003espinlocks\u003c/strong\u003e. However, these mechanisms are more complex and support features like priority inversion prevention, as well as various types of locking for different kernel contexts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"filesystem-and-io\"\u003eFilesystem and I/O\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFreeRTOS:\u003c/strong\u003e By default, FreeRTOS does not provide any filesystem management or complex I/O subsystem. I/O is typically done through simple APIs provided by the BSP or device driver code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinux Kernel:\u003c/strong\u003e Linux supports a full-fledged filesystem with many types (e.g., ext4, NTFS) and includes complex device I/O management, including file descriptors, blocking/non-blocking I/O, and extensive support for network file systems (NFS, CIFS).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion:\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eFeature\u003c/th\u003e\n          \u003cth\u003eFreeRTOS\u003c/th\u003e\n          \u003cth\u003eLinux Kernel\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eKernel/User Space\u003c/td\u003e\n          \u003ctd\u003eSingle space\u003c/td\u003e\n          \u003ctd\u003eSeparated\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eScheduler\u003c/td\u003e\n          \u003ctd\u003ePriority-based, Preemptive\u003c/td\u003e\n          \u003ctd\u003eCFS, RT scheduling\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDriver Model\u003c/td\u003e\n          \u003ctd\u003eDirect access, HAL-based\u003c/td\u003e\n          \u003ctd\u003eKernel module-based\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGPIO Management\u003c/td\u003e\n          \u003ctd\u003eDirect register access\u003c/td\u003e\n          \u003ctd\u003eStandard GPIO subsystem\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eProcess Model\u003c/td\u003e\n          \u003ctd\u003eTasks only\u003c/td\u003e\n          \u003ctd\u003eProcesses \u0026amp; Threads\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eMemory Management\u003c/td\u003e\n          \u003ctd\u003eHeap-based, no MMU\u003c/td\u003e\n          \u003ctd\u003eVirtual memory, MMU support\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eUse Cases\u003c/td\u003e\n          \u003ctd\u003eReal-time, MCUs\u003c/td\u003e\n          \u003ctd\u003eHigh-performance, SBCs, SoCs\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eFreeRTOS and Linux serve different purposes in embedded systems:\u003c/p\u003e","title":"RTOS (FreeRTOS) vs Linux Kernel"},{"content":"1. Linux Kernel Internals Importance: Understanding kernel internals is crucial for BSP and driver development as it helps in debugging, optimizing performance, and modifying the kernel to meet hardware-specific requirements.\nTopics: Kernel Architecture: Monolithic vs Microkernel, Kernel and User Space interactions. Process Management: Understanding task_struct, process states, scheduling algorithms. Interrupt Handling: SoftIRQs, tasklets, bottom halves, handling IRQs efficiently. Memory Management: Paging, kmalloc/vmalloc, slab allocator, ARM MMU and memory regions. Syscalls: How system calls work, writing custom syscalls. Kernel Synchronization: Spinlocks, mutexes, semaphores, barriers, RCU. Workqueues and Timers: Deferred execution, using timers for scheduling tasks. 2. Linux Device Drivers Importance: Device drivers are the bridge between hardware and the OS. Understanding drivers is crucial for embedded systems and BSP development.\nTopics: Character Drivers: open(), read(), write(), ioctl() implementations. Block Drivers: Block layer, request queues, I/O scheduling. Platform Drivers: Registering platform devices, working with platform_driver. Peripheral Drivers (I2C, SPI, UART, GPIO): Writing and debugging drivers. Power Management: Implementing runtime PM, suspend/resume operations. Interrupt Handling: Requesting IRQs, shared interrupts, threaded IRQs. DMA Handling: Understanding DMA API, memory mappings. 3. Board Support Package (BSP) Development Importance: BSP development is fundamental in embedded systems as it enables the OS to run on custom hardware.\nTopics: Boot Process \u0026amp; Bootloaders: U-Boot configuration, boot sequence. Device Tree (DTS/DTSI): Writing device tree files, overlays. Kernel Configuration \u0026amp; Compilation: Using menuconfig, defconfig, Kconfig. Root Filesystem \u0026amp; Init System: Understanding BusyBox, systemd integration. Flash Storage Handling: MTD subsystem, eMMC, NAND, SPI-NOR. Clock \u0026amp; Power Management: Configuring common clock framework, PMIC integration. 4. Filesystems \u0026amp; Storage Importance: A deep understanding of filesystems is necessary for debugging and optimizing embedded storage solutions.\nTopics: VFS (Virtual Filesystem Switch): inode, dentry, superblock structures. Filesystems (EXT4, XFS, UBIFS, JFFS2): Understanding journaling, flash filesystems. Block Layer \u0026amp; IO Scheduling: Elevator schedulers (BFQ, CFQ, noop). Storage Performance Tuning: Tools like fio, iostat, blktrace. 5. Debugging \u0026amp; Performance Tuning Importance: Kernel debugging skills are essential for troubleshooting and performance optimization.\nTopics: Debugging Tools: gdb, kgdb, kdb, ftrace, perf. Kernel Panics \u0026amp; OOPS Analysis: Using dmesg, analyzing stack traces. Live Patching \u0026amp; Crash Analysis: kexec, crash utility. Profiling \u0026amp; Tracing: perf, eBPF, bpftrace, SystemTap. Race Condition \u0026amp; Deadlock Debugging: Using lockdep, detecting spinlock issues. 6. Security in the Kernel Importance: Security mechanisms are crucial for preventing vulnerabilities in embedded systems.\nTopics: LSM (Linux Security Modules): SELinux, AppArmor. Secure Boot \u0026amp; Verified Boot: UEFI Secure Boot, dm-verity, ARM TrustZone, OPTee. Memory Protections: KASLR, W^X policy. Syscall Filtering \u0026amp; Sandboxing: Seccomp, cgroups, namespaces. 7. Real-Time Linux \u0026amp; Performance Optimization Importance: For time-sensitive embedded applications, real-time (RT) Linux provides deterministic behaviour(refer RTOS).\nTopics: PREEMPT-RT Patches: Real-time scheduling policies. CPU Isolation \u0026amp; Affinity: Configuring isolcpus, taskset. Kernel Latency Measurement: Using cyclictest, rt-tests. Scheduler Policies: SCHED_FIFO, SCHED_RR, SCHED_DEADLINE. 8. Virtualization \u0026amp; Containers Importance: Virtualization and containers are widely used in modern BSPs for resource isolation.\nTopics: KVM/QEMU for Kernel Development: Running the kernel in QEMU, Virtio, ARM-specific virtualization (EL2, EL3 modes). cgroups \u0026amp; Namespaces: Managing resource isolation. Device Passthrough \u0026amp; VFIO: PCI passthrough, IOMMU. Container Security: Using SELinux/AppArmor for container isolation. 9. Networking \u0026amp; Protocol Stack Importance: Networking knowledge is necessary for developing network drivers and optimizing performance.\nTopics: TCP/IP Stack in Linux: Netfilter, skb_buff, struct socket. Packet Filtering \u0026amp; Traffic Shaping: iptables, tc. Networking Drivers: Writing NIC drivers, debugging performance issues. Wi-Fi \u0026amp; Bluetooth Stack: cfg80211, rfkill. 10. Build Systems \u0026amp; Toolchains Importance: Understanding build systems is crucial for compiling and customizing embedded systems.\nTopics: Cross-Compilation \u0026amp; Toolchains: Using Buildroot toolchain. Build Systems: Yocto Project, OpenEmbedded. Kernel Build System: Makefile, Kbuild, kconfig. Static \u0026amp; Dynamic Linking: Differences between shared and static libraries. Conclusion Strong debugging skills. Deep understanding of kernel internals and device drivers. Experience in BSP and board bring-up. Ability to optimize performance and ensure security. Hands-on experience with build systems and toolchains. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/bsp-topics/","summary":"\u003ch2 id=\"1-linux-kernel-internals\"\u003e1. Linux Kernel Internals\u003c/h2\u003e\n\u003ch3 id=\"importance\"\u003eImportance:\u003c/h3\u003e\n\u003cp\u003eUnderstanding kernel internals is crucial for BSP and driver development as it helps in debugging, optimizing performance, and modifying the kernel to meet hardware-specific requirements.\u003c/p\u003e\n\u003ch3 id=\"topics\"\u003eTopics:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKernel Architecture:\u003c/strong\u003e \u003ca href=\"/posts/3-resource/platform/monolithic-vs-microkernel/\"\u003eMonolithic vs Microkernel\u003c/a\u003e, \u003ca href=\"/posts/3-resource/platform/kernel-space-vs-user-space/\"\u003eKernel and User Space interactions\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProcess Management:\u003c/strong\u003e Understanding \u003ccode\u003etask_struct\u003c/code\u003e, process states, scheduling algorithms.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInterrupt Handling:\u003c/strong\u003e SoftIRQs, tasklets, bottom halves, handling IRQs efficiently.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMemory Management:\u003c/strong\u003e Paging, kmalloc/vmalloc, slab allocator, ARM MMU and memory regions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSyscalls:\u003c/strong\u003e How system calls work, writing custom syscalls.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"/posts/3-resource/platform/kernel-synchronization-in-linux/\"\u003eKernel Synchronization\u003c/a\u003e:\u003c/strong\u003e Spinlocks, mutexes, semaphores, barriers, RCU.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWorkqueues and Timers:\u003c/strong\u003e Deferred execution, using timers for scheduling tasks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-linux-device-drivers\"\u003e2. Linux Device Drivers\u003c/h2\u003e\n\u003ch3 id=\"importance-1\"\u003eImportance:\u003c/h3\u003e\n\u003cp\u003eDevice drivers are the bridge between hardware and the OS. Understanding drivers is crucial for embedded systems and BSP development.\u003c/p\u003e","title":"BSP Topics"},{"content":"!assets/Pasted image 20250203182747.png\nReference GirFlow Explained: https://youtu.be/Aa8RpP0sf-Y ","permalink":"https://blog.rishavs.in/posts/3-resource/development/git-flow/","summary":"\u003cp\u003e!assets/Pasted image 20250203182747.png\u003c/p\u003e\n\u003ch2 id=\"reference\"\u003eReference\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGirFlow Explained: \u003ca href=\"https://youtu.be/Aa8RpP0sf-Y\"\u003ehttps://youtu.be/Aa8RpP0sf-Y\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"GitFlow"},{"content":"SHA-256 is a cryptographic hash function that produces a fixed-size 256-bit (32-byte) hash. It is deterministic, collision-resistant, and designed for security-critical applications.\n!assets/hashing-algorithm-sha256.png\nHow SHA-256 Works Preprocessing: Pad the input to a multiple of 512 bits. Append a 1, then add k zeros, and finally append the original message length (64 bits). Initialize Hash Values: Use constants derived from the fractional parts of square roots of the first 8 primes (eight 32-bit words). Example: h0 = 0x6a09e667, h1 = 0xbb67ae85, .... Process Blocks: Split the padded message into 512-bit blocks. For each block: Expand the block into 64 words using a message schedule. Perform 64 rounds of compression using bitwise operations (e.g., XOR, AND, modular addition). Compression Function A compression function is applied to each block, creating a new hash value. This function involves mixing the bits of the current hash value and the message block. Iteration Repeat the compression function for each block, using the output of each iteration as input for the next. Final Hash: Combine the intermediate hash values to produce the final 256-bit digest. Example: SHA-256 for String \u0026ldquo;Hello\u0026rdquo; Input: \u0026ldquo;Hello\u0026rdquo; → ASCII 48656C6C6F. Padding: Length = 40 bits (5 bytes). Pad with 1, 407 zeros, and 0000000000000028 (hex for 40 bits). Hash Computation: After processing, the final hash is: 185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969. Use Cases SHA-256 Cryptographic security in: Digital signatures (SSL/TLS certificates). Password storage (hashed+salted). Blockchain (Bitcoin transactions). File integrity verification (e.g., software downloads). Guarantees: Pre-image resistance, collision resistance. ","permalink":"https://blog.rishavs.in/posts/3-resource/sha-256-secure-hash-algorithm-256-bit/","summary":"\u003cp\u003eSHA-256 is a cryptographic hash function that produces a fixed-size 256-bit (32-byte) hash. It is \u003cstrong\u003edeterministic\u003c/strong\u003e, \u003cstrong\u003ecollision-resistant\u003c/strong\u003e, and designed for security-critical applications.\u003c/p\u003e\n\u003cp\u003e!assets/hashing-algorithm-sha256.png\u003c/p\u003e\n\u003ch3 id=\"how-sha-256-works\"\u003eHow SHA-256 Works\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePreprocessing\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003ePad the input to a multiple of 512 bits.\u003c/li\u003e\n\u003cli\u003eAppend a \u003ccode\u003e1\u003c/code\u003e, then add \u003ccode\u003ek\u003c/code\u003e zeros, and finally append the original message length (64 bits).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInitialize Hash Values\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eUse constants derived from the fractional parts of square roots of the first 8 primes (eight 32-bit words).\u003c/li\u003e\n\u003cli\u003eExample: \u003ccode\u003eh0 = 0x6a09e667, h1 = 0xbb67ae85, ...\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProcess Blocks\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSplit the padded message into 512-bit blocks.\u003c/li\u003e\n\u003cli\u003eFor each block:\n\u003cul\u003e\n\u003cli\u003eExpand the block into 64 words using a message schedule.\u003c/li\u003e\n\u003cli\u003ePerform 64 rounds of compression using bitwise operations (e.g., XOR, AND, modular addition).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCompression Function\u003c/strong\u003e\nA compression function is applied to each block, creating a new hash value. This function involves mixing the bits of the current hash value and the message block.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIteration\u003c/strong\u003e\nRepeat the compression function for each block, using the output of each iteration as input for the next.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFinal Hash\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eCombine the intermediate hash values to produce the final 256-bit digest.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"example-sha-256-for-string-hello\"\u003eExample: SHA-256 for String \u0026ldquo;Hello\u0026rdquo;\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInput\u003c/strong\u003e: \u0026ldquo;Hello\u0026rdquo; → ASCII \u003ccode\u003e48656C6C6F\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePadding\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eLength = 40 bits (5 bytes).\u003c/li\u003e\n\u003cli\u003ePad with \u003ccode\u003e1\u003c/code\u003e, 407 zeros, and \u003ccode\u003e0000000000000028\u003c/code\u003e (hex for 40 bits).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHash Computation\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAfter processing, the final hash is:\n\u003ccode\u003e185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"use-cases\"\u003eUse Cases\u003c/h3\u003e\n\u003ch4 id=\"sha-256\"\u003eSHA-256\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCryptographic security\u003c/strong\u003e in:\n\u003cul\u003e\n\u003cli\u003eDigital signatures (SSL/TLS certificates).\u003c/li\u003e\n\u003cli\u003ePassword storage (hashed+salted).\u003c/li\u003e\n\u003cli\u003eBlockchain (Bitcoin transactions).\u003c/li\u003e\n\u003cli\u003eFile integrity verification (e.g., software downloads).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGuarantees\u003c/strong\u003e: Pre-image resistance, collision resistance.\u003c/li\u003e\n\u003c/ul\u003e","title":"SHA-256 (Secure Hash Algorithm 256-bit)"},{"content":"CRC is an error-detection code used to detect accidental changes to raw data (e.g., during transmission or storage). It works by treating the data as a polynomial and performing polynomial division with a predefined generator polynomial. The remainder of this division becomes the CRC value.\nHow CRC is Calculated Convert data to binary: Treat the data as a sequence of bits. Append zeros: Add n zeros to the end of the data, where n is the degree of the generator polynomial (e.g., CRC-32 uses a 33-bit polynomial, so append 32 zeros). Polynomial division: Divide the data + zeros by the generator polynomial using modulo-2 arithmetic (XOR operations). CRC value: The remainder of this division is the CRC checksum. Example: CRC-8 for String \u0026ldquo;Hi\u0026rdquo; Data: \u0026ldquo;Hi\u0026rdquo; in ASCII is 01001000 01101001. Generator Polynomial: CRC-8 (e.g., x⁸ + x² + x + 1), represented as 100000111. Append 8 zeros:\nData becomes 010010000110100100000000. Perform division: Divide 010010000110100100000000 by 100000111 using XOR. Remainder: Let’s assume the remainder is 00110110 (hex 0x36). Final CRC: 0x36. Use Cases Error detection in: Network protocols (Ethernet, Wi-Fi). Storage systems (hard drives, ZIP files). Quick checksums for small data transfers. Not secure against intentional tampering. ","permalink":"https://blog.rishavs.in/posts/3-resource/crc-cyclic-redundancy-check/","summary":"\u003cp\u003eCRC is an error-detection code used to detect accidental changes to raw data (e.g., during transmission or storage). It works by treating the data as a polynomial and performing polynomial division with a predefined \u003cstrong\u003egenerator polynomial\u003c/strong\u003e. The remainder of this division becomes the CRC value.\u003c/p\u003e\n\u003ch3 id=\"how-crc-is-calculated\"\u003eHow CRC is Calculated\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eConvert data to binary\u003c/strong\u003e: Treat the data as a sequence of bits.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAppend zeros\u003c/strong\u003e: Add \u003ccode\u003en\u003c/code\u003e zeros to the end of the data, where \u003ccode\u003en\u003c/code\u003e is the degree of the generator polynomial (e.g., CRC-32 uses a 33-bit polynomial, so append 32 zeros).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePolynomial division\u003c/strong\u003e: Divide the data + zeros by the generator polynomial using \u003cstrong\u003emodulo-2 arithmetic\u003c/strong\u003e (XOR operations).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCRC value\u003c/strong\u003e: The remainder of this division is the CRC checksum.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"example-crc-8-for-string-hi\"\u003eExample: CRC-8 for String \u0026ldquo;Hi\u0026rdquo;\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eData\u003c/strong\u003e: \u0026ldquo;Hi\u0026rdquo; in ASCII is \u003ccode\u003e01001000 01101001\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGenerator Polynomial\u003c/strong\u003e: CRC-8 (e.g., \u003ccode\u003ex⁸ + x² + x + 1\u003c/code\u003e), represented as \u003ccode\u003e100000111\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAppend 8 zeros\u003c/strong\u003e:\u003cbr\u003e\nData becomes \u003ccode\u003e010010000110100100000000\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePerform division\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eDivide \u003ccode\u003e010010000110100100000000\u003c/code\u003e by \u003ccode\u003e100000111\u003c/code\u003e using XOR.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemainder\u003c/strong\u003e: Let’s assume the remainder is \u003ccode\u003e00110110\u003c/code\u003e (hex \u003ccode\u003e0x36\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFinal CRC\u003c/strong\u003e: \u003ccode\u003e0x36\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"use-cases\"\u003eUse Cases\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eError detection\u003c/strong\u003e in:\n\u003cul\u003e\n\u003cli\u003eNetwork protocols (Ethernet, Wi-Fi).\u003c/li\u003e\n\u003cli\u003eStorage systems (hard drives, ZIP files).\u003c/li\u003e\n\u003cli\u003eQuick checksums for small data transfers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNot secure\u003c/strong\u003e against intentional tampering.\u003c/li\u003e\n\u003c/ul\u003e","title":"CRC (Cyclic Redundancy Check)"},{"content":"Overview The Device Tree (DT) is a data structure used to describe the hardware components of a system in a way that is independent of the operating system and software. It is particularly relevant for systems based on the ARM architecture, where the hardware varies significantly across devices.\nInstead of hardcoding hardware details in the kernel, the device tree provides a flexible way to inform the kernel about the system\u0026rsquo;s hardware layout. This simplifies kernel code and enables easier reuse across multiple hardware platforms.\nKey Concepts 1. Structure Device Tree Source (DTS): A human-readable text file that describes hardware. Device Tree Blob (DTB): A binary representation of the DTS, passed to the kernel at boot time. Device Tree Compiler (DTC): Used to convert DTS to DTB. 2. Syntax The syntax of a DTS file resembles a hierarchical tree structure with nodes and properties:\n/dts-v1/; / { compatible = \u0026#34;rockchip,rk3399\u0026#34;; memory { device_type = \u0026#34;memory\u0026#34;; reg = \u0026lt;0x00000000 0x80000000\u0026gt;; // Base address and size }; uart0: serial@ff180000 { compatible = \u0026#34;rockchip,rk3399-uart\u0026#34;; reg = \u0026lt;0xff180000 0x100\u0026gt;; interrupts = \u0026lt;0 12 4\u0026gt;; status = \u0026#34;okay\u0026#34;; }; }; Nodes: Represent physical/logical devices (e.g., CPUs, I2C buses, GPIO controllers, serial@ff180000). Properties: Key-value pairs describing device attributes (e.g., registers, interrupts, clock frequencies). 3. Key Properties compatible: Identifies the driver that should handle the device. reg: Specifies the base address and size of the device\u0026rsquo;s registers. interrupts: Describes interrupt lines and their configuration. status: Indicates if the device is active (okay) or disabled (disabled). How the Device Tree Works Bootloader Phase The bootloader (e.g., U-Boot) loads the kernel and the DTB into memory. It passes the address of the DTB to the kernel. Kernel Initialization The kernel reads the DTB to understand the hardware layout. Based on the compatible property, the kernel matches devices to their respective drivers. Driver Binding Device drivers register themselves with the kernel. The kernel matches the driver’s of_match_table with the compatible property in the DTB. If a match is found, the driver is bound to the device. Example: I2C Device on Bus 2, Slave Address 0x44 Scenario: Adding a temperature sensor (e.g., tmp102) at address 0x44 on I2C bus 2.\nStep 1: Device Tree Source (DTS) // File: myboard.dts / { compatible = \u0026#34;vendor,myboard\u0026#34;; model = \u0026#34;My Embedded Board\u0026#34;; // I2C Controller (e.g., i2c2) i2c2: i2c@40005800 { compatible = \u0026#34;vendor,i2c-controller\u0026#34;; reg = \u0026lt;0x40005800 0x400\u0026gt;; // Base address and size #address-cells = \u0026lt;1\u0026gt;; // Number of cells for I2C slave addresses #size-cells = \u0026lt;0\u0026gt;; // No size field for I2C slaves // Temperature sensor at slave address 0x44 temp_sensor: tmp102@44 { compatible = \u0026#34;ti,tmp102\u0026#34;; // Matches driver\u0026#39;s `of_match_table` reg = \u0026lt;0x44\u0026gt;; // I2C slave address (7-bit format) interrupt-parent = \u0026lt;\u0026amp;gpioa\u0026gt;; interrupts = \u0026lt;9 IRQ_TYPE_EDGE_FALLING\u0026gt;; // GPIO pin 9, falling edge }; }; }; Step 2: Compile the Device Tree # Compile .dts to .dtb dtc -O dtb -o myboard.dtb myboard.dts Step 3: Load the Device Tree Pass the DT blob to the kernel via the bootloader (e.g., U-Boot): load mmc 0:1 ${fdt_addr} myboard.dtb bootz ${kernel_addr} - ${fdt_addr} 4. Driver Implementation for the I2C Device Key Functions:\nProbe Function: Called when a device with a matching compatible string is found. Device Tree Parsing: Extract properties (e.g., interrupts, registers). Example Driver Code #include \u0026lt;linux/module.h\u0026gt; #include \u0026lt;linux/i2c.h\u0026gt; #include \u0026lt;linux/of.h\u0026gt; // Define device-specific data structure struct tmp102_data { struct i2c_client *client; int irq; }; // Platform IDs for Device Tree matching static const struct of_device_id tmp102_of_match[] = { { .compatible = \u0026#34;ti,tmp102\u0026#34; }, // Matches DTS `compatible` string { } }; MODULE_DEVICE_TABLE(of, tmp102_of_match); // Probe function static int tmp102_probe(struct i2c_client *client, const struct i2c_device_id *id) { struct tmp102_data *data; struct device *dev = \u0026amp;client-\u0026gt;dev; int ret; // Allocate memory for device data data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL); if (!data) return -ENOMEM; data-\u0026gt;client = client; // Get IRQ from Device Tree data-\u0026gt;irq = irq_of_parse_and_map(dev-\u0026gt;of_node, 0); if (data-\u0026gt;irq \u0026lt;= 0) { dev_err(dev, \u0026#34;Failed to get IRQ\\n\u0026#34;); return -EINVAL; } // Read a register from the I2C device (example) ret = i2c_smbus_read_word_swapped(client, 0x00); if (ret \u0026lt; 0) { dev_err(dev, \u0026#34;Failed to read temperature\\n\u0026#34;); return ret; } dev_info(dev, \u0026#34;Probed TMP102 at address 0x%02x\\n\u0026#34;, client-\u0026gt;addr); return 0; } // I2C driver structure static struct i2c_driver tmp102_driver = { .driver = { .name = \u0026#34;tmp102\u0026#34;, .of_match_table = tmp102_of_match, }, .probe = tmp102_probe, }; module_i2c_driver(tmp102_driver); 5. Validating the Device Tree in Userspace Refer: I2C#I2C-Tools Package in Userspace\n# List I2C devices on bus 2 i2cdetect -y 2 0 1 2 ... 44 ... UU -- ... 44 ... # View DT node for the I2C device ls /proc/device-tree/i2c@40005800/tmp102@44 Writing a Kernel Driver with Device Tree Support Here is an example of a UART driver that uses the device tree.\n1. Device Tree Entry Add the following node in the DTS file for a UART device:\nuart0: serial@ff180000 { compatible = \u0026#34;custom,uart\u0026#34;; reg = \u0026lt;0xff180000 0x100\u0026gt;; interrupts = \u0026lt;0 12 4\u0026gt;; status = \u0026#34;okay\u0026#34;; }; 2. Driver Code Below is a minimal device driver that interacts with the device tree:\n#include \u0026lt;linux/module.h\u0026gt; #include \u0026lt;linux/platform_device.h\u0026gt; #include \u0026lt;linux/of.h\u0026gt; #include \u0026lt;linux/io.h\u0026gt; #include \u0026lt;linux/interrupt.h\u0026gt; #define DRIVER_NAME \u0026#34;custom_uart\u0026#34; struct uart_dev { void __iomem *base; int irq; }; static int uart_probe(struct platform_device *pdev) { struct resource *res; struct uart_dev *uart; uart = devm_kzalloc(\u0026amp;pdev-\u0026gt;dev, sizeof(*uart), GFP_KERNEL); if (!uart) return -ENOMEM; res = platform_get_resource(pdev, IORESOURCE_MEM, 0); uart-\u0026gt;base = devm_ioremap_resource(\u0026amp;pdev-\u0026gt;dev, res); if (IS_ERR(uart-\u0026gt;base)) return PTR_ERR(uart-\u0026gt;base); uart-\u0026gt;irq = platform_get_irq(pdev, 0); if (uart-\u0026gt;irq \u0026lt; 0) return uart-\u0026gt;irq; dev_info(\u0026amp;pdev-\u0026gt;dev, \u0026#34;UART probed at %p with IRQ %d\\n\u0026#34;, uart-\u0026gt;base, uart-\u0026gt;irq); return 0; } static int uart_remove(struct platform_device *pdev) { dev_info(\u0026amp;pdev-\u0026gt;dev, \u0026#34;UART removed\\n\u0026#34;); return 0; } static const struct of_device_id uart_of_match[] = { { .compatible = \u0026#34;custom,uart\u0026#34; }, {}, }; MODULE_DEVICE_TABLE(of, uart_of_match); static struct platform_driver uart_driver = { .driver = { .name = DRIVER_NAME, .of_match_table = uart_of_match, }, .probe = uart_probe, .remove = uart_remove, }; module_platform_driver(uart_driver); MODULE_LICENSE(\u0026#34;GPL\u0026#34;); MODULE_AUTHOR(\u0026#34;Embedded Developer\u0026#34;); MODULE_DESCRIPTION(\u0026#34;Custom UART Driver\u0026#34;); 3. Explanation of_match_table: Matches the compatible property in the DTB with the driver. platform_get_resource: Retrieves memory regions (registers) from the DT. platform_get_irq: Retrieves the interrupt line from the DT. devm_*: Managed functions for resource allocation, simplifying cleanup. Example Rockchip system:\nReplace \u0026quot;custom,uart\u0026quot; with \u0026quot;rockchip,rk3399-uart\u0026quot;. Ensure the reg and interrupts values match your hardware\u0026rsquo;s specifications. Use this approach to add support for other peripherals (e.g., GPIO, I2C, SPI) in your system. References Linux kernel documentation: Device Tree U-Boot documentation: Device Tree Support Regmap documentation: Regmap API ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/device-tree-dt-in-linux-kernel/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThe Device Tree (DT) is a data structure used to describe the hardware components of a system in a way that is independent of the operating system and software. It is particularly relevant for systems based on the ARM architecture, where the hardware varies significantly across devices.\u003c/p\u003e\n\u003cp\u003eInstead of hardcoding hardware details in the kernel, the device tree provides a flexible way to inform the kernel about the system\u0026rsquo;s hardware layout. This simplifies kernel code and enables easier reuse across multiple hardware platforms.\u003c/p\u003e","title":"Device Tree (DT) in Linux Kernel"},{"content":"Overview Character devices allow byte-by-byte communication between user-space applications and kernel drivers. They are commonly used for devices like serial ports, sensors, and custom hardware interfaces. The Linux kernel provides mechanisms for registering, managing, and interacting with character devices via a device file in /dev.\nRegistering a Character Device To register a character device, the driver needs to:\n1. Allocate a Major and Minor Number: Each character device is identified by a major number (device type) and a minor number (specific device). The major number indicates the driver associated with the device, while the minor number is used to differentiate between multiple devices handled by the same driver. If major and minor numbers are repeated, it can cause conflicts and lead to incorrect device identification. To avoid this, the kernel provides alloc_chrdev_region, a function to dynamically allocate major and minor numbers, ensuring uniqueness. These numbers are used in the /dev directory to associate device files with their corresponding drivers. Use alloc_chrdev_region to dynamically allocate a major number. dev_t dev; int result; // kernel/fs/char_dev.c // int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name) result = alloc_chrdev_region(\u0026amp;dev, 0, 1, \u0026#34;my_char_device\u0026#34;); if (result \u0026lt; 0) { pr_err(\u0026#34;Failed to allocate major number\\n\u0026#34;); return result; } pr_info(\u0026#34;Device registered with major %d, minor %d\\n\u0026#34;, MAJOR(dev), MINOR(dev)); 2. Initialize and Register the Device: Define a cdev structure and initialize it with file operations. Use cdev_add to register the device with the kernel. struct cdev my_cdev; cdev_init(\u0026amp;my_cdev, \u0026amp;my_fops); my_cdev.owner = THIS_MODULE; result = cdev_add(\u0026amp;my_cdev, dev, 1); if (result \u0026lt; 0) { pr_err(\u0026#34;Failed to add cdev\\n\u0026#34;); unregister_chrdev_region(dev, 1); return result; } 3. Create a Device File (Optional): Creating a device file in /dev is optional because character devices can be accessed directly using their major and minor numbers through system calls or user-space libraries, bypassing the need for a device file. However, creating a file in /dev makes interaction more user-friendly by providing a standard interface. To interact with a character device without creating a device file, you can use system calls like mknod to create a temporary device node or interact with the device directly using its major and minor numbers programmatically. Use class_create and device_create to automatically create a device file in /dev. struct class *my_class; my_class = class_create(THIS_MODULE, \u0026#34;my_device_class\u0026#34;); if (IS_ERR(my_class)) { pr_err(\u0026#34;Failed to create class\\n\u0026#34;); cdev_del(\u0026amp;my_cdev); unregister_chrdev_region(dev, 1); return PTR_ERR(my_class); } device_create(my_class, NULL, dev, NULL, \u0026#34;my_char_device\u0026#34;); File Operations Character devices are controlled through a set of file operations defined in a struct file_operations. These operations determine how the device responds to system calls like open, read, write, and ioctl.\n1. Define File Operations: static ssize_t my_read(struct file *file, char __user *buf, size_t len, loff_t *offset) { char data[] = \u0026#34;Hello from kernel!\\n\u0026#34;; size_t datalen = strlen(data); if (*offset \u0026gt;= datalen) return 0; if (len \u0026gt; datalen - *offset) len = datalen - *offset; if (copy_to_user(buf, data + *offset, len)) return -EFAULT; *offset += len; return len; } static ssize_t my_write(struct file *file, const char __user *buf, size_t len, loff_t *offset) { char kbuf[128]; if (len \u0026gt; sizeof(kbuf) - 1) len = sizeof(kbuf) - 1; if (copy_from_user(kbuf, buf, len)) return -EFAULT; kbuf[len] = \u0026#39;\\0\u0026#39;; pr_info(\u0026#34;Data from user: %s\\n\u0026#34;, kbuf); return len; } static int my_open(struct inode *inode, struct file *file) { pr_info(\u0026#34;Device opened\\n\u0026#34;); return 0; } static int my_release(struct inode *inode, struct file *file) { pr_info(\u0026#34;Device closed\\n\u0026#34;); return 0; } static struct file_operations my_fops = { .owner = THIS_MODULE, .read = my_read, .write = my_write, .open = my_open, .release = my_release, }; 2. Explanation of Generic Operations: open: Called when the device is accessed using open(). Used for initialization. release: Called when the device is closed. read: Transfers data from the kernel to user-space. write: Transfers data from user-space to the kernel. Cleaning Up When unloading the driver, release allocated resources:\nstatic void __exit my_exit(void) { device_destroy(my_class, dev); class_destroy(my_class); cdev_del(\u0026amp;my_cdev); unregister_chrdev_region(dev, 1); pr_info(\u0026#34;Character device unregistered\\n\u0026#34;); } module_exit(my_exit); Example User-Space Interaction Write a user-space program to interact with the character device:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { int fd; char buffer[128]; fd = open(\u0026#34;/dev/my_char_device\u0026#34;, O_RDWR); if (fd \u0026lt; 0) { perror(\u0026#34;Failed to open device\u0026#34;); return -1; } // Write to device write(fd, \u0026#34;Hello, kernel!\u0026#34;, 14); // Read from device read(fd, buffer, sizeof(buffer)); printf(\u0026#34;Data from device: %s\\n\u0026#34;, buffer); close(fd); return 0; } Best Practices Error Handling: Validate user input and handle edge cases. Ensure proper cleanup in case of initialization failures. Use Helper Functions: Use alloc_chrdev_region instead of hardcoding major numbers. copy_to_user and copy_from_user are essential for secure data exchange between kernel space and user space. These functions ensure that the kernel does not directly access user-space memory, which could lead to security risks and undefined behavior due to memory access violations. Instead, they provide controlled, validated mechanisms for copying data. Alternatively, functions like memdup_user can be used when copying large blocks of data into kernel space. These methods ensure safe interaction between different memory domains, protecting system stability. Device Permissions: Set appropriate file permissions on the device file to avoid unauthorized access. Documentation: Provide clear documentation for user-space developers on how to interact with the device. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/character-device-management-in-kernel-drivers/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eCharacter devices allow byte-by-byte communication between user-space applications and kernel drivers. They are commonly used for devices like serial ports, sensors, and custom hardware interfaces. The Linux kernel provides mechanisms for registering, managing, and interacting with character devices via a device file in \u003ccode\u003e/dev\u003c/code\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"registering-a-character-device\"\u003eRegistering a Character Device\u003c/h2\u003e\n\u003cp\u003eTo register a character device, the driver needs to:\u003c/p\u003e\n\u003ch4 id=\"1-allocate-a-major-and-minor-number\"\u003e1. Allocate a Major and Minor Number:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eEach character device is identified by a major number (device type) and a minor number (specific device). The major number indicates the driver associated with the device, while the minor number is used to differentiate between multiple devices handled by the same driver. If major and minor numbers are repeated, it can cause conflicts and lead to incorrect device identification. To avoid this, the kernel provides \u003ccode\u003ealloc_chrdev_region\u003c/code\u003e, a function to dynamically allocate major and minor numbers, ensuring uniqueness. These numbers are used in the \u003ccode\u003e/dev\u003c/code\u003e directory to associate device files with their corresponding drivers.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ealloc_chrdev_region\u003c/code\u003e to dynamically allocate a major number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edev_t\u003c/span\u003e dev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// kernel/fs/char_dev.c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eresult \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ealloc_chrdev_region\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003edev, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;my_char_device\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (result \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epr_err\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to allocate major number\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003epr_info\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Device registered with major %d, minor %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eMAJOR\u003c/span\u003e(dev), \u003cspan style=\"color:#a6e22e\"\u003eMINOR\u003c/span\u003e(dev));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"2-initialize-and-register-the-device\"\u003e2. Initialize and Register the Device:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDefine a \u003ccode\u003ecdev\u003c/code\u003e structure and initialize it with file operations.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ecdev_add\u003c/code\u003e to register the device with the kernel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e cdev my_cdev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecdev_init\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_cdev, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_fops);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emy_cdev.owner \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e THIS_MODULE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eresult \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecdev_add\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_cdev, dev, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (result \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epr_err\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to add cdev\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eunregister_chrdev_region\u003c/span\u003e(dev, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"3-create-a-device-file-optional\"\u003e3. Create a Device File (Optional):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreating a device file in \u003ccode\u003e/dev\u003c/code\u003e is optional because character devices can be accessed directly using their major and minor numbers through system calls or user-space libraries, bypassing the need for a device file. However, creating a file in \u003ccode\u003e/dev\u003c/code\u003e makes interaction more user-friendly by providing a standard interface.\u003c/li\u003e\n\u003cli\u003eTo interact with a character device without creating a device file, you can use system calls like \u003ccode\u003emknod\u003c/code\u003e to create a temporary device node or interact with the device directly using its major and minor numbers programmatically.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eclass_create\u003c/code\u003e and \u003ccode\u003edevice_create\u003c/code\u003e to automatically create a device file in \u003ccode\u003e/dev\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e class \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003emy_class;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emy_class \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass_create\u003c/span\u003e(THIS_MODULE, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;my_device_class\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eIS_ERR\u003c/span\u003e(my_class)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003epr_err\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to create class\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ecdev_del\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_cdev);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eunregister_chrdev_region\u003c/span\u003e(dev, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePTR_ERR\u003c/span\u003e(my_class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edevice_create\u003c/span\u003e(my_class, NULL, dev, NULL, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;my_char_device\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"file-operations\"\u003eFile Operations\u003c/h2\u003e\n\u003cp\u003eCharacter devices are controlled through a set of file operations defined in a \u003ccode\u003estruct file_operations\u003c/code\u003e. These operations determine how the device responds to system calls like \u003ccode\u003eopen\u003c/code\u003e, \u003ccode\u003eread\u003c/code\u003e, \u003ccode\u003ewrite\u003c/code\u003e, and \u003ccode\u003eioctl\u003c/code\u003e.\u003c/p\u003e","title":"Character Device Management in Kernel Drivers"},{"content":"ioctl Implementation in Kernel Device Drivers Overview ioctl (Input/Output Control) is a powerful system call in Linux used to perform device-specific operations that are not covered by standard system calls like read, write, or open. It allows user-space applications to interact with kernel-space drivers for device-specific configurations and data exchanges.\nHow ioctl Works 1. User-Space Interaction: A user-space application invokes ioctl using the following prototype: int ioctl(int fd, unsigned long cmd, void *arg); fd: File descriptor for the device. cmd: Command defining the operation. arg: Pointer to the data or argument passed between user-space and kernel-space. 2. Driver-Side Handling: The ioctl system call is routed to the driver by the kernel. The driver implements a specific unlocked_ioctl or compat_ioctl callback in the file_operations structure. 3. Data Flow: Arguments passed via arg can be pointers to user-space data, requiring the driver to use helper functions like copy_from_user and copy_to_user for secure data transfer. Steps to Implement ioctl in a Kernel Driver 1. Define ioctl Commands: Use macros to define command numbers, typically with the _IO, _IOR, _IOW, and _IOWR macros provided in \u0026lt;linux/ioctl.h\u0026gt;. #define MY_IOCTL_BASE \u0026#39;M\u0026#39; #define IOCTL_CMD_GET _IOR(MY_IOCTL_BASE, 1, int) #define IOCTL_CMD_SET _IOW(MY_IOCTL_BASE, 2, int) _IOR: Read data from the kernel. _IOW: Write data to the kernel. _IOWR: Read and write data. _IO: Command without data. 2. Implement ioctl Callback: Define the unlocked_ioctl function in the driver. Handle commands appropriately based on cmd. static long my_ioctl(struct file *file, unsigned int cmd, unsigned long arg) { int value; switch (cmd) { case IOCTL_CMD_GET: value = 1234; // Example value if (copy_to_user((int __user *)arg, \u0026amp;value, sizeof(value))) return -EFAULT; break; case IOCTL_CMD_SET: if (copy_from_user(\u0026amp;value, (int __user *)arg, sizeof(value))) return -EFAULT; pr_info(\u0026#34;Value set by user: %d\\n\u0026#34;, value); break; default: return -ENOTTY; // Command not supported } return 0; } 3. Integrate into file_operations: Register the ioctl handler in the file_operations structure. static const struct file_operations my_fops = { .owner = THIS_MODULE, .open = my_open, .release = my_release, .unlocked_ioctl = my_ioctl, }; 4. Test the ioctl Implementation: Write a user-space application to interact with the driver. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/ioctl.h\u0026gt; #define MY_IOCTL_BASE \u0026#39;M\u0026#39; #define IOCTL_CMD_GET _IOR(MY_IOCTL_BASE, 1, int) #define IOCTL_CMD_SET _IOW(MY_IOCTL_BASE, 2, int) int main() { int fd, value = 42; fd = open(\u0026#34;/dev/my_device\u0026#34;, O_RDWR); if (fd \u0026lt; 0) { perror(\u0026#34;Failed to open device\u0026#34;); return -1; } if (ioctl(fd, IOCTL_CMD_SET, \u0026amp;value) \u0026lt; 0) { perror(\u0026#34;ioctl SET failed\u0026#34;); } if (ioctl(fd, IOCTL_CMD_GET, \u0026amp;value) \u0026lt; 0) { perror(\u0026#34;ioctl GET failed\u0026#34;); } else { printf(\u0026#34;Value from device: %d\\n\u0026#34;, value); } close(fd); return 0; } Best Practices for ioctl Use Explicit Command Definitions: Follow a consistent naming convention for command macros. Secure User-Kernel Data Transfer: Always validate pointers and sizes. Use copy_from_user and copy_to_user for safe data exchange. Error Handling: Return appropriate error codes for unsupported commands or invalid inputs. Limit ioctl Usage: Avoid using ioctl for operations that can be implemented using read or write. Magic Number: Ensure it’s unique (check Documentation/ioctl/ioctl-number.txt in kernel sources). Atomicity: Use locks if hardware operations are not atomic. Cross-Platform: Handle 32/64-bit compatibility with compat_ioctl if needed. Real-World Example: Custom ARM Board For a custom ARM board, you might need an ioctl to configure hardware parameters like GPIO modes or clock frequencies.\nCommand Definitions: #define GPIO_BASE \u0026#39;G\u0026#39; #define IOCTL_GPIO_CONFIG _IOW(GPIO_BASE, 1, struct gpio_config) #define IOCTL_GPIO_READ _IOR(GPIO_BASE, 2, int) Example ioctl Implementation: struct gpio_config { int pin; int mode; // 0: Input, 1: Output }; static long gpio_ioctl(struct file *file, unsigned int cmd, unsigned long arg) { struct gpio_config config; switch (cmd) { case IOCTL_GPIO_CONFIG: if (copy_from_user(\u0026amp;config, (struct gpio_config __user *)arg, sizeof(config))) return -EFAULT; pr_info(\u0026#34;Configuring GPIO pin %d as %s\\n\u0026#34;, config.pin, config.mode ? \u0026#34;Output\u0026#34; : \u0026#34;Input\u0026#34;); // Add hardware configuration logic here break; case IOCTL_GPIO_READ: // Example: Return the state of a pin int state = 1; // Assume pin is high if (copy_to_user((int __user *)arg, \u0026amp;state, sizeof(state))) return -EFAULT; break; default: return -ENOTTY; } return 0; } By implementing ioctl like this, you provide user-space applications with a mechanism to interact with custom device-specific features efficiently.\n","permalink":"https://blog.rishavs.in/posts/3-resource/platform/ioctl-in-kernel-device-drivers/","summary":"\u003ch2 id=\"ioctl-implementation-in-kernel-device-drivers\"\u003eioctl Implementation in Kernel Device Drivers\u003c/h2\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eioctl\u003c/code\u003e (Input/Output Control) is a powerful system call in Linux used to perform device-specific operations that are not covered by standard system calls like \u003ccode\u003eread\u003c/code\u003e, \u003ccode\u003ewrite\u003c/code\u003e, or \u003ccode\u003eopen\u003c/code\u003e. It allows user-space applications to interact with kernel-space drivers for device-specific configurations and data exchanges.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-ioctl-works\"\u003eHow ioctl Works\u003c/h2\u003e\n\u003ch4 id=\"1-user-space-interaction\"\u003e1. User-Space Interaction:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eA user-space application invokes \u003ccode\u003eioctl\u003c/code\u003e using the following prototype:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eioctl\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fd, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e cmd, \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003earg);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efd\u003c/code\u003e: File descriptor for the device.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecmd\u003c/code\u003e: Command defining the operation.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earg\u003c/code\u003e: Pointer to the data or argument passed between user-space and kernel-space.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-driver-side-handling\"\u003e2. Driver-Side Handling:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eioctl\u003c/code\u003e system call is routed to the driver by the kernel.\u003c/li\u003e\n\u003cli\u003eThe driver implements a specific \u003ccode\u003eunlocked_ioctl\u003c/code\u003e or \u003ccode\u003ecompat_ioctl\u003c/code\u003e callback in the \u003ccode\u003efile_operations\u003c/code\u003e structure.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-data-flow\"\u003e3. Data Flow:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eArguments passed via \u003ccode\u003earg\u003c/code\u003e can be pointers to user-space data, requiring the driver to use helper functions like \u003ccode\u003ecopy_from_user\u003c/code\u003e and \u003ccode\u003ecopy_to_user\u003c/code\u003e for secure data transfer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"steps-to-implement-ioctl-in-a-kernel-driver\"\u003eSteps to Implement ioctl in a Kernel Driver\u003c/h2\u003e\n\u003ch4 id=\"1-define-ioctl-commands\"\u003e1. Define ioctl Commands:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUse macros to define command numbers, typically with the \u003ccode\u003e_IO\u003c/code\u003e, \u003ccode\u003e_IOR\u003c/code\u003e, \u003ccode\u003e_IOW\u003c/code\u003e, and \u003ccode\u003e_IOWR\u003c/code\u003e macros provided in \u003ccode\u003e\u0026lt;linux/ioctl.h\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MY_IOCTL_BASE \u0026#39;M\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define IOCTL_CMD_GET _IOR(MY_IOCTL_BASE, 1, int)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define IOCTL_CMD_SET _IOW(MY_IOCTL_BASE, 2, int)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e_IOR\u003c/code\u003e: Read data from the kernel.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e_IOW\u003c/code\u003e: Write data to the kernel.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e_IOWR\u003c/code\u003e: Read and write data.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e_IO\u003c/code\u003e: Command without data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-implement-ioctl-callback\"\u003e2. Implement ioctl Callback:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDefine the \u003ccode\u003eunlocked_ioctl\u003c/code\u003e function in the driver.\u003c/li\u003e\n\u003cli\u003eHandle commands appropriately based on \u003ccode\u003ecmd\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emy_ioctl\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e file \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003efile, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cmd, \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e arg) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e value;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e (cmd) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e IOCTL_CMD_GET:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tvalue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1234\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e// Example value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecopy_to_user\u003c/span\u003e((\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e __user \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)arg, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003evalue, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(value)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eEFAULT;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e IOCTL_CMD_SET:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecopy_from_user\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003evalue, (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e __user \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)arg, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(value)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eEFAULT;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003epr_info\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Value set by user: %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eENOTTY; \u003cspan style=\"color:#75715e\"\u003e// Command not supported\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"3-integrate-into-file_operations\"\u003e3. Integrate into file_operations:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRegister the ioctl handler in the \u003ccode\u003efile_operations\u003c/code\u003e structure.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e file_operations my_fops \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t.owner \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e THIS_MODULE,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t.open \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e my_open,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t.release \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e my_release,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t.unlocked_ioctl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e my_ioctl,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"4-test-the-ioctl-implementation\"\u003e4. Test the ioctl Implementation:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a user-space application to interact with the driver.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;fcntl.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/ioctl.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MY_IOCTL_BASE \u0026#39;M\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define IOCTL_CMD_GET _IOR(MY_IOCTL_BASE, 1, int)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define IOCTL_CMD_SET _IOW(MY_IOCTL_BASE, 2, int)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fd, value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfd \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/dev/my_device\u0026#34;\u003c/span\u003e, O_RDWR);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (fd \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eperror\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to open device\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eioctl\u003c/span\u003e(fd, IOCTL_CMD_SET, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003evalue) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eperror\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ioctl SET failed\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eioctl\u003c/span\u003e(fd, IOCTL_CMD_GET, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003evalue) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eperror\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ioctl GET failed\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Value from device: %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e(fd);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"best-practices-for-ioctl\"\u003eBest Practices for ioctl\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eUse Explicit Command Definitions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eFollow a consistent naming convention for command macros.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecure User-Kernel Data Transfer\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAlways validate pointers and sizes.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ecopy_from_user\u003c/code\u003e and \u003ccode\u003ecopy_to_user\u003c/code\u003e for safe data exchange.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eError Handling\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eReturn appropriate error codes for unsupported commands or invalid inputs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLimit ioctl Usage\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAvoid using \u003ccode\u003eioctl\u003c/code\u003e for operations that can be implemented using \u003ccode\u003eread\u003c/code\u003e or \u003ccode\u003ewrite\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMagic Number\u003c/strong\u003e: Ensure it’s unique (check \u003ccode\u003eDocumentation/ioctl/ioctl-number.txt\u003c/code\u003e in kernel sources).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAtomicity\u003c/strong\u003e: Use locks if hardware operations are not atomic.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCross-Platform\u003c/strong\u003e: Handle 32/64-bit compatibility with \u003ccode\u003ecompat_ioctl\u003c/code\u003e if needed.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"real-world-example-custom-arm-board\"\u003eReal-World Example: Custom ARM Board\u003c/h2\u003e\n\u003cp\u003eFor a custom ARM board, you might need an \u003ccode\u003eioctl\u003c/code\u003e to configure hardware parameters like GPIO modes or clock frequencies.\u003c/p\u003e","title":"IOCTL in Kernel Device Drivers"},{"content":"An SSL certificate is a digital certificate issued by a trusted third-party authority known as a Certificate Authority (CA). It verifies the identity of a website or server and enables secure, encrypted communication.\nComponents of an SSL Certificate Public Key: Used for encryption and verifying the certificate\u0026rsquo;s authenticity. Certificate Holder Information: Details like the domain name, organization, and location. Issuer Information: The CA that issued the certificate. Validity Period: Specifies the time frame during which the certificate is valid. Digital Signature: Ensures the certificate was issued by a trusted CA and has not been tampered with. Self-Signed Certificates Examples and Differences Type Usage Example Difference Self-Signed Internal servers, testing Generated via OpenSSL Not trusted by default in browsers or OS. CA-Signed Public-facing servers Issued by DigiCert, Let\u0026rsquo;s Encrypt Trusted by browsers and OS. Wildcard Certificate Secures a domain and its subdomains *.example.com Can’t be self-signed, requires a CA. Multi-Domain Certificate Covers multiple domains example.com, test.com Self-signed possible but not widely used. Self-Signed Certificates A self-signed certificate is a digital certificate that is not issued by a trusted Certificate Authority (CA) but is signed by the entity it is certifying (e.g., your own server). These certificates are primarily used for internal testing, development environments, or scenarios where external trust is not required.\nCharacteristics of Self-Signed Certificates: No CA Involvement: The entity creates and signs its own certificate. Limited Trust: Browsers or clients may warn users that the certificate is untrusted. Cost-Effective: Free and straightforward to generate using tools like OpenSSL. Usage: Suitable for testing environments, private servers, or intranet applications. Types of Self-Signed Certificates Server Certificates: Used to secure communication for a server (e.g., HTTPS). Client Certificates: Used to authenticate users or devices to a server. Code-Signing Certificates: Used to sign software or scripts to ensure they are untampered. Email Certificates: Used to sign and encrypt emails. For self-signed certificates, the classification depends on the purpose, not on validation levels like CA-issued certificates.\nExamples and Differences Type Usage Example Difference Self-Signed Internal servers, testing Generated via OpenSSL Not trusted by default in browsers or OS. CA-Signed Public-facing servers Issued by DigiCert, Let\u0026rsquo;s Encrypt Trusted by browsers and OS. Wildcard Certificate Secures a domain and its subdomains *.example.com Can’t be self-signed, requires a CA. Multi-Domain Certificate Covers multiple domains example.com, test.com Self-signed possible but not widely used. How a Certificate File Looks Certificates are typically encoded in PEM (Privacy-Enhanced Mail) format and look like this:\n-----BEGIN CERTIFICATE----- MIIC8DCCAdigAwIBAgIUcyDOgjHj0W3... ...QwMDIxMTgxNzAwWjAfMR0wGwYDVQQDDBQt... ...eVc1OSn+nnAcAzU2e5/s= -----END CERTIFICATE----- To create a certificate see Creating Openssl Certificate\nBreakdown of Certificate Content Header and Footer: -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- Indicates the start and end of the Base64-encoded certificate. Version: Specifies the X.509 version (usually v3). Serial Number: Unique number assigned to the certificate by the issuer. Signature Algorithm: Indicates the algorithm used to sign the certificate (e.g., SHA256withRSA). Issuer: Entity that issued the certificate. For self-signed certificates, it’s the same as the subject. Validity Period: Contains Not Before and Not After fields, specifying the certificate’s active duration. Subject: Information about the entity the certificate represents (e.g., domain name, organization). Public Key: Contains the public key used for encryption. Extensions: Additional data, such as: Key Usage: Specifies permitted uses (e.g., SSL/TLS). Subject Alternative Name (SAN): Lists additional domains covered by the certificate. Signature: The digital signature applied by the issuer. ","permalink":"https://blog.rishavs.in/posts/0-inbox/ssl-certificate/","summary":"\u003cp\u003eAn \u003cstrong\u003eSSL certificate\u003c/strong\u003e is a digital certificate issued by a trusted third-party authority known as a \u003cstrong\u003eCertificate Authority (CA)\u003c/strong\u003e. It verifies the identity of a website or server and enables secure, encrypted communication.\u003c/p\u003e\n\u003ch3 id=\"components-of-an-ssl-certificate\"\u003eComponents of an SSL Certificate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ePublic Key:\n\u003cul\u003e\n\u003cli\u003eUsed for encryption and verifying the certificate\u0026rsquo;s authenticity.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCertificate Holder Information:\n\u003cul\u003e\n\u003cli\u003eDetails like the domain name, organization, and location.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIssuer Information:\n\u003cul\u003e\n\u003cli\u003eThe CA that issued the certificate.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eValidity Period:\n\u003cul\u003e\n\u003cli\u003eSpecifies the time frame during which the certificate is valid.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDigital Signature:\n\u003cul\u003e\n\u003cli\u003eEnsures the certificate was issued by a trusted CA and has not been tampered with.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"self-signed-certificates\"\u003eSelf-Signed Certificates\u003c/h2\u003e\n\u003chr\u003e\n\u003ch3 id=\"examples-and-differences\"\u003eExamples and Differences\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eType\u003c/th\u003e\n          \u003cth\u003eUsage\u003c/th\u003e\n          \u003cth\u003eExample\u003c/th\u003e\n          \u003cth\u003eDifference\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eSelf-Signed\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eInternal servers, testing\u003c/td\u003e\n          \u003ctd\u003eGenerated via OpenSSL\u003c/td\u003e\n          \u003ctd\u003eNot trusted by default in browsers or OS.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eCA-Signed\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003ePublic-facing servers\u003c/td\u003e\n          \u003ctd\u003eIssued by DigiCert, Let\u0026rsquo;s Encrypt\u003c/td\u003e\n          \u003ctd\u003eTrusted by browsers and OS.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eWildcard Certificate\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eSecures a domain and its subdomains\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e*.example.com\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eCan’t be self-signed, requires a CA.\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eMulti-Domain Certificate\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eCovers multiple domains\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eexample.com\u003c/code\u003e, \u003ccode\u003etest.com\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelf-signed possible but not widely used.\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch3 id=\"self-signed-certificates-1\"\u003eSelf-Signed Certificates\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003eself-signed certificate\u003c/strong\u003e is a digital certificate that is not issued by a trusted Certificate Authority (CA) but is signed by the entity it is certifying (e.g., your own server). These certificates are primarily used for internal testing, development environments, or scenarios where external trust is not required.\u003c/p\u003e","title":"SSL Certificate"},{"content":"Overall Idea Avoid immediate trading post-result; monitor price behaviour instead. Monitor for retracement and consistent trends See quarterly result and shortlist high growth stocks Fundamental Analysis is must because if the analysis is even wrong but fundamentals are strong then the loss will be minimal. So, less chance of being wrong. Filter by Fundamentals High Growth Criteria: Quarterly sales growth YoY \u0026gt; 10%. Quarterly profit growth YoY \u0026gt; 10%. Sales and profit in the latest quarter should be the highest compared to previous quarters. See percent change in growth of past 3 years\nTo avoid seasonal behaviour, use YoY growth%\nAdditional Filters: Promoter holding \u0026gt; 51% FII (Foreign Institutional Investor) holding \u0026gt; 2%: because they only invest in a company after thorrow research, even visit the company and based on lot of data. Return on Capital Employed (ROCE) \u0026gt; 20% Debt-to-Equity ratio \u0026lt; 0.5 Piotroski Score \u0026gt; 5 to measure company health Market capitalization: Mid-cap and small-cap stocks (₹2,000–₹20,000 crore) Manual: See sales, operating margin and net profit should be (almost) all time high or showing nice momentum. Operating Margin should be seen for last 2-3 quarters. it should not decrease significantly compared to previous quarters, not more than 2-3% fall. Balance Sheet - Borrowing should be less If borrowing is increasing(with or without reason) then its impact will be visible in long term, so avoid in short term. Share Holding Pattern: Should be strong promoter holding. Sometimes promotor has to focrefully sell according to regulations, so see such things. See if promotor and FII/DII are exchanging holdings then its ok even one of em has decreased, because another is increased. Screener Screen Parameters YOY Quarterly sales growth \u0026gt; 10 AND YOY Quarterly profit growth \u0026gt; 10 AND Promoter holding \u0026gt; 51 AND Market Capitalization \u0026gt; 2000 AND Market Capitalization \u0026lt; 20000 AND FII holding \u0026gt; 2 AND Return on capital employed \u0026gt;20 AND Debt to equity \u0026lt; 0.5 AND Piotroski score \u0026gt;5 Technical Parameters: After result is declared then the price should increase. If the stock has already given run-up(30-40%) after result then wait for retracement till the price reaches its next support and now the support should be previous high. Book profit when the target is reached, if it is looking like it will still go up then exit only 50%. Example Example stock: Tips Music (analysis done on 9th dec, 2024) Quarterly sales and profits are at all-time highs. Promoter and FII holdings are stable or increasing. Post-result, the stock rises \u0026gt;20%, retraces ~15%, and RSI stays above 50. Entry is made on retracement; exit at the previous high or based on stop-loss/EMA strategy. Questions TTM - Expected growth. How is the expected geowth calculated? References Youtube Podcast: https://youtu.be/g0eNP0Dk37M Screen: https://www.screener.in/screens/2291979/yt-prakeshbehura/ ","permalink":"https://blog.rishavs.in/posts/2-area/finance/short-term-trading---after-result/","summary":"\u003ch2 id=\"overall-idea\"\u003eOverall Idea\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAvoid immediate trading post-result; monitor price behaviour instead.\u003c/li\u003e\n\u003cli\u003eMonitor for retracement and consistent trends\u003c/li\u003e\n\u003cli\u003eSee quarterly result and shortlist \u003cstrong\u003ehigh growth\u003c/strong\u003e stocks\u003c/li\u003e\n\u003cli\u003eFundamental Analysis is must because if the analysis is even wrong but fundamentals are strong then the loss will be minimal. So, less chance of being wrong.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"filter-by-fundamentals\"\u003eFilter by Fundamentals\u003c/h2\u003e\n\u003ch4 id=\"high-growth-criteria\"\u003eHigh Growth Criteria:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eQuarterly \u003cstrong\u003esales growth YoY\u003c/strong\u003e \u0026gt; 10%.\u003c/li\u003e\n\u003cli\u003eQuarterly \u003cstrong\u003eprofit growth YoY\u003c/strong\u003e \u0026gt; 10%.\u003c/li\u003e\n\u003cli\u003eSales and profit in the latest quarter should be the \u003cstrong\u003ehighest compared to previous quarters\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSee percent change in growth of past 3 years\u003c/p\u003e","title":"Short Term Trading - After result"},{"content":"Alt + H = Horizontal line Alt + V = Vertical line Alt + T = Trendline Alt + F = Fibonacci Alt + C = Crossline Alt + I = Invert chart Alt + S = Link to your chart\nReferences https://www.tradingview.com/charting-library-docs/latest/getting_started/Shortcuts/ ","permalink":"https://blog.rishavs.in/posts/2-area/finance/trading-view-shortcuts/","summary":"\u003cp\u003eAlt + H = Horizontal line\nAlt + V = Vertical line\nAlt + T = Trendline\nAlt + F = Fibonacci\nAlt + C = Crossline\nAlt + I = Invert chart\nAlt + S = Link to your chart\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.tradingview.com/charting-library-docs/latest/getting_started/Shortcuts/\"\u003ehttps://www.tradingview.com/charting-library-docs/latest/getting_started/Shortcuts/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"TradingView Shortcuts"},{"content":"This guide provides step-by-step instructions for setting up consistent formatting, rules checking, and documentation for C/C++ code using clang-format, clang-tidy, and Doxygen in VS Code. Follow this guide to ensure uniformity across the team.\n1. Prerequisites Before starting, ensure you have the following tools installed:\nVS Code (latest version) Extensions for VS Code: C/C++ (Microsoft) Doxygen Documentation Generator Command-line tools: clang-format clang-tidy doxygen Python (for pre-commit hooks) 2. Auto-Formatting Using clang-format clang-format is used for consistent code formatting.\nInstall clang-format Install it via your package manager:\nLinux: sudo apt install clang-format macOS: brew install clang-format Windows: Install via LLVM Windows Installer. Create a .clang-format Configuration File In your project root directory, create a file named .clang-format with the following configuration:\nBasedOnStyle: LLVM IndentWidth: 4 TabWidth: 4 UseTab: Never BreakBeforeBraces: Allman AllowShortFunctionsOnASingleLine: Empty ColumnLimit: 80 Integrate clang-format with VS Code Open VS Code settings (Ctrl+Shift+P → \u0026ldquo;Preferences: Open Settings (JSON)\u0026rdquo;). Add the following configuration: \u0026#34;[c]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;ms-vscode.cpptools\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true }, \u0026#34;[cpp]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;ms-vscode.cpptools\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true } Format Code To format code manually:\nSelect Ctrl+Shift+P → Format Document. 3. Rules Checking Using clang-tidy clang-tidy enforces coding standards and checks for errors.\nInstall clang-tidy Linux: sudo apt install clang-tidy macOS: brew install llvm Windows: Install via LLVM Windows Installer. Create a .clang-tidy Configuration File In your project root directory, create a file named .clang-tidy with the following configuration:\nChecks: \u0026gt; - readability-identifier-naming, - readability-function-size, - modernize-use-nullptr, - misc-misplaced-widening-cast CheckOptions: - { key: readability-identifier-naming.VariableCase, value: lower_case } - { key: readability-identifier-naming.StructCase, value: CamelCase } - { key: readability-identifier-naming.EnumCase, value: UPPER_CASE } - { key: readability-identifier-naming.FunctionCase, value: camelBack } Integrate clang-tidy with VS Code Open VS Code settings (Ctrl+Shift+P → \u0026ldquo;Preferences: Open Settings (JSON)\u0026rdquo;). Add the following configuration: \u0026#34;C_Cpp.codeAnalysis.clangTidy.enabled\u0026#34;: true, \u0026#34;C_Cpp.codeAnalysis.clangTidy.path\u0026#34;: \u0026#34;/path/to/clang-tidy\u0026#34;, // If it is not automatically detected \u0026#34;C_Cpp.codeAnalysis.clangTidy.checks\u0026#34;: \u0026#34;readability-identifier-naming\u0026#34; Run clang-tidy To analyze your code:\nclang-tidy file.c -- -I/path/to/include 4. Documentation Using Doxygen Doxygen generates documentation for your code and enforces comments for functions, structs, and enums.\nInstall Doxygen Linux: sudo apt install doxygen macOS: brew install doxygen Windows: Download from Doxygen. Configure Doxygen Generate a default configuration file:\ndoxygen -g Edit the Doxyfile as needed for your project.\nGenerate Doxygen Comments Install the Doxygen Documentation Generator extension in VS Code. Place the cursor on a function or struct and run: Ctrl+Shift+P → Generate Doxygen Comment. 5. Automate Formatting and Linting with Pre-Commit Hooks Set up pre-commit hooks to enforce formatting and linting before commits.\nInstall Pre-Commit pip install pre-commit Create a .pre-commit-config.yaml File In your project root directory, create the following configuration file:\nrepos: - repo: https://github.com/pre-commit/mirrors-clang-format rev: v15.0.0 # Use the desired clang-format version hooks: - id: clang-format args: [--style=file] - repo: https://github.com/pocc/pre-commit-clang-tidy rev: v1.2 hooks: - id: clang-tidy args: [--config-file=.clang-tidy] Install the Hooks Run the following command to install the pre-commit hooks:\npre-commit install Now, clang-format and clang-tidy will automatically check and format your code before commits.\n6. CI/CD Integration (Optional) Add clang-format and clang-tidy to your CI/CD pipeline for continuous enforcement of standards.\nExample GitHub Actions Workflow\nname: C/C++ Lint and Format on: [push, pull_request] jobs: lint-and-format: runs-on: ubuntu-latest steps: - name: Checkout Code uses: actions/checkout@v3 - name: Run clang-format run: clang-format --dry-run --Werror src/**/*.c - name: Run clang-tidy run: clang-tidy src/**/*.c -- -Iinclude 7. Sharing the Setup with Your Team Commit Configuration Files: Add .clang-format, .clang-tidy, Doxyfile, and .pre-commit-config.yaml to version control. Document Workflow: Share this guide with all team members. Provide Setup Script: Create a setup.sh script for easy setup: #!/bin/bash sudo apt install clang-format clang-tidy doxygen pip install pre-commit pre-commit install ","permalink":"https://blog.rishavs.in/posts/3-resource/development/cc-code-style-guide/","summary":"\u003cp\u003eThis guide provides step-by-step instructions for setting up consistent formatting, rules checking, and documentation for C/C++ code using \u003cstrong\u003eclang-format\u003c/strong\u003e, \u003cstrong\u003eclang-tidy\u003c/strong\u003e, and \u003cstrong\u003eDoxygen\u003c/strong\u003e in \u003cstrong\u003eVS Code\u003c/strong\u003e. Follow this guide to ensure uniformity across the team.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-prerequisites\"\u003e1. Prerequisites\u003c/h2\u003e\n\u003cp\u003eBefore starting, ensure you have the following tools installed:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eVS Code\u003c/strong\u003e (latest version)\u003c/li\u003e\n\u003cli\u003eExtensions for VS Code:\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\"\u003eC/C++ (Microsoft)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=cschlosser.doxdocgen\"\u003eDoxygen Documentation Generator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCommand-line tools:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eclang-format\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eclang-tidy\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edoxygen\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePython (for pre-commit hooks)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-auto-formatting-using-clang-format\"\u003e2. Auto-Formatting Using \u003ccode\u003eclang-format\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://clang.llvm.org/docs/ClangFormat.html\"\u003eclang-format\u003c/a\u003e is used for consistent code formatting.\u003c/p\u003e","title":"C,C++ Code Style Guide"},{"content":" Number Macro Log Level Description Equivalent 0 pr_emerg Emergency System is unusable. KERN_EMERG 1 pr_alert Alert Action must be taken immediately. KERN_ALERT 2 pr_crit Critical Critical conditions. KERN_CRIT 3 pr_err Error Error conditions. KERN_ERR 4 pr_warn Warning Warning conditions. KERN_WARNING 5 pr_notice Notice Normal but significant condition. KERN_NOTICE 6 pr_info Informational Informational messages. KERN_INFO 7 pr_debug Debug Debugging messages. KERN_DEBUG The number corresponds to the log level used by the Linux kernel, with lower numbers indicating higher severity. For example, if the log level is set to 4 (Warning), only messages from pr_emerg to pr_warn will appear in the system logs. Default log level is generally set to 6. ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/kernel-log-level/","summary":"\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eNumber\u003c/th\u003e\n          \u003cth\u003eMacro\u003c/th\u003e\n          \u003cth\u003eLog Level\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n          \u003cth\u003eEquivalent\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_emerg\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eEmergency\u003c/td\u003e\n          \u003ctd\u003eSystem is unusable.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_EMERG\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_alert\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eAlert\u003c/td\u003e\n          \u003ctd\u003eAction must be taken immediately.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_ALERT\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_crit\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eCritical\u003c/td\u003e\n          \u003ctd\u003eCritical conditions.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_CRIT\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_err\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eError\u003c/td\u003e\n          \u003ctd\u003eError conditions.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_ERR\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_warn\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eWarning\u003c/td\u003e\n          \u003ctd\u003eWarning conditions.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_WARNING\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e5\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_notice\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eNotice\u003c/td\u003e\n          \u003ctd\u003eNormal but significant condition.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_NOTICE\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e6\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_info\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eInformational\u003c/td\u003e\n          \u003ctd\u003eInformational messages.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_INFO\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e7\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003epr_debug\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eDebug\u003c/td\u003e\n          \u003ctd\u003eDebugging messages.\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eKERN_DEBUG\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003enumber\u003c/strong\u003e corresponds to the log level used by the Linux kernel, with lower numbers indicating higher severity.\u003c/li\u003e\n\u003cli\u003eFor example, if the log level is set to \u003ccode\u003e4\u003c/code\u003e (Warning), only messages from \u003ccode\u003epr_emerg\u003c/code\u003e to \u003ccode\u003epr_warn\u003c/code\u003e will appear in the system logs. Default log level is generally set to 6.\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Kernel Log Level"},{"content":"Basics of I2C Overview Synchronous, multi-master, multi-slave serial bus. Half-duplex communication (bidirectional SDA line). Uses 2 wires: SCL (clock), SDA (data). Speeds: Standard (100 kHz), Fast (400 kHz), High-Speed (3.4 MHz). Physical Layer Open-drain outputs – requires pull-up resistors. 7-bit or 10-bit addressing (supports up to 128/1024 devices). Data Frame Structure Start condition: SDA ↓ while SCL is high. Address frame: 7/10-bit address + R/W bit. ACK/NACK: Slave pulls SDA low to acknowledge. Data frames (8-bit chunks, MSB-first). Stop condition: SDA ↑ while SCL is high. Start | Address | Read/Write | ACK/NACK | Data | Stop Key Features Clock stretching: Slaves can hold SCL low to pause communication. Multi-master arbitration: Masters detect collisions via SDA monitoring. Speeds: Standard (100 kbps), Fast (400 kbps), High-Speed (3.4 Mbps). Use Cases Sensors (temperature, accelerometers). EEPROMs, RTC (Real-Time Clock) modules. Device Tree TODO Writing client device drivers TODO I2C-Tools Package in Userspace Useful for debugging, testing, some simple prototyping Accesses the I²C bus via /dev/i2c-0, /dev/i2c-1… Assume devices have registers, SMBus-like i2cdetect scan an I2C bus for devices No guarantee it works (I²C is not discoverable by the spec) [rishav] ➜ ~ i2cdetect -l i2c-0\ti2c i915 gmbus dpc I2C adapter i2c-1\ti2c i915 gmbus dpb I2C adapter i2c-2\ti2c i915 gmbus dpd I2C adapter i2c-3\ti2c AUX A/DDI A/PHY A I2C adapter i2c-4\tunknown Synopsys DesignWare I2C adapter N/A i2c-5\tunknown Synopsys DesignWare I2C adapter N/A i2c-6\tunknown SMBus I801 adapter at f040 N/A [rishav] ➜ ~ i2cdetect -y 2 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: -- -- -- -- -- -- -- -- 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 20: -- -- -- -- -- -- -- -- 28 -- -- -- -- -- -- -- 30: -- -- -- UU -- -- -- -- -- -- -- -- -- -- -- -- 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 70: -- -- -- -- -- -- -- -- -- No response 28 Response from address 28 UU Address in use (by driver) i2cget, i2cset i2cget: read a register value i2cset: set a register value Can use various types of SMBus and I2C transactions Limited to 8-bit register address # i2cget -y 2 0x28 0x1b 0x21 # i2cset -y 2 0x28 0x55 # i2cdump dump value of all registers i2ctransfer i2ctransfer: the \u0026ldquo;swiss army knife of Linux I2C\u0026rdquo;, in userspace Example: reimplement the i2cget -y 2 0x28 0x1b command: # i2ctransfer -y 2 w1@0x28 0x1b r1@0x28 0x21 # w1@0x28 Write transaction, 1 byte, client address 0x28 0x1b Data to send in the write transaction r1@0x28 Read transaction, 1 byte, client address 0x28 Troubleshooting Return code from i2c_*() functions — Never ignore errors! Kernel logs i2c-tools Oscilloscope or logic analyzer No ACK from client - systematic Problem: a client never responds to transactions\ni2c-tools symptom: Error: Read failed Kernel internal APls symptom: -ENXIO i2cdetect: a client at any unexpected address?\nCheck address pins on client chip: datasheet, schematics i2cdetect: no client at any unexpected address?\nClient not powered, held in reset, broken, unsoldered pin Oscilloscope: no activity on bus, SCL/SDA always high\nPinmux (I2C adapter not reaching the pads) Device tree: device under wrong bus Oscilloscope: no activity on bus, SCL/SDA always low\nMissing pull-up resistors (external or internal) No ACK from client - sporadic(once in a while) Problem: a client sporadically does not respond to transactions\ni2c-tools symptom: Error: Read failed Kernel internal APls symptom: -ENX10 Oscilloscope: SCL/SDA lines return to high level too slowly\nWeak pull-up Workaround: reduce clock-frequency in device tree Oscilloscope: noise on SCL/SDA lines\nHardware must be fixed Oscilloscope: SCL/SDA delays incorrect\nPropagation delay in lines at high speed? Review PCB. Tune i2c-scl-internal-delay-ns... Workaround: reduce clock-frequency in device tree No ACK from client after reset Problem: a client sporadically does not respond after unclean reset\nSymptom: driver fails to respond, fails to probe No clean shutdown \u0026ndash;\u0026gt; driver could not set client to idle state\nE.g. client left in the middle of a transaction, kernel starts a new one Reset all clients during boot\nIn hardware, if possible In the bootloader otherwise TODO reg map (caching?) instead of i2c calls References I2C on Linux: https://youtu.be/g9-wgdesvwA i2c-tools: https://i2c.wiki.kernel.org/index.php/I2C_Tools ","permalink":"https://blog.rishavs.in/posts/3-resource/platform/i-2-c/","summary":"\u003ch2 id=\"basics-of-i2c\"\u003eBasics of I2C\u003c/h2\u003e\n\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSynchronous\u003c/strong\u003e, \u003cstrong\u003emulti-master\u003c/strong\u003e, \u003cstrong\u003emulti-slave\u003c/strong\u003e serial bus.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHalf-duplex\u003c/strong\u003e communication (bidirectional SDA line).\u003c/li\u003e\n\u003cli\u003eUses \u003cstrong\u003e2 wires\u003c/strong\u003e: SCL (clock), SDA (data).\u003c/li\u003e\n\u003cli\u003eSpeeds: Standard (100 kHz), Fast (400 kHz), High-Speed (3.4 MHz).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"physical-layer\"\u003ePhysical Layer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOpen-drain\u003c/strong\u003e outputs – requires pull-up resistors.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e7-bit or 10-bit addressing\u003c/strong\u003e (supports up to 128/1024 devices).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"data-frame-structure\"\u003eData Frame Structure\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eStart condition\u003c/strong\u003e: SDA ↓ while SCL is high.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAddress frame\u003c/strong\u003e: 7/10-bit address + R/W bit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eACK/NACK\u003c/strong\u003e: Slave pulls SDA low to acknowledge.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData frames\u003c/strong\u003e (8-bit chunks, MSB-first).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStop condition\u003c/strong\u003e: SDA ↑ while SCL is high.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eStart | Address | Read/Write | ACK/NACK | Data | Stop\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"key-features\"\u003eKey Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eClock stretching\u003c/strong\u003e: Slaves can hold SCL low to pause communication.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMulti-master arbitration\u003c/strong\u003e: Masters detect collisions via SDA monitoring.\u003c/li\u003e\n\u003cli\u003eSpeeds: Standard (100 kbps), Fast (400 kbps), High-Speed (3.4 Mbps).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"use-cases\"\u003eUse Cases\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSensors (temperature, accelerometers).\u003c/li\u003e\n\u003cli\u003eEEPROMs, RTC (Real-Time Clock) modules.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"device-tree\"\u003eDevice Tree\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTODO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"writing-client-device-drivers\"\u003eWriting client device drivers\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTODO\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"i2c-tools-package-in-userspace\"\u003eI2C-Tools Package in Userspace\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUseful for debugging, testing, some simple prototyping\u003c/li\u003e\n\u003cli\u003eAccesses the I²C bus via \u003ccode\u003e/dev/i2c-0\u003c/code\u003e, \u003ccode\u003e/dev/i2c-1\u003c/code\u003e…\u003c/li\u003e\n\u003cli\u003eAssume devices have registers, SMBus-like\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"i2cdetect\"\u003ei2cdetect\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003escan an I2C bus for devices\u003c/li\u003e\n\u003cli\u003eNo guarantee it works (I²C is not discoverable by the spec)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[rishav] ➜ ~ i2cdetect -l\ni2c-0\ti2c       \ti915 gmbus dpc                  \tI2C adapter\ni2c-1\ti2c       \ti915 gmbus dpb                  \tI2C adapter\ni2c-2\ti2c       \ti915 gmbus dpd                  \tI2C adapter\ni2c-3\ti2c       \tAUX A/DDI A/PHY A               \tI2C adapter\ni2c-4\tunknown   \tSynopsys DesignWare I2C adapter \tN/A\ni2c-5\tunknown   \tSynopsys DesignWare I2C adapter \tN/A\ni2c-6\tunknown   \tSMBus I801 adapter at f040      \tN/A\n[rishav] ➜ ~ i2cdetect -y 2\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- 28 -- -- -- -- -- -- -- \n30: -- -- -- UU -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- --\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--\u003c/code\u003e No response\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e28\u003c/code\u003e Response from address 28\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUU\u003c/code\u003e Address in use (by driver)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"i2cget-i2cset\"\u003ei2cget, i2cset\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ei2cget\u003c/code\u003e: read a register value\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ei2cset\u003c/code\u003e: set a register value\u003c/li\u003e\n\u003cli\u003eCan use various types of SMBus and I2C transactions\u003c/li\u003e\n\u003cli\u003eLimited to 8-bit register address\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# i2cget -y 2 0x28 0x1b\n0x21\n# i2cset -y 2 0x28 0x55\n#\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"i2cdump\"\u003ei2cdump\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003edump value of all registers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"i2ctransfer\"\u003ei2ctransfer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ei2ctransfer\u003c/code\u003e: the \u0026ldquo;swiss army knife of Linux I2C\u0026rdquo;, in userspace\u003c/li\u003e\n\u003cli\u003eExample: reimplement the i2cget -y 2 0x28 0x1b command:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# i2ctransfer -y 2 w1@0x28 0x1b r1@0x28\n0x21\n#\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ew1@0x28\u003c/code\u003e Write transaction, 1 byte, client address 0x28\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0x1b\u003c/code\u003e Data to send in the write transaction\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003er1@0x28\u003c/code\u003e Read transaction, 1 byte, client address 0x28\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"troubleshooting\"\u003eTroubleshooting\u003c/h2\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003eReturn code from \u003ccode\u003ei2c_*()\u003c/code\u003e functions — Never ignore errors!\u003c/li\u003e\n\u003cli\u003eKernel logs\u003c/li\u003e\n\u003cli\u003ei2c-tools\u003c/li\u003e\n\u003cli\u003eOscilloscope or logic analyzer\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"no-ack-from-client---systematic\"\u003eNo ACK from client - systematic\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eProblem\u003c/strong\u003e: a client \u003cstrong\u003enever\u003c/strong\u003e responds to transactions\u003c/p\u003e","title":"I2C"},{"content":"Device Tree !assets/Pasted image 20241108115912.png\nStandard Properties compatible The compatible property value consists of one or more strings that define the specific programming model for the device. This list of strings should be used by a client program for device driver selection. The property value consists of a concatenated list of null terminated strings, from most specific to most general. They allow a device to express its compatibility with a family of similar devices, potentially allowing a single device driver to match against several devices.\nThe recommended format is \u0026quot;manufacturer,model\u0026quot;, where manufacturer is a string describing the name of the manufacturer (such as a stock ticker symbol), and model specifies the model number.\nstatus \u0026ldquo;okay\u0026rdquo;: Indicates the device is operational \u0026ldquo;disabled\u0026rdquo;: Indicates that the device is not presently operational, but it might become operational in the future (for example, something is not plugged in, or switched off) \u0026ldquo;reserved\u0026rdquo;, \u0026ldquo;fail\u0026rdquo;, \u0026ldquo;fail-sss\u0026rdquo; are also used when needed address-cells and size-cells The address-cells and size-cells properties may be used in any device node that has children in the devicetree hierarchy and describes how child device nodes should be addressed.\nDTB Structure !assets/Devicetree .dtb Structure.webp\nReferences https://devicetree-specification.readthedocs.io/en/stable/index.html https://devicetree-specification.readthedocs.io/en/stable/devicetree-basics.html https://youtu.be/N6IW7JJQASc ","permalink":"https://blog.rishavs.in/posts/3-resource/flattened-devicetree-dtb-format/","summary":"\u003ch2 id=\"device-tree\"\u003eDevice Tree\u003c/h2\u003e\n\u003cp\u003e!assets/Pasted image 20241108115912.png\u003c/p\u003e\n\u003ch3 id=\"standard-properties\"\u003eStandard Properties\u003c/h3\u003e\n\u003ch4 id=\"compatible\"\u003ecompatible\u003c/h4\u003e\n\u003cp\u003eThe \u003cem\u003ecompatible\u003c/em\u003e property value consists of one or more strings that define the specific programming model for the device. This list of strings should be used by a client program for device driver selection. The property value consists of a concatenated list of null terminated strings, from most specific to most general. They allow a device to express its compatibility with a family of similar devices, potentially allowing a single device driver to match against several devices.\u003c/p\u003e","title":"Flattened Devicetree (DTB) Format"},{"content":"Compression Format Comparison Format Compression Ratio Speed (Compression/Decompression) Encryption Speciality/Uniqueness Open Source/ License gz (.gz) Moderate Fast / Fast No native (use gpg) Widely supported and fast for most general uses. YesGNU GPL bzip2 (.bz2) Better than gzip Slow / Moderate No native (use gpg) Higher compression ratio and robust error detection. YesBSD xz (.xz) Best Very slow / Fast No native (use gpg) Highest compression ratio; slow compression speed. YesGNU GPL zip (.zip) Moderate Fast / Fast Built-in encryption Commonly used with built-in encryption and wide software support. YesVarious (Info-ZIP) tar (.tar) Depends on method Fast (archive only) / Fast (archive only) No native (use gpg) Primarily used for archiving; compression depends on additional tools. YesGNU GPL 7z (.7z) Excellent Moderate / Slow at high settings AES-256 encryption Excellent compression with advanced encryption options. YesLGPL rar (.rar) Good Moderate / Moderate AES-256 encryption Includes error recovery and strong encryption; proprietary format. NoProprietary lzma (.lzma) Very high Very slow / Moderate No native (use gpg) High compression ratio with reliable decompression; requires separate decompressor. YesGNU GPL Key Points gz (.gz): Well-rounded for speed and compatibility, commonly used for general purposes. bzip2 (.bz2): Provides a higher compression ratio compared to gzip, though slower. xz (.xz): Offers the best compression ratio but at the cost of slower compression speed. zip (.zip): Convenient with built-in encryption and broad compatibility. tar (.tar): Primarily an archiving format; often used in combination with other compression methods. 7z (.7z): Excellent compression and strong encryption; requires specific software for full support. rar (.rar): Known for robust recovery features and encryption, but is proprietary. lzma (.lzma): Delivers a high compression ratio and reliable decompression, though it’s slow. ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/format-comparison/","summary":"\u003ch2 id=\"compression-format-comparison\"\u003eCompression Format Comparison\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eFormat\u003c/th\u003e\n          \u003cth\u003eCompression Ratio\u003c/th\u003e\n          \u003cth\u003eSpeed (Compression/\u003c!-- raw HTML omitted --\u003eDecompression)\u003c/th\u003e\n          \u003cth\u003eEncryption\u003c/th\u003e\n          \u003cth\u003eSpeciality/Uniqueness\u003c/th\u003e\n          \u003cth\u003eOpen Source/ License\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003egz (\u003ccode\u003e.gz\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eModerate\u003c/td\u003e\n          \u003ctd\u003eFast / Fast\u003c/td\u003e\n          \u003ctd\u003eNo native (use \u003ccode\u003egpg\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eWidely supported and fast for most general uses.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eGNU GPL\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebzip2 (\u003ccode\u003e.bz2\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eBetter than gzip\u003c/td\u003e\n          \u003ctd\u003eSlow / Moderate\u003c/td\u003e\n          \u003ctd\u003eNo native (use \u003ccode\u003egpg\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eHigher compression ratio and robust error detection.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eBSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003exz (\u003ccode\u003e.xz\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eBest\u003c/td\u003e\n          \u003ctd\u003eVery slow / Fast\u003c/td\u003e\n          \u003ctd\u003eNo native (use \u003ccode\u003egpg\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eHighest compression ratio; slow compression speed.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eGNU GPL\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ezip (\u003ccode\u003e.zip\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eModerate\u003c/td\u003e\n          \u003ctd\u003eFast / Fast\u003c/td\u003e\n          \u003ctd\u003eBuilt-in encryption\u003c/td\u003e\n          \u003ctd\u003eCommonly used with built-in encryption and wide software support.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eVarious (Info-ZIP)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003etar (\u003ccode\u003e.tar\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eDepends on method\u003c/td\u003e\n          \u003ctd\u003eFast (archive only) / Fast (archive only)\u003c/td\u003e\n          \u003ctd\u003eNo native (use \u003ccode\u003egpg\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003ePrimarily used for archiving; compression depends on additional tools.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eGNU GPL\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e7z (\u003ccode\u003e.7z\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eExcellent\u003c/td\u003e\n          \u003ctd\u003eModerate / Slow at high settings\u003c/td\u003e\n          \u003ctd\u003eAES-256 encryption\u003c/td\u003e\n          \u003ctd\u003eExcellent compression with advanced encryption options.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eLGPL\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003erar (\u003ccode\u003e.rar\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eGood\u003c/td\u003e\n          \u003ctd\u003eModerate / Moderate\u003c/td\u003e\n          \u003ctd\u003eAES-256 encryption\u003c/td\u003e\n          \u003ctd\u003eIncludes error recovery and strong encryption; proprietary format.\u003c/td\u003e\n          \u003ctd\u003eNo\u003c!-- raw HTML omitted --\u003eProprietary\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003elzma (\u003ccode\u003e.lzma\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eVery high\u003c/td\u003e\n          \u003ctd\u003eVery slow / Moderate\u003c/td\u003e\n          \u003ctd\u003eNo native (use \u003ccode\u003egpg\u003c/code\u003e)\u003c/td\u003e\n          \u003ctd\u003eHigh compression ratio with reliable decompression; requires separate decompressor.\u003c/td\u003e\n          \u003ctd\u003eYes\u003c!-- raw HTML omitted --\u003eGNU GPL\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"key-points\"\u003eKey Points\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egz (.gz)\u003c/code\u003e: Well-rounded for speed and compatibility, commonly used for general purposes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebzip2 (.bz2)\u003c/code\u003e: Provides a higher compression ratio compared to gzip, though slower.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003exz (.xz)\u003c/code\u003e: Offers the best compression ratio but at the cost of slower compression speed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ezip (.zip)\u003c/code\u003e: Convenient with built-in encryption and broad compatibility.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etar (.tar)\u003c/code\u003e: Primarily an archiving format; often used in combination with other compression methods.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e7z (.7z)\u003c/code\u003e: Excellent compression and strong encryption; requires specific software for full support.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erar (.rar)\u003c/code\u003e: Known for robust recovery features and encryption, but is proprietary.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elzma (.lzma)\u003c/code\u003e: Delivers a high compression ratio and reliable decompression, though it’s slow.\u003c/li\u003e\n\u003c/ul\u003e","title":"Format Comparison"},{"content":"Official Description The cu command is used to call up another system and act as a dial-in terminal (mostly on a serial line ie. serial monitor). It can also do simple file transfers with no error checking.\ncu is part of the UUCP(Unix to Unix Copy Program) source but has been split into its own package because it can be useful even if you do not do uucp.\nUsage Start\ncu --line /dev/ttyUSB0 --speed 115200 Exit: Use tilde(~) and dot\u0026rsquo;.\u0026rsquo; to exit\n# # ~. Disconnected. ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/cu-call-up-another-system/","summary":"\u003ch2 id=\"official-description\"\u003eOfficial Description\u003c/h2\u003e\n\u003cp\u003eThe  cu  command is used to call up another system and act as a dial-in terminal (mostly on a serial line ie. serial monitor). It can also do simple file transfers with no error checking.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ecu is part of the UUCP(Unix to Unix Copy Program) source but has been split into its own package because it can be useful even if you do not do uucp.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eStart\u003c/p\u003e","title":"CU (call up another system)"},{"content":"Holonomic Drive Robot: A Versatile Path-Planning Machine !assets/Pasted image 20241201191055.png\nOverview The Holonomic Drive Robot is an innovative, three-wheeled robot designed for precision path planning and image-based drawing. It combines advanced robotics algorithms, custom hardware, and creative problem-solving to deliver exceptional performance in a variety of tasks, from geometric pattern generation to drawing intricate images like logos.\nKey Highlights 1. Motion Planning and Control Implemented a novel path-planning approach to optimize motor velocity and trajectory precision. Designed custom algorithms to address trajectory distortion caused by motor speed limitations. 2. Hardware and Software Integration Successfully integrated ESP32, eYFI Mega, stepper motors, and LiPo batteries into a cohesive system. Overcame challenges such as faulty motor drivers and optimized power delivery for reliability. 3. Image Processing and Simulation Extracted contours from images and translated them into robot motion commands. Utilized ROS and Gazebo for testing and refining the system in a simulated environment. 4. Real-Time Problem Solving Debugged critical hardware issues, such as malfunctioning motor drivers and damaged LiPo cells. Enhanced communication latency between the laptop and ESP32 from 1 second to 200ms by identifying and resolving protocol bottlenecks. 5. Creative Outputs Enabled the robot to draw patterns such as Lissajous figures (infinity loops) and complex logos. Developed a custom ink mixture to ensure visibility and erasability for pattern drawing. Technologies Used Hardware: ESP32, eYFI Mega, LiPo batteries, and stepper motors. Software: ROS for robot control, Gazebo for simulation, and Python, C for software logic. Tools \u0026amp; Libraries: OpenCV for image processing, AccelStepper for motor control, and custom ROS packages for integration. Development Timeline January - February 2023: Prototyping and Hardware Development Designed and built the physical robot body, integrating motor drivers, sensors, and controllers. Calibrated the camera with over 100 samples for precise localization. Debugged and optimized motor driver configurations, achieving simultaneous operation of all wheels. Developed non-blocking motor control using the AccelStepper library. March 2023: Software Refinement and Final Tests Created a contour extraction function for converting images into path points for drawing. Integrated a servo-based pen mechanism for on/off control during drawing operations. Conducted intensive testing, fixing indexing bugs, and optimizing scripts for various patterns, including the Snapchat logo and infinity shapes. Demonstrated successful path-following in a simulation environment using Gazebo. !assets/hola-collage 1.jpg Challenges Overcome Latency in Data Transmission: Resolved slow communication by identifying a missing newline character in transmitted data, reducing latency from 1 second to 200ms. Battery and Power Issues: Diagnosed and replaced faulty LiPo battery cells, ensuring uninterrupted operation. Hardware Failures: Addressed motor driver failures and loose connections with creative soldering solutions and robust wiring techniques. Achievements Successfully implemented conditional path-following to optimize motor velocity during complex path execution. Demonstrated precise image drawing with minimal distortion using camera-calibrated localization. Created a detailed documentation repository and shared project outcomes through YouTube videos, showcasing the robot’s capabilities. Media Video Demonstrations: Watch Demo Video Conclusion The Holonomic Drive Robot is a testament to innovative thinking, technical expertise, and perseverance. It serves as a versatile platform for robotics experimentation, offering potential applications in art, industrial automation, and beyond.\nSummary - Holonomic Drive Robot Jan 2023 - Mar 2023 Link: https://github.com/rishav-singh-0/Holonomic_Art_Bot Technology: ESP32, Atmega2560, Socket Programming, I2C, ROS Engineered a 3-wheeled omnidirectional robot that converts visual inputs into optimized, time-efficient drawable paths using image processing and path finding algorithms Enabled precise control and real-time communication for seamless navigation and execution ","permalink":"https://blog.rishavs.in/posts/2-area/resume/hola-bot/","summary":"\u003ch2 id=\"holonomic-drive-robot-a-versatile-path-planning-machine\"\u003eHolonomic Drive Robot: A Versatile Path-Planning Machine\u003c/h2\u003e\n\u003cp\u003e!assets/Pasted image 20241201191055.png\u003c/p\u003e\n\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eThe \u003cem\u003eHolonomic Drive Robot\u003c/em\u003e is an innovative, three-wheeled robot designed for precision path planning and image-based drawing. It combines advanced robotics algorithms, custom hardware, and creative problem-solving to deliver exceptional performance in a variety of tasks, from geometric pattern generation to drawing intricate images like logos.\u003c/p\u003e\n\u003ch3 id=\"key-highlights\"\u003eKey Highlights\u003c/h3\u003e\n\u003ch4 id=\"1-motion-planning-and-control\"\u003e1. Motion Planning and Control\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eImplemented a novel path-planning approach to optimize motor velocity and trajectory precision.\u003c/li\u003e\n\u003cli\u003eDesigned custom algorithms to address trajectory distortion caused by motor speed limitations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-hardware-and-software-integration\"\u003e2. Hardware and Software Integration\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSuccessfully integrated \u003cstrong\u003eESP32\u003c/strong\u003e, \u003cstrong\u003eeYFI Mega\u003c/strong\u003e, stepper motors, and LiPo batteries into a cohesive system.\u003c/li\u003e\n\u003cli\u003eOvercame challenges such as faulty motor drivers and optimized power delivery for reliability.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-image-processing-and-simulation\"\u003e3. Image Processing and Simulation\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracted contours from images and translated them into robot motion commands.\u003c/li\u003e\n\u003cli\u003eUtilized \u003cstrong\u003eROS\u003c/strong\u003e and \u003cstrong\u003eGazebo\u003c/strong\u003e for testing and refining the system in a simulated environment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-real-time-problem-solving\"\u003e4. Real-Time Problem Solving\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDebugged critical hardware issues, such as malfunctioning motor drivers and damaged LiPo cells.\u003c/li\u003e\n\u003cli\u003eEnhanced communication latency between the laptop and ESP32 from 1 second to 200ms by identifying and resolving protocol bottlenecks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"5-creative-outputs\"\u003e5. Creative Outputs\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eEnabled the robot to draw patterns such as Lissajous figures (infinity loops) and complex logos.\u003c/li\u003e\n\u003cli\u003eDeveloped a custom ink mixture to ensure visibility and erasability for pattern drawing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"technologies-used\"\u003eTechnologies Used\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHardware\u003c/strong\u003e: ESP32, eYFI Mega, LiPo batteries, and stepper motors.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSoftware\u003c/strong\u003e: ROS for robot control, Gazebo for simulation, and Python, C for software logic.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools \u0026amp; Libraries\u003c/strong\u003e: OpenCV for image processing, AccelStepper for motor control, and custom ROS packages for integration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"development-timeline\"\u003eDevelopment Timeline\u003c/h3\u003e\n\u003ch4 id=\"january---february-2023-prototyping-and-hardware-development\"\u003eJanuary - February 2023: Prototyping and Hardware Development\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDesigned and built the physical robot body, integrating motor drivers, sensors, and controllers.\u003c/li\u003e\n\u003cli\u003eCalibrated the camera with over 100 samples for precise localization.\u003c/li\u003e\n\u003cli\u003eDebugged and optimized motor driver configurations, achieving simultaneous operation of all wheels.\u003c/li\u003e\n\u003cli\u003eDeveloped non-blocking motor control using the AccelStepper library.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"march-2023-software-refinement-and-final-tests\"\u003eMarch 2023: Software Refinement and Final Tests\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreated a contour extraction function for converting images into path points for drawing.\u003c/li\u003e\n\u003cli\u003eIntegrated a servo-based pen mechanism for on/off control during drawing operations.\u003c/li\u003e\n\u003cli\u003eConducted intensive testing, fixing indexing bugs, and optimizing scripts for various patterns, including the Snapchat logo and infinity shapes.\u003c/li\u003e\n\u003cli\u003eDemonstrated successful path-following in a simulation environment using Gazebo.\n!assets/hola-collage 1.jpg\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"challenges-overcome\"\u003eChallenges Overcome\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLatency in Data Transmission\u003c/strong\u003e: Resolved slow communication by identifying a missing newline character in transmitted data, reducing latency from 1 second to 200ms.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBattery and Power Issues\u003c/strong\u003e: Diagnosed and replaced faulty LiPo battery cells, ensuring uninterrupted operation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHardware Failures\u003c/strong\u003e: Addressed motor driver failures and loose connections with creative soldering solutions and robust wiring techniques.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"achievements\"\u003eAchievements\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSuccessfully implemented conditional path-following to optimize motor velocity during complex path execution.\u003c/li\u003e\n\u003cli\u003eDemonstrated precise image drawing with minimal distortion using camera-calibrated localization.\u003c/li\u003e\n\u003cli\u003eCreated a detailed documentation repository and shared project outcomes through YouTube videos, showcasing the robot’s capabilities.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"media\"\u003eMedia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVideo Demonstrations\u003c/strong\u003e: \u003ca href=\"https://youtu.be/6YWC5tnd194\"\u003eWatch Demo Video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\u003cp\u003eThe \u003cem\u003eHolonomic Drive Robot\u003c/em\u003e is a testament to innovative thinking, technical expertise, and perseverance. It serves as a versatile platform for robotics experimentation, offering potential applications in art, industrial automation, and beyond.\u003c/p\u003e","title":"Hola Bot"},{"content":"Sections Executable programs or shell commands System calls (functions provided by the kernel) Library calls (functions within program libraries) Special files (usually found in /dev) File formats and conventions, e.g. /etc/passwd Games Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7), man-pages(7) System administration commands (usually only for root) Kernel routines (Non standard) To see if any COMMAND has available sections use whatis of man -f\nman -f COMMAND ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/man-pages/","summary":"\u003ch2 id=\"sections\"\u003eSections\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExecutable programs or shell commands\u003c/li\u003e\n\u003cli\u003eSystem calls (functions provided by the kernel)\u003c/li\u003e\n\u003cli\u003eLibrary calls (functions within program libraries)\u003c/li\u003e\n\u003cli\u003eSpecial files (usually found in \u003ccode\u003e/dev\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eFile formats and conventions, e.g. \u003ccode\u003e/etc/passwd\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eGames\u003c/li\u003e\n\u003cli\u003eMiscellaneous (including macro packages and conventions), e.g. \u003ccode\u003eman(7)\u003c/code\u003e, \u003ccode\u003egroff(7)\u003c/code\u003e, \u003ccode\u003eman-pages(7)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSystem administration commands (usually only for root)\u003c/li\u003e\n\u003cli\u003eKernel routines (Non standard)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo see if any \u003ccode\u003eCOMMAND\u003c/code\u003e has available sections use \u003ccode\u003ewhatis\u003c/code\u003e of \u003ccode\u003eman -f\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eman -f COMMAND\n\u003c/code\u003e\u003c/pre\u003e","title":"Man Pages"},{"content":"What is Operating System ? An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.\nWhat is Kernel? The kernel is a part of operating system which has complete control over everything in the system. It is the portion of the operating system code that is always resident in memory,[2] and facilitates interactions between hardware and software components.\nWhat is Linux? Linux is a clone of the operating system Unix, written from scratch by Linus Torvalds with assistance from a loosely-knit team of hackers across the Net. It aims towards POSIX and Single UNIX Specification compliance.\nWhat is GNU? GNU is a Unix-like operating system. That means it is a collection of many programs: applications, libraries, developer tools, even games. The development of GNU, started in January 1984, is known as the GNU Project. The name \u0026ldquo;GNU\u0026rdquo; is a recursive acronym for \u0026ldquo;GNU\u0026rsquo;s Not Unix.\u0026rdquo;\nWhat is Shell and Bash? Shell is a program, which facilitates the interaction between the user and kernel. There are many shells available, like sh, bash, zsh, fish\u0026hellip;etc\nBash Bash(Bourne-Again SHell) is an sh-compatible command language interpreter that executes commands read from the standard input or from a file.\nWhat are Process and Daemon? Process A process refers to a program in execution; it’s a running instance of a program. It is made up of the program instruction, data read from files, other programs or input from a system user.\nDaemon A Daemon is a service process that runs in the background and supervises the system or provides functionality to other processes. The Daemon is for process wishing to detach themselves from the controlling terminal and run in the background. Most of the time, they are initialized at system startup and then wait in the background until their service is required.\nsyslogd demon tracks the system information and saves it to log files What is Boot Loader or LILO? LILO (Linux Loader) is a boot loader which loads any OS into main memory so that it can begin its operations. Now, many distributions use GRUB2 as the default boot loader.\nWhat are the advantage of Linux being open-source? Being open-source means its source code is available for everyone. Anyone can contribute, modify, enhance and distribute the code to anyone and for any purpose(under its open-source licence). Security is the other main advantage. By making the source available to anyone, security experts can help identify any main security flaws in the operating system. The advantage over operating systems such as Windows is that security flaws are caught before they become an issue for the public. Community support What are basic components of GNU/Linux OS? Kernel Shlls \u0026amp; GUI(System libraries) System Utilities How to check Memory stats and CPU stats? free command cat /prog/meminfo vmstat command sar command How to reduce or shrink the size of LVM partition? Use lvm\nFile Systems ext4, ntfs, btrfs \u0026hellip; Functionality of root user sudo \u0026amp; su What is CLI and GUI? What is Swap partition and size? Swap space/partition is used when System running out of RAM(Random Access Memory) Memory. If the System RAM memory is full and then inactive pages in memory moved into swap space to run the program parallel without interrupting.\nif RAM \u0026lt; 2GB: double of RAM size if RAM \u0026lt; 4GB: anywhere around 4 to 6GB if RAM \u0026gt; 4GB: 20% of RAM How to access partitions under Linux? lsblk command /dev/device Device naming conventions Like sda, vda, tty, video, fd, ttyS, lp\nPermissions Read\nWrite\nExecute\nchmod command\nchown\nGroups wheel Links Symbolic/Soft Links Source and Destination files will have diffrent inode numbers, permissions, and size Both files and directories Accross filesystems/partition because inodes are different Hard Links opposite of above points What is Virtual desktop? A virtual desktop is a software emulation of a hardware device that runs on a physical or virtual machine at a remote location, hosted either on premises or in the cloud. Enable end users to access their unique desktop environments remotely over a network.\nWhat does nameless(empty) directory represent? They serve as an attachment for all other directories, files, drives or devices. Eg. /mnt, /media.\nEnvironment Variables An environment variable is a named object that contains data used by one or more applications. In simple terms, it is a variable with a name and a value. The value of an environmental variable can for example be the location of all executable files in the file system, the default editor that should be used, or the system locale settings.\nenv command Redirection Pass output of one operation as input to another operation in same command using \u0026gt;(greater-than) symbol.\nSearching grep command find command Terminating processes kill command Browsing within filesystem cd command ls command du -sh /dir to see directory size Process status ps command ps aux S Z nohup Command Run a command immune to hangups, with output to a non-tty. The process receiving the NOHUP signal will be terminated when you log out of the program, which was used to invoke it.\nPartial Backups Inode Contents of file will be stored in data blocks. Information/Metadata about that file will be stored in inode. eg file-size, permissions, owner, group, access time. Inode number points to inode table nice Command Shadow passwords How will you chagne default user id value in linux? edit /etc/login.defs file and change UID_MIN value (default 1000) # rm -rf /tmp/test gives error operation not permitted. Reason? if chattr is implimented on a file it cant be removed by root user chattr +i /tmp/test now file cant be deleted chattr -i /tmp/test now file can be deleted What is sticky bit? prevents unwanted deletion of files can be implemented on directories only How will you check open ports on Linux Server? netstat -tunlp How will you check open ports on remote servers (without login) nmap -A 8.8.8.8 Your site is throwing 500 error, how will you start troubleshooting? How will you start troubleshooting if your site is down? eg. error 500 means database is not responding How will you create space on disk if it is showing 100% used? df -Th for checking disc space du file for checking size for file Facts Filename can be of maximum 255 characters Maximum path of 4096 characters Hidden files prifix with .(dot) Tab key Comments with # symbols Command chaining with ; symbol References https://www.tecmint.com/linux-process-management/ ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/introduction-to-linux/","summary":"\u003ch2 id=\"what-is-operating-system-\"\u003eWhat is Operating System ?\u003c/h2\u003e\n\u003cp\u003eAn operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.\u003c/p\u003e\n\u003ch2 id=\"what-is-kernel\"\u003eWhat is Kernel?\u003c/h2\u003e\n\u003cp\u003eThe kernel is a part of operating system which has complete control over everything in the system. It is the portion of the operating system code that is always resident in memory,[2] and facilitates interactions between hardware and software components.\u003c/p\u003e\n\u003ch2 id=\"what-is-linux\"\u003eWhat is \u003ca href=\"https://www.kernel.org/linux.html\"\u003eLinux\u003c/a\u003e?\u003c/h2\u003e\n\u003cp\u003eLinux is a clone of the operating system Unix, written from scratch by Linus Torvalds with assistance from a loosely-knit team of hackers across the Net. It aims towards \u003ca href=\"http://get.posixcertified.ieee.org/\"\u003ePOSIX\u003c/a\u003e and Single UNIX Specification compliance.\u003c/p\u003e","title":"Introduction to Linux"},{"content":"/e/ OS settings put global captive_portal_http_url http://204.ecloud.global settings put global captive_portal_https_url https://e.foundation/net_204/\nchange ntp settings put global ntp_server pool.ntp.org\nDeBlot pre-installed apps Use this command to list all the apps installed\nadb shell pm list packages To search any particular keyword use grep command adb shell pm list packages | grep \u0026#39;keyword\u0026#39; Package names will be somewhat like this, eg. for Google Assistant its com.android.hotwordenrollment.okgoogle, for Google Auto its com.google.android.projection.gearhead Copy the name of the package you want to uninstall and use the following command\nadb shell pm uninstall -k --user 0 com.my.demo.app To undo the changes:\nadb shell cmd package install-existing com.my.demo.app ","permalink":"https://blog.rishavs.in/posts/3-resource/android/degoogle-rom/","summary":"\u003ch2 id=\"e-os\"\u003e/e/ OS\u003c/h2\u003e\n\u003cp\u003esettings put global captive_portal_http_url \u003ca href=\"http://204.ecloud.global\"\u003ehttp://204.ecloud.global\u003c/a\u003e\nsettings put global captive_portal_https_url \u003ca href=\"https://e.foundation/net_204/\"\u003ehttps://e.foundation/net_204/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"change-ntp\"\u003echange ntp\u003c/h2\u003e\n\u003cp\u003esettings put global ntp_server pool.ntp.org\u003c/p\u003e\n\u003ch2 id=\"deblot-pre-installed-apps\"\u003eDeBlot pre-installed apps\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eUse this command to list all the apps installed\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eadb shell pm list packages\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eTo search any particular keyword use \u003ccode\u003egrep\u003c/code\u003e command\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eadb shell pm list packages | grep \u0026#39;keyword\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003ePackage names will be somewhat like this, eg. for \u003ccode\u003eGoogle Assistant\u003c/code\u003e its \u003ccode\u003ecom.android.hotwordenrollment.okgoogle\u003c/code\u003e, for \u003ccode\u003eGoogle Auto\u003c/code\u003e its \u003ccode\u003ecom.google.android.projection.gearhead\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003eCopy the name of the package you want to uninstall and use the following command\u003c/p\u003e","title":"degoogle rom"},{"content":"Job profile of a farmer A Farmer is the CEO, COO, CFO, Sales manager, Investment manager of a propritary fariming firm. It will directly effect his income if he is not good in even one of the fields\nBefore the cropping season: What to sow, when to sow, credit availability, plan for inputs, land preparation, soil nutrient status\nFarmers has to have the access to the data that howmuch has it rained, moisture level in soil. When to sow based on forcasting Svaings, loans \u0026ndash;\u0026gt; moneylenders Seed varity and quality, selection from number of options, authenticity of seeds Land preparation, machinery and labours, funds for that Gap filling for requirements of soil for a crop, suppliments, fertilizers, NPK (should be made easy to understand) During the cropping season: choose appropriate agriculture technology monitor the progress of crop observe anomalies and take action, monitor weather labour/machinery management for sowing and intercultural operations water management weed/pests/ wild animals management respond to climate contingencies in case of damege file claim for insurance After the cropping season: Harvesting based on weather conditions, checking if crop is actually ready labour management primary processing, storage market assessment, where and when to sell grading/sorting/packing/transportation value addition, negotiation for better prices realization of prices repayments(loans, etc.) surplus investment planning(future planning) During the lean season: Remaining 6 to 7 months: Migration, ancillary works, MGNAREGA Repeats it season after season and year after year\nSkills required Financial planning Resource planning Keep himself updated about relevant Information Decide about technology to be adopted Logistics and processing Market survey, sales, negotiation Manage risks New developments and opportunities Public investments on the farm: protected cultivation, micro-irrigation systems, diversification, high-value crops Investments in creating water infrastructure Storage and post-harvest facilities and access to technologies Power of collectives: Farmer Producer Organizations, Women Self-Help Groups Targeted subsidies: JAM, DBT Risk cover (MSP, Crop insurance, accidental and medical insurance) Services through platforms: e-NAM, direct marketing custom hiring centres NBFCs mobile apps start-ups availability of remorse sensing images data marketplace TODO Go to KVK, ICAR\nThink Lets think of an ideal way first (Imagination) Think of the problems to impliment it in reality Try to solve this problem Test the solution Loop through\nSolutions without problems Vertical farming technology(Hydroponics, Aeroponics) Popular in urban areas Use artificial lights to replace sunlight Around 70% less water Farm mechanization and automation technologies Use of Drones, Autonomous tractors, other bots Use of various sensors Automated seeding, weeding Focuses on labour sortage and efficency problems Lifestock farming technology Monitor health and their activities Wearable sensors Greenhouse technology Precision agriculture Controls every variables like moisture, pest, stress, soil condition, micro climates More accurate Blockchain technology AI Drone as Bees Pollinators Crop harvesting, areal photography for data collection Simple Products Automated insects traps Deselenization using solar for fresh water needs in hydroponics ","permalink":"https://blog.rishavs.in/posts/3-resource/agriculture/understanding-farmers/","summary":"\u003ch3 id=\"job-profile-of-a-farmer\"\u003eJob profile of a farmer\u003c/h3\u003e\n\u003cp\u003eA Farmer is the CEO, COO, CFO, Sales manager, Investment manager of a propritary fariming firm.\nIt will directly effect his income if he is not good in even one of the fields\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"before-the-cropping-season\"\u003eBefore the cropping season:\u003c/h3\u003e\n\u003cp\u003eWhat to sow, when to sow, credit availability, plan for inputs, land preparation, soil nutrient status\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFarmers has to have the access to the data that howmuch has it rained, moisture level in soil.\u003c/li\u003e\n\u003cli\u003eWhen to sow based on forcasting\u003c/li\u003e\n\u003cli\u003eSvaings, loans \u0026ndash;\u0026gt; moneylenders\u003c/li\u003e\n\u003cli\u003eSeed varity and quality, selection from number of options, authenticity of seeds\u003c/li\u003e\n\u003cli\u003eLand preparation, machinery and labours, funds for that\u003c/li\u003e\n\u003cli\u003eGap filling for requirements of soil for a crop, suppliments, fertilizers, NPK (should be made easy to understand)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"during-the-cropping-season\"\u003eDuring the cropping season:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003echoose appropriate agriculture technology\u003c/li\u003e\n\u003cli\u003emonitor the progress of crop\u003c/li\u003e\n\u003cli\u003eobserve anomalies and take action, monitor weather\u003c/li\u003e\n\u003cli\u003elabour/machinery management for sowing and intercultural operations\u003c/li\u003e\n\u003cli\u003ewater management\u003c/li\u003e\n\u003cli\u003eweed/pests/ wild animals management\u003c/li\u003e\n\u003cli\u003erespond to climate contingencies\u003c/li\u003e\n\u003cli\u003ein case of damege file claim for insurance\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"after-the-cropping-season\"\u003eAfter the cropping season:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eHarvesting based on weather conditions, checking if crop is actually ready\u003c/li\u003e\n\u003cli\u003elabour management\u003c/li\u003e\n\u003cli\u003eprimary processing, storage\u003c/li\u003e\n\u003cli\u003emarket assessment, where and when to sell\u003c/li\u003e\n\u003cli\u003egrading/sorting/packing/transportation\u003c/li\u003e\n\u003cli\u003evalue addition, negotiation for better prices\u003c/li\u003e\n\u003cli\u003erealization of prices\u003c/li\u003e\n\u003cli\u003erepayments(loans, etc.)\u003c/li\u003e\n\u003cli\u003esurplus investment planning(future planning)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"during-the-lean-season\"\u003eDuring the lean season:\u003c/h3\u003e\n\u003cp\u003eRemaining 6 to 7 months:\nMigration, ancillary works, MGNAREGA\nRepeats it season after season and year after year\u003c/p\u003e","title":"Understanding Farmers"},{"content":"Analyzing the past It is a well established fact that stock prices show cyclical movements, similar to a business. It is a process of identifying trends \u0026amp; trend reversals at an earlier stage to formulate buy-sell strategy. A good technical Analyst always considers facts. He stays away from emotions like greed \u0026amp; panic while taking his decision Know Yourself Intraday Trader - Closes the trade within a day. Short Term Investor - Closes a trade in 2 days to 3 months. Medium Term Investor - Closes a trade in 3 months to 1 year. Long Term Investor - Closes a trade after 1 year. Trends The meaning of trend in finance isn\u0026rsquo;t all that different from the general definition of the term - a trend is really nothing more than the general direction. We do see trends even while watching IPL matches! Uptrends It is a collection of moves and down moves. Uptrend is evidenced by creation of higher highs and higher lows. Downtrends It is a collection of Down moves and Up moves. Downtrend is evidenced by creation of Lower highs and Lower lows. Thumb rule: NEVER BUY IN AN DOWNTREND! Sideways trend Downtrend is evidenced by prices moving within a range. Thumb rule: NEVER TRADE IN AN SIDEWAYS TREND! WAIT AND WATCH FOR THE DIRECTION OF BREAKOUT! Special Tip: Call option can be sold in sideways trend as time value is going down! Charts Charts and patterns are integral part of technical analysis\nLine chart It is a most basic of all charts Just like line that connects the closing price over a time frame There is no trading range Bar charts Left line represents opening price Right line represents closing price Red = down Blue/Green = up Volume Bar chart Number of shares that change hands between sellers and buyers Price movement is more sinificant when volume is above average Candlestick chart Vertical line represents the trading range Green/White Chadlestick = Bullish Red/Black Candlestick = Bearish Plotting trend lines Visually, a trend can be understood. However, if we plot a trend line, then, it can help us for further analysis.\nThings to be kept in mind while drawing a trend line are:\nEnsre that the trend line at least touches 2 points(Higher the better) Wicks can be joined by the trend line. Note: Wicks can be cut by the trend line. However the body should not be cut by the trend line. Support and Resistance Support level is a price level where the price trends to find support as it is going down Resistance level is a price where the price trends to find resistance as it is going up Importance Support and resistance analysis is an important part of trends because it can be used to make trading decisions and identify when a trend is reversing. A resistance once broken becomes a support and a support once broken becomes a resistance. Breakout The penetration of support and resistance level is called breakout Volumes Volumes provide us with the intensity of a given price move(very important element of technical analysis) If current day\u0026rsquo;s volume is higher than imidiate five previous volume bars, its a good confirmation on volumes. Candlestick bullish patterns Bullish Engulfing In this case, the second candle\u0026rsquo;s body (a bullish one) completely engulfs the previous day\u0026rsquo;s candle. Both the tail or the wick of the caldle of first bar are covered by the second one. Such patterns are powerful if they are formed at the bottom of the correction in a bullish move or near the bottom of a bear move. Such patterns are also seen at the end of a consolidation. Morning Star A Morning star is a bullish three candle pattern which is formed at the bottom of a down move/trend. The first candle = a big bearish candle which clearly defines the down move. The second candle = a small candle, which is ideally a Doji candle(indecisive). The third candle = a large bullish candle which closes near the top of the day. The pattern signifies extreme selling as witnessed in the first candle, followed by a change of power as shown in the second candle and finally the bulls taking over the and regaining lost ground. Hammer The Hammer formation is created when the open, high, and close are roughly the same price. Also, there is a long lower shadow, twice the length as the real body. Hammer is MOST EFFECTIVE if it occurs at \u0026ldquo;Bottom of the downward trend\u0026rdquo; It is considered as a Bullish Reversal Pattern. Confirmation of the reversal is to be taken before taking any position. The color of the real body is not important. Inverted Hammer: The long shadow is about two or three times of the real body. Little or no lower shadow. The color of the real body is not important. Note: Hammer/Inverted Hammer formed at the end of down trend with a bullish candle are a bit powerful as compared to bearish candles\nCandlestick bearish patterns Bearish Engulfing In this case, the second candle\u0026rsquo;s body (a bearish one) completely engulfs the previous day\u0026rsquo;s candle. Both the tail or the wick of the caldle of first bar are covered by the second one. It is more powerful if they are formed at the top of a up trend/move. Evening Star It is formed when a green candle is followed by a doji candle which is then folliwed by a big bearish candle This will be most powerful when it is formed at the end of uptrend Similar but Different Indicators A mathematical tool that can be applied on security\u0026rsquo;s price giving a result that can be used to anticipate trends, volatility and price. One of the most commonly used indicator is a Moving Average indicator. Moving Average A simple moving average is calculated by taking average of most recent closing prices of n time period.\nExponential Moving average applies weighting factors which decrease exponentially.\n5 days moving average is like analyzing 1 week\u0026rsquo;s data\n13 days moving average is like analyzing 1 fortnight\u0026rsquo;s data\n26 days moving average is like analyzing 1 month\u0026rsquo;s data\nIn majority cases, the 5days Moving Average line is close to the CMP\nStratergy - Buy When 5 DEMA cuts the 13 DEMA from below, its an anticipatory buy. When 5 DEMA cuts the 26 DEMA from below, its an confirmatory buy. The buy call is strengthened if the volumes are also in the same direction. If 5 DEMA cuts 13 DEMA and 26 DEMA on the same day with increased volumes, it\u0026rsquo;s a confirmatory buy. Note: Instead of the word below if we use the word above it will be sell stratergy\nMoving average is an effective indecator, however it is treated as lagging indecator i.e. it generates delayed buy/sell calls\nMACD(Moving Averages Convergence Divergence) MACD is calculated by subtracting 26 days moving average from moving average of 12 days\nI.e. MACD = 12 DEMA - 26 DEMA\nWe get various amounts by subtracting the EMAs. MACD line is formed by joining all these dots.\nMACD \u0026gt; 0 \u0026ndash;\u0026gt; strength\nMACD \u0026lt; 0 \u0026ndash;\u0026gt; weakness\nWhen the MACD is above 0, it means that 12 days moving average is higher than the 26 days moving average\nThis is bullish since current trend is more bullish as compared to a medium term trend.\nIdeally we see weakness first and then price falls\nSimilarly, we see strength first and then price rises\nSignal line is 9 DEMA of MACD\nMACD Line — Blue line (Fast line)\nSignal Line — Orange line (Slow line)\nHistogram — Bars (Indicates the difference between MACD line and Signal Line)\nStatergy If MACD line cuts the signal line from above = SELL If MACD line cuts the signal line from below = Buy RSI(Relative Strength Index) The relative strength index (RSI) is a momentum indicator that measures the magnitude of recent price changes. RS1 is an oscillator ie it moves to and fro within a range. The range is from 0 to 100. The indicator was originally developed by J. Welles Wilder Jr. and introduced in his seminal 1978 book, New Concepts in Technical Trading Systems. It evaluates overbought or oversold conditions in the price of a stock or other assets. RSI = 100 - 100/(1+RS) RS = Average Gain over specified Period / Average Loss over the same period Generally RSI is calculated for 14 days RSI will rise as the number and size of positive closes increase, and it will fall as the number and size of losses increases Statergy Traditional RSI \u0026lt; 30 indicates an oversold position (Buy Signal) RSI \u0026gt; 70 indicates an overbought position (Sell Signal) However, if the security/ overall market is very bullish, it may remain in the overbought position for a long period of time. In such a situation, 80 can be taken as an overbought signal.\nSimilarly, if the security/ overall market is very bearish, it may remain in the oversold position for a long period of time. In such a situation, 20 can be taken as an oversold signal.\nThe new way RSI \u0026gt; 60 = Uptrend continues = BUY RSI taking support at 60 = Bullish RSI \u0026lt; 40 = Downtrend = Stop Loss or SELL RSI facing resistance at 40 = Bearish RSI between 40 \u0026amp; 60 is sideways trend Ideally take 8 to 10 months data\nStatergy for MACD + RSI Target price should be around 3-5% returns in timespan of maximum 10 days (swing) StopLoss will be equal to median of the breakout trend (opening+closing / 2) When there is: MACD bullish crossower RSI is above 60 Bollinger Bands 20 DEMA line acts as basic support if current price is above 20 DEMA Upper Bollinger band which stands at 2 standard deviations will act like resistance in 95% cases Lower BB which stands at 2 std will act as support in 95% cases BB Squeeze: If the squeeze is for longer duration and if the current candle breakes the upper bb then it is a BUY call Higher squeeze the better (min 1 month)\nStopLoss will be determind in the same way and trailing stoploss will be privious day\u0026rsquo;s candle\u0026rsquo;s low Fibonacci Retracement This theory is based upon the Fibonacci number sequence. Fibonacci numbers are such that they tend to repeat themselves in nature. These numbers were used to determine breeding cycles of rabbits and are now being used in architecture, art and trading. From petals of flowers to prices of stocks everything is said to be in this pattern. The number series starts with 0,1 and then the next numbers are derived by adding the previous two number and goes like 1,2,3,5,8,13,21,34,55,89,144,233, \u0026hellip;. Heard about the GOLDEN RATIO? Yes, that\u0026rsquo;s another creation of the Fibonacci number sequence it is the succeeding number divided by the preceding number eg: - 233/144= 1.6180. As far as technical analysis is concerned we have to look out for the % patterns that these numbers follow which is given below. 21/89= 0.2360 (23.60%) 34/89= 0.3820 (38.20%) 55/89= 0.6120 (61.20%) In stock market Golden Ratio can be used for the level from which stock can retrace How to draw fibonachi In an uptrend join the lowest point on the screen to the highest point on the screen(same for downtred) Take around 9 months data for better results Research some more\nBullish Chart Pattern Up Flag It is seen by Up move Sideways trend(cloth of the flag) Close above resistance If it is accompined by increase in volume, it is better Calculstion o price target: Calculate the distance from start of the pole(upmove) till the resistance(upper part of flag) Assume this distance as x, then price target will be x + support(lower cloth of flag) Time target = Number of candles from candle to breakout candle divided by 3 Inverted Head and Shoulder Close is above neckline Increased volumes on Breakout candle X = Vertical distance frorn Low of Head to Neckline Price Target = Intersection point of the neckline and Breakout candle + X Time Target = Number of candles from /1st Neck Point to Breakout candle divided by 3. Double bottom (W) Equal bottoms from the same downtrend White candle with increased volumes after 2nd bottom X = Vertical distance from double bottom level to highest point between 2 bottoms Target = Bottom Level + (X/2) Time = No. of candles from 1st bottom to white candle, divided by 3 Rounding Bottom Criteria:\nHistorically highly priced\nSharp fall\nConsolidation for minimum 2 years\nBreakout above the resistance from consolidation\nThis is a MULTI BAGGER Pattern\nThe study is to be done only on a monthly chart.\nPrice Target = Historic high, expected to be achived within 1 year\n2nd Price Target = 5 times of the breakout level, expected to be achived in 2 years from the breakout\nListing Breakout Market euphoria at the time of listing Price begins to consolidate after which it makes a new high Price is overvalued \u0026amp; thus drifts downwards for next 2 years. Price will justify the business valuations and will trade at this level for the next 8 to 10 months. As the business improves, the price will start moving upwards Price will reach an all time high level. Breakout above the old resistance. Bearish Chart Pattern Head and Shoulders This formation is characterized by 2 small peaks on either side of a larger peak Close is below neckline Increased volumes on Breakout candle X = Vertical distance from High of Head to Neckline Price Target = Intersection point of the neckline and Breakout candle — X Time Target = Number of candles from 1st Neck Point to Breakout candle divided by 3. Double Top Similar to H\u0026amp;S with no head Equal bottoms from the same uptrend Black candle with increased volumes after 2nd top X = Vertical distance from double top level to the lowest point between 2 tops Target = Double Top Level - (X/2) Time = No. of candles from 1st top to black candle, divided by 3 ","permalink":"https://blog.rishavs.in/posts/2-area/finance/technical-analysis/","summary":"\u003ch2 id=\"analyzing-the-past\"\u003eAnalyzing the past\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt is a well established fact that stock prices show cyclical movements, similar to a business.\u003c/li\u003e\n\u003cli\u003eIt is a process of identifying trends \u0026amp; trend reversals at an earlier stage to formulate buy-sell strategy.\u003c/li\u003e\n\u003cli\u003eA good technical Analyst always considers facts. He stays away from emotions like greed \u0026amp; panic while taking his decision\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"know-yourself\"\u003eKnow Yourself\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIntraday Trader - Closes the trade within a day.\u003c/li\u003e\n\u003cli\u003eShort Term Investor - Closes a trade in 2 days to 3 months.\u003c/li\u003e\n\u003cli\u003eMedium Term Investor - Closes a trade in 3 months to 1 year.\u003c/li\u003e\n\u003cli\u003eLong Term Investor - Closes a trade after 1 year.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"trends\"\u003eTrends\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe meaning of trend in finance isn\u0026rsquo;t all that different from the general definition of the term - a trend is really nothing more than the general direction.\u003c/li\u003e\n\u003cli\u003eWe do see trends even while watching IPL matches!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"uptrends\"\u003eUptrends\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"/posts/2-area/finance/assets/uptrend.jpg\" alt=\"uptrend\"/\u003e\u003c/p\u003e","title":"Technical Analysis"},{"content":"Introduction For example, one dad would say, \u0026ldquo;The love of money is the root of all evil.\u0026rdquo; The other, “The lack of money is the root of all evil.”\nMoney is not taught in schools. Schools focus on scholastic and professional skills, but not on financial skills. This explains how smart bankers, doctors and accountants who earned excellent grades in school may still struggle financially all of their lives. Our staggering national debt is due in large part to highly educated politicians and government officials making financial decisions with little or no training on the subject of money.\nOne dad had a habit of saying, \u0026ldquo;I can\u0026rsquo;t afford it.\u0026rdquo; The other used to say, \u0026ldquo;How can I afford it?\u0026rdquo; One is a statement, and the other is a question. One lets you off the hook and was a sign of mental laziness, and the other forces you to think.\nOne dad recommended, \u0026ldquo;Study hard so you can find a good company to work for.\u0026rdquo; The other recommended, \u0026ldquo;Study hard so you can find a good company to buy.\u0026rdquo; One encouraged talking about money and business at the dinner table. The other forbade the subject of money to be discussed over a meal.\nOne believed, \u0026ldquo;Our home is our largest investment and our greatest asset.\u0026rdquo; The other believed, \u0026ldquo;My house is a liability, and if your house is your largest investment, you\u0026rsquo;re in trouble.\u0026rdquo;\nOne dad believed in a company or the government taking care of you and your needs. He was always concerned about pay raises, retirement plans, medical benefits, sick leave, vacation days and other perks. He would often say, \u0026ldquo;I\u0026rsquo;ve worked hard for the government, and I\u0026rsquo;m entitled to these benefits.\u0026rdquo;\nI noticed that people really do shape their life through their thoughts.\nI noticed that my poor dad was poor not because of the amount of money he earned, which was significant, but because of his thoughts and actions.\n“I don\u0026rsquo;t work for money!, Money works for me!”\nMoney is one form of power. But what is more powerful is financial education. Money comes and goes, but if you have the education about how money works, you gain power over it and can begin building wealth. The reason positive thinking alone does not work is because most people went to school and never learned how money works, so they spend their lives working for money.\nLesson 1: The Rich Don\u0026rsquo;t Work For Money \u0026ldquo;If you learn life\u0026rsquo;s lessons, you will do well. If not, life will just continue to push you around. People do two things. Some just let life push them around. Others get angry and push back. But they push back against their boss, or their job, or their husband or wife. They do not know it\u0026rsquo;s life that\u0026rsquo;s pushing.\u0026rdquo;\n\u0026ldquo;Life pushes all of us around. Some give up. Others fight. A few learn the lesson and move on. They welcome life pushing them around. To these few people, it means they need and want to learn something. They learn and move on. Most quit, and a few like you fight.\u0026rdquo;\n\u0026ldquo;If you think I\u0026rsquo;m the problem, then you have to change me. If you realize that you\u0026rsquo;re the problem, then you can change yourself, learn something and grow wiser.\u0026rdquo;\n\u0026ldquo;The poor and the middle class work for money.\u0026rdquo; \u0026ldquo;The rich have money work for them.\u0026rdquo;\nYou see, true learning takes energy, passion, a burning desire. Anger is a big part of that formula, for passion is anger and love combined. When it comes to money, most people want to play it safe and feel secure. So passion does not direct them: Fear does. When it comes to money, most people want to play it safe and feel secure. So passion does not direct them: Fear does.\n","permalink":"https://blog.rishavs.in/posts/2-area/finance/rich-dad-poor-dad-summary/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eFor example, one dad would say, \u0026ldquo;The love of money is the root of all evil.\u0026rdquo;\nThe other, “The lack of money is the root of all evil.”\u003c/p\u003e\n\u003cp\u003eMoney is not taught in schools. Schools focus on scholastic and professional\nskills, but not on financial skills. This explains how smart bankers, doctors\nand accountants who earned excellent grades in school may still struggle\nfinancially all of their lives. Our staggering national debt is due in large\npart to highly educated politicians and government officials making financial\ndecisions with little or no training on the subject of money.\u003c/p\u003e","title":"Rich Dad Poor Dad Summary"},{"content":"Preparation Install Dependencies sudo pacman -S base-devel xmlto kmod inetutils bc libelf git --needed Downloading source and local setup It is recommended to create a separate build directory for your kernel(s). In this example, the directory kernelbuild will be created in the home directory:\nmkdir ~/kernelbuild cd ~/kernelbuild Goto kernel.org and download kernel source\nwget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.5.tar.xz Note: you can verify signature of the downloaded tarball if you want\nExtract tarball\ntar -xvJf linux-5.14.5.tar.xz Check Kernel configuration To finalise the preparation, ensure that the kernel tree is absolutely clean; do not rely on the source tree being clean after unpacking. To do so, first change into the new kernel source directory created, and then run the make mrproper command:\ncd linux-5.14.5 # cean up the tree make mrproper copy config file\nzcat /proc/config.gz \u0026gt; .config make sure all configuration options have values that are required\nmake olddefconfig Another option(not recommended) automatically detect the hardware and creates config based on just that downside is that its not gonna detect anything which is not currently connected\nmake localmodconfig Menu driven configuration utility(best option) make menuconfig This should look somewhat like: Here is the main part of research and knowing your hardware, Good Luck 👍 with that. When all the required configurations are done, save your configurations in .config file.\nBuild the kernel We can use -j flag to use multiple cores of cpu while compiling\nmake -j4 This process will normally take some time so grab a cup of coffee(it took around 1 hour for me)\nInstallation Install the modules Once the kernel has been compiled, the modules for it must follow. First build the modules:\nmake modules -j4 Change to root user\nsudo su Then install the modules.\nmake modules_install -j4 This will copy the compiled modules into /lib/modules/\u0026lt;kernel_version\u0026gt;-\u0026lt;config_local_version\u0026gt;. For example, for kernel version 5.14 installed above, they would be copied to /lib/modules/5.14.5-ARCH. This keeps the modules for individual kernels used separated.\nCopy the kernel to /boot directory The kernel compilation process will generate a compressed bzImage (big zImage) of that kernel, which must be copied to the /boot directory and renamed in the process. Provided the name is prefixed with vmlinuz-, you may name the kernel as you wish.\n# cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-\u0026lt;kernel_name\u0026gt; cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-linux514 Make initial RAM disk Generate initramfs image file You are free to name the initramfs image file whatever you wish when generating it. However, it is recommended to use the linux\u0026lt;major_revision\u0026gt;\u0026lt;minor_revision\u0026gt; convention. For example, the name \u0026rsquo;linux514\u0026rsquo; was given as \u0026lsquo;5\u0026rsquo; is the major revision and \u0026lsquo;14\u0026rsquo; is the minor revision of the 5.14 kernel. This convention will make it easier to maintain multiple kernels, regularly use mkinitcpio, and build third-party modules.\n# mkinitcpio -k \u0026lt;kernel_version\u0026gt; -g /boot/initramfs-\u0026lt;kernel_name\u0026gt;.img mkinitcpio -k 5.14.5 -g /boot/initramfs-linux514.img Copy System.map file The System.map file is not required for booting Linux. It is a type of \u0026ldquo;phone directory\u0026rdquo; list of functions in a particular build of a kernel. The System.map contains a list of kernel symbols (i.e function names, variable names etc) and their corresponding addresses.\nCopy System.map to /boot, appending your kernel\u0026rsquo;s name to the destination file. Then create a symlink from /boot/System.map to point to /boot/System.map-\u0026lt;kernel_name\u0026gt;:\ncp System.map /boot/System.map-\u0026lt;kernel_name\u0026gt; ln -sf /boot/System.map-\u0026lt;kernel_name\u0026gt; /boot/System.map Summary After completing all steps above, you should have the following 3 files and 1 soft symlink in your /boot directory along with any other previously existing files:\nKernel: vmlinuz-\u0026lt;kernel_name\u0026gt; Initramfs: Initramfs-\u0026lt;kernel_name\u0026gt;.img System Map: System.map-\u0026lt;kernel_name\u0026gt; System Map kernel symlink Bootloader configuration For grub bootloader grub-mkconfig -o /boot/grub/grub.cfg Refrences https://wiki.archlinux.org/title/Kernel/Traditional_compilation https://www.kernel.org/ ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/compile-your-custom-linux-kernel/","summary":"\u003ch2 id=\"preparation\"\u003ePreparation\u003c/h2\u003e\n\u003ch3 id=\"install-dependencies\"\u003eInstall Dependencies\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo pacman -S base-devel xmlto kmod inetutils bc libelf git --needed\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"downloading-source-and-local-setup\"\u003eDownloading source and local setup\u003c/h3\u003e\n\u003cp\u003eIt is recommended to create a separate build directory for your kernel(s). In this example, the directory kernelbuild will be created in the home directory:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emkdir ~/kernelbuild\ncd ~/kernelbuild\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGoto \u003ca href=\"https://www.kernel.org/\"\u003ekernel.org\u003c/a\u003e and download kernel source\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.5.tar.xz\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003eNote: you can verify signature of the downloaded tarball if you want\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eExtract tarball\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etar -xvJf linux-5.14.5.tar.xz\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCheck\n\u003cimg src=\"/posts/3-resource/linux/asserts/custom_kernel_tar_ls.png\" alt=\"ls command output\"/\u003e\u003c/p\u003e","title":"Compile your Custom Linux Kernel"},{"content":".xinitrc The ~/.xinitrc file is a shell script read by xinit and by its front-end startx. It is mainly used to execute desktop environments, window managers and other programs when starting the X server (e.g., starting daemons and setting environment variables).\n.xprofiles An xprofile file, ~/.xprofile and /etc/xprofile, allows you to execute commands at the beginning of the X user session - before the window manager is started.\n.Xresources Xresources is a user-level configuration dotfile, typically located at ~/.Xresources. It can be used to set X resources, which are configuration parameters for X client applications. (xrdb ~/.Xresources)\n.profile Runs on each login\n","permalink":"https://blog.rishavs.in/posts/3-resource/linux/xfiles/","summary":"\u003ch2 id=\"xinitrc\"\u003e.xinitrc\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e~/.xinitrc\u003c/code\u003e file is a shell script read by xinit and by its front-end\nstartx. It is mainly used to execute desktop environments, window managers and\nother programs when starting the X server (e.g., starting daemons and setting\nenvironment variables).\u003c/p\u003e\n\u003ch2 id=\"xprofiles\"\u003e.xprofiles\u003c/h2\u003e\n\u003cp\u003eAn xprofile file, \u003ccode\u003e~/.xprofile\u003c/code\u003e and \u003ccode\u003e/etc/xprofile\u003c/code\u003e, allows you to execute commands\nat the beginning of the X user session - before the window manager is started.\u003c/p\u003e\n\u003ch2 id=\"xresources\"\u003e.Xresources\u003c/h2\u003e\n\u003cp\u003eXresources is a user-level configuration dotfile, typically located at\n\u003ccode\u003e~/.Xresources\u003c/code\u003e. It can be used to set X resources, which are configuration\nparameters for X client applications. (\u003ccode\u003exrdb ~/.Xresources\u003c/code\u003e)\u003c/p\u003e","title":"xfiles"},{"content":"Packages on Arch pacstrap base linux-lts linux-lts-headers base-devel btrfs btrfs-progs vim networkmanager grub efibootmgr intel-ucode Utils mtpfs\t: Reading and Writing from any MTP device ntfs-3g : NTFS filesystem driver and utilities gvfs-mtp : Virtual filesystem implementation for GIO (MTP backend; Android, media player) gvfs-gphoto2 : Virtual filesystem implementation for GIO (gphoto2 backend; PTP camera, MTP media player) nfs-utils : Support programs for Network File Systems tlp : Linux Advanced Power Management powertop : A tool to diagnose issues with power consumption and power management python-pip : The PyPA recommended tool for installing Python packages jre8-openjdk : OpenJDK Java 8 full runtime environment jre8-openjdk-headless : OpenJDK Java 8 headless runtime environment wget : Network utility to retrieve files from the Web gnome-keyring : Stores passwords and encryption keys Arch # Filesystem Support pacman -S mtpfs ntfs-3g gvfs-mtp gvfs-gphoto2 # Power Management pacman -S tlp powertop # Development pacman -S python-pip jre8-openjdk jre8-openjdk-headless wget gnome-keyring xorg libx11 : X11 client-side library xorg-xinit : X.Org initialisation program libxinerama : X11 Xinerama extension library libxft : FreeType-based font drawing library for X xorg-server : Xorg X server xorg-xrandr : Primitive command line interface to RandR extension xorg-xrdb : X server resource database utility xorg-xinput : Small commandline tool to configure devices xorg-xbacklight : RandR-based backlight control application xf86-video-intel : X.org Intel i810/i830/i915/945G/G965+ video drivers xclip : Command line interface to the X11 clipboard Arch pacman -S libx11 xorg-xinit libxinerama libxft xorg-server xorg-xrandr xorg-xrdb xorg-xinput xorg-xbacklight xclip pacman -S xf86-video-intel yay -S libxft-bgra-git Gentoo emerge x11-libs/libX11 x11-base/xorg-server x11-libs/libXrandr x11-libs/libXinerama x11-libs/libXft x11-apps/xinit x11-apps/xrdb x11-apps/mesa-progs x11-apps/xrandr x11-misc/unclutter x11-misc/xclip Basic picom\t: X compositor that may fix tearing issues unclutter\t: A small program for hiding the mouse cursor os-prober\t: Utility to detect other OSes on a set of drives man-db\t: A utility for reading man pages bash-completion\t: Programmable completion for the bash shell zsh-completions\t: Additional completion definitions for Zsh zip,unzip,tar,bzip2,atool,unrar\t: Compression utils Arch pacman -S picom unclutter os-prober man-db bash-completion zsh-completions pacman -S atool zip unzip tar bzip2 gzip lzip unrar Fonts noto-fonts : Google Noto TTF fonts noto-fonts-cjk : Google Noto CJK fonts ttf-joypixels : Emoji as a Service (formerly EmojiOne) Arch pacman -S noto-fonts ttf-joypixels\nMusic alsa-utils : Advanced Linux Sound Architecture - Utilities pulseaudio : A featureful, general-purpose sound server pamixer : Pulseaudio command-line mixer like amixer pulsemixer : CLI and curses mixer for pulseaudio mpd : Flexible, powerful, server-side application for playing music mpc : Minimalist command line interface to MPD ncmpcpp : terminal music player mpv : video player Arch pacman -S alsa-utils pulseaudio pamixer pulsemixer pacman -S alsa-utils pipewire pipewire-alsa pipewire-pulse pulsemixer pamixer pacman -S mpd mpc ncmpcpp mpv Shell dash : POSIX compliant shell that aims to be as small as possible dashbinsh : redirects sh to dash (aur package) zsh : advanced and programmable shell General fd : find replacement in rust ripgrep : grep replacement in rust fzf : fuzzy finder htop : system manager nitrogen : wallpaper manager ranger : Vim-like file fanager pcmanfm : File manager neomutt : email client dunst : notification demon libnotify : notification client xarchiver : GTK+ frontend to command line archivers xterm : default terminal for various program evince : document viewer sxiv : image viewer ueberzug : image previewer maim : Utility to take a screenshot using imlib2 neovim : text editor brave-bin : internet browser gparted : A Partition Magic clone, frontend to GNU Parted Arch pacman -S fd ripgrep fzf htop nitrogen ranger pcmanfm dunst libnotify xarchiver xterm evince sxiv ueberzug maim yay -S neovim-nightly-bin brave-bin Nvidia nvidia-lts nvidia-utils nvidia-settings nvidia-prime optimus-manager (yay) Arch # For linux lts kernel pacman -S nvidia-lts nvidia-utils nvidia-settings nvidia-prime # For latest linux kernel pacman -S nvidia nvidia-utils nvidia-settings nvidia-prime Virtual Box virtualbox virtualbox-host-dkms (for lts and other kernels) virtualbox-host-modules-arch (for latest linux kernels) Arch # For linux lts kernel pacman -S virtualbox virtualbox-host-dkms linux-lts-headers # For latest linux kernel pacman -S virtualbox virtualbox-host-modules-arch linux-headers # Add user into `vboxusers` group, here user is `rishav` gpasswd -a rishav vboxusers # load the `vboxdrv` module manually modprobe vboxdrv Note: If you are on linux kernel then make sure you have linux-headers installed. Similarly if you are on linux-lts kernel then linux-ltx-headers should be installed.\nQEMU qemu : A generic and open source machine emulator and virtualizer vert-manager : Desktop user interface for managing virtual machines pacman -S qemu virt-manager dnsmasq ebtables Fun figlet : A program for making large letters out of ordinary text cmatrix : A curses-based scrolling \u0026lsquo;Matrix\u0026rsquo;-like screen neofetch : A CLI system information tool Arch pacman -S figlet cmatrix neofetch Latex texlive-core : TeX Live core distribution texlive-latexextra : Large collection of add-on packages for LaTeX texlive-science : Typesetting for mathematics, natural and computer sciences texlive-publishers : LaTeX classes and packages for specific publishers texlive-formatsextra : Collection of extra TeX \u0026lsquo;formats\u0026rsquo; pandoc : Conversion between markup formats Development redis : An in-memory database that persists on disk pacman -S redis postgresql : Sophisticated object-relational DBMS (link) pacman -S postgresql sudo -iu postgres # login as postgres user initdb --locale=en_US.UTF-8 -E UTF8 -D /var/lib/postgres/data # start the service systemctl enable --now postgresql.service Bluetooth bluez - Daemons for the bluetooth protocol stack bluez-utils - Development and debugging utilities blueman PDF xournalpp - Handwriting notetaking software with PDF annotation support Random xdotools tesseract - OCR tesseract-data-eng\nExplore xdg-user-dirs xdg-utils\n","permalink":"https://blog.rishavs.in/posts/3-resource/linux/packages-i-use-in-any-linux-based-os/","summary":"\u003ch1 id=\"packages-on-arch\"\u003ePackages on Arch\u003c/h1\u003e\n\u003ch2 id=\"pacstrap\"\u003epacstrap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ebase\u003c/li\u003e\n\u003cli\u003elinux-lts\u003c/li\u003e\n\u003cli\u003elinux-lts-headers\u003c/li\u003e\n\u003cli\u003ebase-devel\u003c/li\u003e\n\u003cli\u003ebtrfs\u003c/li\u003e\n\u003cli\u003ebtrfs-progs\u003c/li\u003e\n\u003cli\u003evim\u003c/li\u003e\n\u003cli\u003enetworkmanager\u003c/li\u003e\n\u003cli\u003egrub\u003c/li\u003e\n\u003cli\u003eefibootmgr\u003c/li\u003e\n\u003cli\u003eintel-ucode\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"utils\"\u003eUtils\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003emtpfs\t        : Reading and Writing from any MTP device\u003c/li\u003e\n\u003cli\u003entfs-3g       : NTFS filesystem driver and utilities\u003c/li\u003e\n\u003cli\u003egvfs-mtp      : Virtual filesystem implementation for GIO (MTP backend; Android, media player)\u003c/li\u003e\n\u003cli\u003egvfs-gphoto2  : Virtual filesystem implementation for GIO (gphoto2 backend; PTP camera, MTP media player)\u003c/li\u003e\n\u003cli\u003enfs-utils     : Support programs for Network File Systems\u003c/li\u003e\n\u003cli\u003etlp           : Linux Advanced Power Management\u003c/li\u003e\n\u003cli\u003epowertop      : A tool to diagnose issues with power consumption and power management\u003c/li\u003e\n\u003cli\u003epython-pip    : The PyPA recommended tool for installing Python packages\u003c/li\u003e\n\u003cli\u003ejre8-openjdk          : OpenJDK Java 8 full runtime environment\u003c/li\u003e\n\u003cli\u003ejre8-openjdk-headless : OpenJDK Java 8 headless runtime environment\u003c/li\u003e\n\u003cli\u003ewget          : Network utility to retrieve files from the Web\u003c/li\u003e\n\u003cli\u003egnome-keyring : Stores passwords and encryption keys\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"arch\"\u003eArch\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Filesystem Support\npacman -S mtpfs ntfs-3g gvfs-mtp gvfs-gphoto2\n\n# Power Management\npacman -S tlp powertop\n\n# Development\npacman -S python-pip jre8-openjdk jre8-openjdk-headless wget gnome-keyring\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"xorg\"\u003exorg\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003elibx11        : X11 client-side library\u003c/li\u003e\n\u003cli\u003exorg-xinit    : X.Org initialisation program\u003c/li\u003e\n\u003cli\u003elibxinerama   : X11 Xinerama extension library\u003c/li\u003e\n\u003cli\u003elibxft        : FreeType-based font drawing library for X\u003c/li\u003e\n\u003cli\u003exorg-server   : Xorg X server\u003c/li\u003e\n\u003cli\u003exorg-xrandr   : Primitive command line interface to RandR extension\u003c/li\u003e\n\u003cli\u003exorg-xrdb     : X server resource database utility\u003c/li\u003e\n\u003cli\u003exorg-xinput   : Small commandline tool to configure devices\u003c/li\u003e\n\u003cli\u003exorg-xbacklight   : RandR-based backlight control application\u003c/li\u003e\n\u003cli\u003exf86-video-intel  : X.org Intel i810/i830/i915/945G/G965+ video drivers\u003c/li\u003e\n\u003cli\u003exclip             : Command line interface to the X11 clipboard\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"arch-1\"\u003eArch\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epacman -S libx11 xorg-xinit libxinerama libxft xorg-server xorg-xrandr xorg-xrdb xorg-xinput xorg-xbacklight xclip\n\npacman -S xf86-video-intel\n\nyay -S libxft-bgra-git\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"gentoo\"\u003eGentoo\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eemerge x11-libs/libX11 x11-base/xorg-server x11-libs/libXrandr x11-libs/libXinerama x11-libs/libXft x11-apps/xinit x11-apps/xrdb x11-apps/mesa-progs x11-apps/xrandr x11-misc/unclutter x11-misc/xclip\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"basic\"\u003eBasic\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003epicom\t\t: X compositor that may fix tearing issues\u003c/li\u003e\n\u003cli\u003eunclutter\t: A small program for hiding the mouse cursor\u003c/li\u003e\n\u003cli\u003eos-prober\t: Utility to detect other OSes on a set of drives\u003c/li\u003e\n\u003cli\u003eman-db\t: A utility for reading man pages\u003c/li\u003e\n\u003cli\u003ebash-completion\t: Programmable completion for the bash shell\u003c/li\u003e\n\u003cli\u003ezsh-completions\t: Additional completion definitions for Zsh\u003c/li\u003e\n\u003cli\u003ezip,unzip,tar,bzip2,atool,unrar\t: Compression utils\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"arch-2\"\u003eArch\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epacman -S picom unclutter os-prober man-db bash-completion zsh-completions\npacman -S atool zip unzip tar bzip2 gzip lzip unrar\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"fonts\"\u003eFonts\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003enoto-fonts        : Google Noto TTF fonts\u003c/li\u003e\n\u003cli\u003enoto-fonts-cjk    : Google Noto CJK fonts\u003c/li\u003e\n\u003cli\u003ettf-joypixels     : Emoji as a Service (formerly EmojiOne)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"arch-3\"\u003eArch\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003epacman -S noto-fonts ttf-joypixels\u003c/code\u003e\u003c/p\u003e","title":"Packages I use in any Linux based OS"},{"content":"Undo Mistakes 😱 git restore filename will discard uncommited change for this file cannot be undone afterward git restore -p filename p stands for patches will ask for each change in this file to be restore or not git restore . undo all changes since last commit git commit \u0026ndash;ammend -m \u0026ldquo;Commit Message\u0026rdquo; change commit message of last commit do not change already pushed commit git revert \u0026lt;SHA\u0026gt; it reverts specified single commit \u0026lt;SHA\u0026gt; can be seen through git log, eg. 74e3b2b it makes new commit by exactly doing opposite changes, so it is very safe git reset \u0026ndash;hard 74e3b2b it resets HEAD to certain commit in history while deleting all the commits after it if commits just local then they are gone forever git reset \u0026ndash;mixed 74e3b2b same as previous one but it will store all the changes from the removed commits as uncommited changes git restore \u0026ndash;source 74e3b2b filename will restore this file to certain commit (just 1 file) git reflog it is advance version of git log Restore after hard reset it even stores history for certain time after git reset --hard you can git reset 74e3b2b but creating mew branch is preferred by git branch branch_name 74e3b2b Restore after deleting entire branch look for \u0026lt;SHA\u0026gt; from git reflog then git branch branch_name 36a46a1 Moving commit to another branch if you want to move cirtain commits from current branch to new branch git branch new_branch_name git reset HEAD~1 --hard if moving commit to already present branch git checkout branch_name git cherry-pick 36a46a1 git checkout previous_branch_name git reset --hard HEAD~1 Interactive rebase is very advance, dangerous and powerful tool read comments during the process Change commit history for example if you want to change commit history upto 3 commits before current HEAD git rebase -i HEAD~3 you can change/reword commit messages, delete/drop commits, squash multiple commits together ","permalink":"https://blog.rishavs.in/posts/3-resource/development/git-undo-mistakes/","summary":"\u003ch1 id=\"undo-mistakes-\"\u003eUndo Mistakes 😱\u003c/h1\u003e\n\u003ch2 id=\"git-restore-filename\"\u003egit restore filename\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ewill discard uncommited change for this file\u003c/li\u003e\n\u003cli\u003ecannot be undone afterward\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"git-restore--p-filename\"\u003egit restore -p filename\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ep stands for patches\u003c/li\u003e\n\u003cli\u003ewill ask for each change in this file to be restore or not\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"git-restore-\"\u003egit restore .\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eundo all changes since last commit\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-commit-ammend--m-commit-message\"\u003egit commit \u0026ndash;ammend -m \u0026ldquo;Commit Message\u0026rdquo;\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003echange commit message of last commit\u003c/li\u003e\n\u003cli\u003edo not change already pushed commit\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-revert-sha\"\u003egit revert \u0026lt;SHA\u0026gt;\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eit reverts specified single commit\u003c/li\u003e\n\u003cli\u003e\u0026lt;SHA\u0026gt; can be seen through \u003ccode\u003egit log\u003c/code\u003e, eg. 74e3b2b\u003c/li\u003e\n\u003cli\u003eit makes new commit by exactly doing opposite changes, so it is very safe\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-reset-hard-74e3b2b\"\u003egit reset \u0026ndash;hard 74e3b2b\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eit resets HEAD to certain commit in history while deleting all the commits after it\u003c/li\u003e\n\u003cli\u003eif commits just local then they are gone forever\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"git-reset-mixed-74e3b2b\"\u003egit reset \u0026ndash;mixed 74e3b2b\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003esame as previous one but it will store all the changes from the removed commits as uncommited changes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-restore-source-74e3b2b-filename\"\u003egit restore \u0026ndash;source 74e3b2b filename\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ewill restore this file to certain commit (just 1 file)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-reflog\"\u003egit reflog\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eit is advance version of \u003ccode\u003egit log\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"restore-after-hard-reset\"\u003eRestore after hard reset\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eit even stores history for certain time after \u003ccode\u003egit reset --hard\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eyou can \u003ccode\u003egit reset 74e3b2b\u003c/code\u003e but creating mew branch is preferred by \u003ccode\u003egit branch branch_name 74e3b2b\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"restore-after-deleting-entire-branch\"\u003eRestore after deleting entire branch\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003elook for \u0026lt;SHA\u0026gt; from \u003ccode\u003egit reflog\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ethen \u003ccode\u003egit branch branch_name 36a46a1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"moving-commit-to-another-branch\"\u003eMoving commit to another branch\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eif you want to \u003cem\u003emove\u003c/em\u003e cirtain commits from current branch to new branch\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit branch new_branch_name\ngit reset HEAD~1 --hard\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003eif moving commit to already present branch\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit checkout branch_name\ngit cherry-pick 36a46a1\ngit checkout previous_branch_name\ngit reset --hard HEAD~1\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"interactive-rebase\"\u003eInteractive rebase\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eis very advance, \u003cem\u003edangerous\u003c/em\u003e and powerful tool\u003c/li\u003e\n\u003cli\u003eread comments during the process\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"change-commit-history\"\u003eChange commit history\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003efor example if you want to change commit history upto 3 commits before current HEAD\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit rebase -i HEAD~3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eyou can change/\u003cem\u003ereword\u003c/em\u003e commit messages, delete/\u003cem\u003edrop\u003c/em\u003e commits, \u003cem\u003esquash\u003c/em\u003e multiple commits together\u003c/li\u003e\n\u003c/ul\u003e","title":"Git Undo Mistakes"},{"content":"Ofcource my notes are are derived from Arch Wiki. And I highly recommend to read it too. These notes contains all the things which i do at the fime of new Arch Installation, so it is well tested.\nCreate Bootable usb sudo dd bs=4 if=/mnt/Tools/linux/distros/archlinux-2021.02.01-x86_64.iso of=/dev/sdb conv=fdatasync status=progress Verify the boot mode To verify the boot mode, list the efivars directory: ls /sys/firmware/efi/efivars\nIf the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired, refer to your motherboard\u0026rsquo;s manual.\nConnect to the internet ip link WiFi - iwctl\ndevice list station device scan station device get-networks station device connect SSID SSID is name of your WiFi network (eg. \u0026lsquo;Dark Demon\u0026rsquo;) Alternate: iwctl --passphrase passphrase station device connect SSID\nTest ping gnu.org\nUpdate the system clock timedatectl set-ntp true\nPartition the disks When recognized by the live system, disks are assigned to a block device such as /dev/sda, /dev/nvme0n1 or /dev/mmcblk0. To identify these devices, use lsblk or fdisk.\nfdisk -l Results ending in rom, loop or airoot may be ignored.\nThe following partitions are required for a chosen device:\nOne partition for the root directory /. For booting in UEFI mode: an EFI system partition. If you want to create any stacked block devices for LVM, system encryption or RAID, do it now. Example look UEFI with GPT\nMount point Partition Partition type Suggested size /mnt/boot or /mnt/boot/efi /dev/efi_system_partition EFI system partition At least 260 MiB [SWAP] /dev/swap_partition Linux swap More than 512 MiB /mnt /dev/root_partition Linux x86-64 root (/) Remainder of the device Format the partitions mount -o noatime,compress=lzo,space_cache=v2,discard=async,subvol=@ /dev/sdb1 /mnt Once the partitions have been created, each newly created partition must be formatted with an appropriate file system. For example, to create an Ext4 file system on /dev/root_partition, run:\nmkfs.ext4 /dev/root_partition\nIf you created a partition for swap, initialize it with mkswap:\nmkswap /dev/swap_partition\nNote: For stacked block devices replace /dev/*_partition with the appropriate block device path.\nMount the file systems Mount the root volume to /mnt. For example, if the root volume is /dev/root_partition:\nmount /dev/root_partition /mnt Create any remaining mount points (such as /mnt/efi) using mkdir and mount their corresponding volumes.\nIf you created a swap volume, enable it with swapon:\nswapon /dev/swap_partition\nInstallation Update the system by pacman -Syy\nSelect the mirrors (Optional) Install reflector by pacman -S reflector\nIf you want you can backup default mirror list\ncp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak\nGetting good mirror list for your location reflector -c \u0026quot;IN\u0026quot; -f 12 -l 10 -n 12 --save /etc/pacman.d/mirrorlist\nInstall essential packages pacstrap /mnt base base-devel linux-lts linux-firmware vim networkmanager btrfs-progs grub efibootmgr git Configure the system Fstab Generate an fstab file (use -U to define by UUID):\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab\nChroot Change root into the new system:\narch-chroot /mnt\nSet the time zone: ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\nRun hwclock to generate /etc/adjtime: hwclock --systohc\nEdit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. Generate the locales by running: locale-gen\nCreate the locale.conf file, and set the LANG variable accordingly: echo 'LANG=en_US.UTF-8' \u0026gt; /etc/locale.conf\nNetwork configuration Create the hostname file:\nvim /etc/hostname\nmyhostname\nAdd matching entries to hosts file:\nvim /etc/hosts\n127.0.0.1 localhost ::1 localhost 127.0.1.1 myhostname.localdomain\tmyhostname Initramfs Creating a new initramfs is usually not required, because mkinitcpio was run on installation of the kernel package with pacstrap. For LVM, system encryption or RAID, modify mkinitcpio.conf(5) and recreate the initramfs image: mkinitcpio -P\nSet users Create root password using passwd Create normal user useradd -mG wheel,audio,video rishav Create password for this user passwd rishav Install Grub Bootloader We already installed grub and efibootmgr which are necessary to install grub in efi boot filesystem\nmkdir /boot/efi mount /dev/sda1 /boot/efi grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi grub-mkconfig -o /boot/grub/grub.cfg Other impoetant things Starting important services ststemctl enable NetworkManager Extra Depending on the processor, install the following package: amd-ucode for AMD processors pacman -S amd-ucode intel-ucode for Intel processors. pacman -S intel-ucode ","permalink":"https://blog.rishavs.in/posts/3-resource/linux/arch-installation-guide/","summary":"\u003cp\u003eOfcource my notes are are derived from \u003ca href=\"https://wiki.archlinux.org/index.php/Installation_guide\"\u003eArch Wiki\u003c/a\u003e. And I highly recommend to read it too. These notes contains all the things which i do at the fime of new Arch Installation, so it is well tested.\u003c/p\u003e\n\u003ch2 id=\"create-bootable-usb\"\u003eCreate Bootable usb\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo dd bs=4 if=/mnt/Tools/linux/distros/archlinux-2021.02.01-x86_64.iso of=/dev/sdb conv=fdatasync status=progress\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"verify-the-boot-mode\"\u003eVerify the boot mode\u003c/h2\u003e\n\u003cp\u003eTo verify the boot mode, list the efivars directory:\n\u003ccode\u003els /sys/firmware/efi/efivars\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIf the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired, refer to your motherboard\u0026rsquo;s manual.\u003c/p\u003e","title":"Arch installation Guide"},{"content":"Duration: Oct 2020 – Feb 2021\nTeam Members: Rishav Singh, Kashyap Joshi\nTechnology: Python, ROS, Drone/Quadcopter, Gazebo, Git, Linux\nOverview Vitarana Drone was part of the e-Yantra Robotics Competition 2020-21, an international robotics outreach program hosted by IIT Bombay. Competing against 2,603 teams from 572 colleges, we designed an autonomous drone-based delivery system to execute precise object handling and delivery tasks in a simulated environment.\nProject Journey Beginning Entered the competition in our 2nd year of B.Tech. Started with 4 members but 2 left in between, we try to bring em on board but it was unavoidable. So work increased on 2 people. But still managed to divide the task in smaller, easily doable parts and divided according to the skills Focused on breaking tasks into manageable parts and acquiring new skills on the go. Key Milestones Task 1: Position and Altitude Control Developed and tuned PID controllers for roll, pitch, yaw, and throttle. Achieved precise setpoint control after extensive testing and parameter tuning. Took around 5 days to study and impliment the algorithm but tuning the PID required 10 days straight. Task 2: Obstacle Avoidance Considering we were given 4 sensors on 4 sides with 25 meters range each, we searched and studied about many path planning algorithms. Implemented a 2D custom Bug Algorithm for object avoidance using sensor inputs. Designed ROS actions for barcode scanning and delivery location determination. Task 3: Advanced Pathfinding Enhanced pathfinding for 3D environments to navigate complex obstacles by changing height(throttle). Used image processing for accurate marker detection and landing precision. Task 4: Delivery Optimization Developed a mechanism for retrieving delivery boxes from a warehouse grid and delivering them to specified locations. Improved marker scanning by adjusting drone altitude to enhance accuracy during detection. Enhanced the obstacle avoidance algorithm for more reliable navigation. Despite being one day late for the deadline, implemented major improvements within a single day, incurring a 25% penalty while ensuring task completion. Task 5: Time-Limited Arena Challenge Tasked with delivering and picking up as many boxes as possible within an 8-minute timeframe, with scoring based on delivery distance. Prioritized delivering boxes to distant locations to maximize points, balancing quality and speed (race against time). We had 2 choices either to deliver near boxes first to increase number of boxes or to deliver furthest boxes first to maximize distance points. We selected the later one because our algo was taking more time to detect and land on marker. Overcame many difficulties like sometimes the markers were so near to each roof that drone scanned wrong marker sometimes. So we had to resolve the issue by taking the nearest path to the provided approx location of marker. Introduced a velocity controller to increase drone speed in obstacle-free zones, enhancing overall efficiency. Task 6: Final Round Challenge Faced a more complex delivery and pickup task with tighter constraints and only two days for completion. Focused on improving code robustness and refining interconnections between controllers to prevent errors and crashes. Documented the code extensively on the final night of submission, working under high pressure with short power naps to maintain productivity. Me and my partner waking up each other after taking 10 min power naps. Main difference between our solution and top 6 solution was that we focused more on stability over speed. Although we missed the finals, the task highlighted the importance of stability and meticulous planning in achieving high performance. Conclusion Participating in this competition provided invaluable lessons in technical problem-solving, team collaboration, and time management. Despite the challenges of a reduced team and tight deadlines, we demonstrated resilience and adaptability, balancing stability with performance optimization. While we narrowly missed the finals, the experience significantly enhanced our expertise in control systems, path planning, and autonomous systems, preparing us for future complex engineering challenges.\nSummary - Vitarana Drone Oct 2020 - Feb 2021 Technology: Python, ROS, Drone, Gazebo, Git Link: https://youtube.com/playlist?list=PL7qLGQQRzAKJqw33z4Y1btjFr9WMiOrjP Designed an autonomous drone-based delivery system using ROS in a simulated environment Learned about team management, task division and distribution for achieving larger goals TODO Rake reference from vd google doc ","permalink":"https://blog.rishavs.in/posts/2-area/resume/vitarana-drone/","summary":"\u003cp\u003e\u003cstrong\u003eDuration:\u003c/strong\u003e Oct 2020 – Feb 2021\u003cbr\u003e\n\u003cstrong\u003eTeam Members:\u003c/strong\u003e Rishav Singh, Kashyap Joshi\u003cbr\u003e\n\u003cstrong\u003eTechnology:\u003c/strong\u003e Python, ROS, Drone/Quadcopter, Gazebo, Git, Linux\u003c/p\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eVitarana Drone was part of the e-Yantra Robotics Competition 2020-21, an international robotics outreach program hosted by IIT Bombay. Competing against 2,603 teams from 572 colleges, we designed an autonomous drone-based delivery system to execute precise object handling and delivery tasks in a simulated environment.\u003c/p\u003e\n\u003ch2 id=\"project-journey\"\u003eProject Journey\u003c/h2\u003e\n\u003ch3 id=\"beginning\"\u003eBeginning\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEntered the competition in our 2nd year of B.Tech.\u003c/li\u003e\n\u003cli\u003eStarted with 4 members but 2 left in between, we try to bring em on board but\nit was unavoidable. So work increased on 2 people.\u003c/li\u003e\n\u003cli\u003eBut still managed to divide the task in smaller, easily doable parts and divided according to the skills\u003c/li\u003e\n\u003cli\u003eFocused on breaking tasks into manageable parts and acquiring new skills on the go.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"key-milestones\"\u003eKey Milestones\u003c/h3\u003e\n\u003ch4 id=\"task-1-position-and-altitude-control\"\u003eTask 1: Position and Altitude Control\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped and tuned PID controllers for roll, pitch, yaw, and throttle.\u003c/li\u003e\n\u003cli\u003eAchieved precise setpoint control after extensive testing and parameter tuning.\u003c/li\u003e\n\u003cli\u003eTook around 5 days to study and impliment the algorithm but tuning the PID required 10 days straight.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"task-2-obstacle-avoidance\"\u003eTask 2: Obstacle Avoidance\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConsidering we were given 4 sensors on 4 sides with 25 meters range each, we searched and studied about many path planning algorithms.\u003c/li\u003e\n\u003cli\u003eImplemented a 2D custom Bug Algorithm for object avoidance using sensor inputs.\u003c/li\u003e\n\u003cli\u003eDesigned ROS actions for barcode scanning and delivery location determination.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"task-3-advanced-pathfinding\"\u003eTask 3: Advanced Pathfinding\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eEnhanced pathfinding for 3D environments to navigate complex obstacles by changing height(throttle).\u003c/li\u003e\n\u003cli\u003eUsed image processing for accurate marker detection and landing precision.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"task-4-delivery-optimization\"\u003eTask 4: Delivery Optimization\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped a mechanism for retrieving delivery boxes from a warehouse grid and delivering them to specified locations.\u003c/li\u003e\n\u003cli\u003eImproved marker scanning by adjusting drone altitude to enhance accuracy during detection.\u003c/li\u003e\n\u003cli\u003eEnhanced the obstacle avoidance algorithm for more reliable navigation.\u003c/li\u003e\n\u003cli\u003eDespite being one day late for the deadline, implemented major improvements within a single day, incurring a 25% penalty while ensuring task completion.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"task-5-time-limited-arena-challenge\"\u003eTask 5: Time-Limited Arena Challenge\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTasked with delivering and picking up as many boxes as possible within an 8-minute timeframe, with scoring based on delivery distance.\u003c/li\u003e\n\u003cli\u003ePrioritized delivering boxes to distant locations to maximize points, balancing quality and speed (race against time). We had 2 choices either to deliver near boxes first to increase number of boxes or to deliver furthest boxes first to maximize distance points. We selected the later one because our algo was taking more time to detect and\nland on marker.\u003c/li\u003e\n\u003cli\u003eOvercame many difficulties like sometimes the markers were so near to each\nroof that drone scanned wrong marker sometimes. So we had to resolve the\nissue by taking the nearest path to the provided approx location of marker.\u003c/li\u003e\n\u003cli\u003eIntroduced a velocity controller to increase drone speed in obstacle-free zones, enhancing overall efficiency.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"task-6-final-round-challenge\"\u003eTask 6: Final Round Challenge\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFaced a more complex delivery and pickup task with tighter constraints and only two days for completion.\u003c/li\u003e\n\u003cli\u003eFocused on improving code robustness and refining interconnections between controllers to prevent errors and crashes.\u003c/li\u003e\n\u003cli\u003eDocumented the code extensively on the final night of submission, working under high pressure with short power naps to maintain productivity. Me and my\npartner waking up each other after taking 10 min power naps.\u003c/li\u003e\n\u003cli\u003eMain difference between our solution and top 6 solution was that we focused\nmore on stability over speed.\u003c/li\u003e\n\u003cli\u003eAlthough we missed the finals, the task highlighted the importance of stability and meticulous planning in achieving high performance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eParticipating in this competition provided invaluable lessons in technical problem-solving, team collaboration, and time management. Despite the challenges of a reduced team and tight deadlines, we demonstrated resilience and adaptability, balancing stability with performance optimization. While we narrowly missed the finals, the experience significantly enhanced our expertise in control systems, path planning, and autonomous systems, preparing us for future complex engineering challenges.\u003c/p\u003e","title":"Vitarana Drone"},{"content":"Reference\n","permalink":"https://blog.rishavs.in/toy-network/","summary":"\u003cp\u003e\u003ca href=\"https://brege.org/post/network-graphs-in-hugo/\"\u003eReference\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\u003cstyle\u003e\n\t#mynetwork {\n\t  background-color: #f5f5f5;  \n\t  border-radius: 10px;\n\t  border: 1px solid #cccccc;\n\t  margin: 5px 0 40px 0;\n\t}\n\u003c/style\u003e\n\n\u003cdiv id=\"mynetwork\" data-nodes-path=ZgotmplZ data-edges-path=ZgotmplZ\u003e\u003c/div\u003e\n\u003cscript src=\"/js/vis-network.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toy-network.js\"\u003e\u003c/script\u003e\n\n\n\n\n\n\n\u003cstyle\u003e\n\t#mynetwork {\n\t  background-color: #f5f5f5;  \n\t  border-radius: 10px;\n\t  border: 1px solid #cccccc;\n\t  margin: 5px 0 40px 0;\n\t}\n\u003c/style\u003e\n\n\u003cdiv id=\"mynetwork\" data-nodes-path=/data/toy-network/nodes.json data-edges-path=/data/toy-network/edges.json\u003e\u003c/div\u003e\n\u003cscript src=\"/js/vis-network.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toy-network.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e","title":""},{"content":"Vision Ease of use that even i can be farmer High yield Low cost Long term solution for farmers as well as environment Imagination Greenhouse Drone/Balloon used for monitoring disease, weeds, etc. and make a report Based on this report automatically spray in those areas Use biofertilizers Use sensors for reporting what and when nuterients are needed ","permalink":"https://blog.rishavs.in/posts/3-resource/agriculture/agriculture-ideas/","summary":"\u003ch2 id=\"vision\"\u003eVision\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEase of use that even i can be farmer\u003c/li\u003e\n\u003cli\u003eHigh yield\u003c/li\u003e\n\u003cli\u003eLow cost\u003c/li\u003e\n\u003cli\u003eLong term solution for farmers as well as environment\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"imagination\"\u003eImagination\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGreenhouse\u003c/li\u003e\n\u003cli\u003eDrone/Balloon used for monitoring disease, weeds, etc. and make a report\u003c/li\u003e\n\u003cli\u003eBased on this report automatically spray in those areas\u003c/li\u003e\n\u003cli\u003eUse biofertilizers\u003c/li\u003e\n\u003cli\u003eUse sensors for reporting what and when nuterients are needed\u003c/li\u003e\n\u003c/ul\u003e","title":"Agriculture Ideas"}]