<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Electronics on Rishav's Digital Garden</title><link>https://blog.rishavs.in/tags/electronics/</link><description>Recent content in Electronics on Rishav's Digital Garden</description><generator>Hugo -- 0.147.0</generator><language>en-us</language><lastBuildDate>Fri, 08 Nov 2024 21:40:00 +0000</lastBuildDate><atom:link href="https://blog.rishavs.in/tags/electronics/index.xml" rel="self" type="application/rss+xml"/><item><title>I2C</title><link>https://blog.rishavs.in/posts/i2c/</link><pubDate>Fri, 08 Nov 2024 21:40:00 +0000</pubDate><guid>https://blog.rishavs.in/posts/i2c/</guid><description>&lt;h2 id="basics-of-i2c">Basics of I2C&lt;/h2>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Synchronous&lt;/strong>, &lt;strong>multi-master&lt;/strong>, &lt;strong>multi-slave&lt;/strong> serial bus.&lt;/li>
&lt;li>&lt;strong>Half-duplex&lt;/strong> communication (bidirectional SDA line).&lt;/li>
&lt;li>Uses &lt;strong>2 wires&lt;/strong>: SCL (clock), SDA (data).&lt;/li>
&lt;li>Speeds: Standard (100 kHz), Fast (400 kHz), High-Speed (3.4 MHz).&lt;/li>
&lt;/ul>
&lt;h3 id="physical-layer">Physical Layer&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Open-drain&lt;/strong> outputs – requires pull-up resistors.&lt;/li>
&lt;li>&lt;strong>7-bit or 10-bit addressing&lt;/strong> (supports up to 128/1024 devices).&lt;/li>
&lt;/ul>
&lt;h3 id="data-frame-structure">Data Frame Structure&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Start condition&lt;/strong>: SDA ↓ while SCL is high.&lt;/li>
&lt;li>&lt;strong>Address frame&lt;/strong>: 7/10-bit address + R/W bit.&lt;/li>
&lt;li>&lt;strong>ACK/NACK&lt;/strong>: Slave pulls SDA low to acknowledge.&lt;/li>
&lt;li>&lt;strong>Data frames&lt;/strong> (8-bit chunks, MSB-first).&lt;/li>
&lt;li>&lt;strong>Stop condition&lt;/strong>: SDA ↑ while SCL is high.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>Start | Address | Read/Write | ACK/NACK | Data | Stop
&lt;/code>&lt;/pre>&lt;h3 id="key-features">Key Features&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Clock stretching&lt;/strong>: Slaves can hold SCL low to pause communication.&lt;/li>
&lt;li>&lt;strong>Multi-master arbitration&lt;/strong>: Masters detect collisions via SDA monitoring.&lt;/li>
&lt;li>Speeds: Standard (100 kbps), Fast (400 kbps), High-Speed (3.4 Mbps).&lt;/li>
&lt;/ul>
&lt;h3 id="use-cases">Use Cases&lt;/h3>
&lt;ul>
&lt;li>Sensors (temperature, accelerometers).&lt;/li>
&lt;li>EEPROMs, RTC (Real-Time Clock) modules.&lt;/li>
&lt;/ul>
&lt;h2 id="device-tree">Device Tree&lt;/h2>
&lt;ul>
&lt;li>TODO&lt;/li>
&lt;/ul>
&lt;h2 id="writing-client-device-drivers">Writing client device drivers&lt;/h2>
&lt;ul>
&lt;li>TODO&lt;/li>
&lt;/ul>
&lt;h2 id="i2c-tools-package-in-userspace">I2C-Tools Package in Userspace&lt;/h2>
&lt;ul>
&lt;li>Useful for debugging, testing, some simple prototyping&lt;/li>
&lt;li>Accesses the I²C bus via &lt;code>/dev/i2c-0&lt;/code>, &lt;code>/dev/i2c-1&lt;/code>…&lt;/li>
&lt;li>Assume devices have registers, SMBus-like&lt;/li>
&lt;/ul>
&lt;h3 id="i2cdetect">i2cdetect&lt;/h3>
&lt;ul>
&lt;li>scan an I2C bus for devices&lt;/li>
&lt;li>No guarantee it works (I²C is not discoverable by the spec)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>rishav&lt;span style="color:#f92672">]&lt;/span> ➜ ~ i2cdetect -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-0 i2c i915 gmbus dpc I2C adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-1 i2c i915 gmbus dpb I2C adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-2 i2c i915 gmbus dpd I2C adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-3 i2c AUX A/DDI A/PHY A I2C adapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-4 unknown Synopsys DesignWare I2C adapter N/A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-5 unknown Synopsys DesignWare I2C adapter N/A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i2c-6 unknown SMBus I801 adapter at f040 N/A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>rishav&lt;span style="color:#f92672">]&lt;/span> ➜ ~ i2cdetect -y &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> a b c d e f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00: -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>20: -- -- -- -- -- -- -- -- &lt;span style="color:#ae81ff">28&lt;/span> -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>30: -- -- -- UU -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>70: -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--&lt;/code> No response&lt;/li>
&lt;li>&lt;code>28&lt;/code> Response from address 28&lt;/li>
&lt;li>&lt;code>UU&lt;/code> Address in use (by driver)&lt;/li>
&lt;/ul>
&lt;h3 id="i2cget-i2cset">i2cget, i2cset&lt;/h3>
&lt;ul>
&lt;li>&lt;code>i2cget&lt;/code>: read a register value&lt;/li>
&lt;li>&lt;code>i2cset&lt;/code>: set a register value&lt;/li>
&lt;li>Can use various types of SMBus and I2C transactions&lt;/li>
&lt;li>Limited to 8-bit register address&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># i2cget -y 2 0x28 0x1b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># i2cset -y 2 0x28 0x55&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="i2cdump">i2cdump&lt;/h3>
&lt;ul>
&lt;li>dump value of all registers&lt;/li>
&lt;/ul>
&lt;h3 id="i2ctransfer">i2ctransfer&lt;/h3>
&lt;ul>
&lt;li>&lt;code>i2ctransfer&lt;/code>: the &amp;ldquo;swiss army knife of Linux I2C&amp;rdquo;, in userspace&lt;/li>
&lt;li>Example: reimplement the i2cget -y 2 0x28 0x1b command:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># i2ctransfer -y 2 w1@0x28 0x1b r1@0x28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>w1@0x28&lt;/code> Write transaction, 1 byte, client address 0x28&lt;/li>
&lt;li>&lt;code>0x1b&lt;/code> Data to send in the write transaction&lt;/li>
&lt;li>&lt;code>r1@0x28&lt;/code> Read transaction, 1 byte, client address 0x28&lt;/li>
&lt;/ul>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;ol>
&lt;li>Return code from &lt;code>i2c_*()&lt;/code> functions — Never ignore errors!&lt;/li>
&lt;li>Kernel logs&lt;/li>
&lt;li>i2c-tools&lt;/li>
&lt;li>Oscilloscope or logic analyzer&lt;/li>
&lt;/ol>
&lt;h3 id="no-ack-from-client---systematic">No ACK from client - systematic&lt;/h3>
&lt;p>&lt;strong>Problem&lt;/strong>: a client &lt;strong>never&lt;/strong> responds to transactions&lt;/p></description></item></channel></rss>