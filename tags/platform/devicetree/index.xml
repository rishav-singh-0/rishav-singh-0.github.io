<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Platform/DeviceTree on Rishav's Digital Garden</title><link>https://blog.rishavs.in/tags/platform/devicetree/</link><description>Recent content in Platform/DeviceTree on Rishav's Digital Garden</description><generator>Hugo -- 0.147.0</generator><language>en-us</language><lastBuildDate>Mon, 27 Jan 2025 17:41:00 +0000</lastBuildDate><atom:link href="https://blog.rishavs.in/tags/platform/devicetree/index.xml" rel="self" type="application/rss+xml"/><item><title>Device Tree (DT) in Linux Kernel</title><link>https://blog.rishavs.in/posts/device-tree-dt-in-linux-kernel/</link><pubDate>Mon, 27 Jan 2025 17:41:00 +0000</pubDate><guid>https://blog.rishavs.in/posts/device-tree-dt-in-linux-kernel/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The Device Tree (DT) is a data structure used to describe the hardware components of a system in a way that is independent of the operating system and software. It is particularly relevant for systems based on the ARM architecture, where the hardware varies significantly across devices.&lt;/p>
&lt;p>Instead of hardcoding hardware details in the kernel, the device tree provides a flexible way to inform the kernel about the system&amp;rsquo;s hardware layout. This simplifies kernel code and enables easier reuse across multiple hardware platforms.&lt;/p></description></item><item><title>Flattened Devicetree (DTB) Format</title><link>https://blog.rishavs.in/posts/flattened-devicetree-dtb-format/</link><pubDate>Fri, 08 Nov 2024 11:31:00 +0000</pubDate><guid>https://blog.rishavs.in/posts/flattened-devicetree-dtb-format/</guid><description>&lt;h2 id="device-tree">Device Tree&lt;/h2>
&lt;p>![Pasted image 20241108115912](./Pasted image 20241108115912.png)&lt;/p>
&lt;h3 id="standard-properties">Standard Properties&lt;/h3>
&lt;h4 id="compatible">compatible&lt;/h4>
&lt;p>The &lt;em>compatible&lt;/em> property value consists of one or more strings that define the specific programming model for the device. This list of strings should be used by a client program for device driver selection. The property value consists of a concatenated list of null terminated strings, from most specific to most general. They allow a device to express its compatibility with a family of similar devices, potentially allowing a single device driver to match against several devices.&lt;/p></description></item></channel></rss>