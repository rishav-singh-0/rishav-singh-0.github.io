<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Security on Rishav's Digital Garden</title><link>https://rishav-singh-0.github.io/tags/security/</link><description>Recent content in Security on Rishav's Digital Garden</description><generator>Hugo -- 0.147.0</generator><language>en-us</language><lastBuildDate>Tue, 20 May 2025 09:39:00 +0000</lastBuildDate><atom:link href="https://rishav-singh-0.github.io/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>ssh audit</title><link>https://rishav-singh-0.github.io/posts/ssh-audit/</link><pubDate>Tue, 20 May 2025 09:39:00 +0000</pubDate><guid>https://rishav-singh-0.github.io/posts/ssh-audit/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;strong>ssh-audit&lt;/strong> is a tool for ssh server &amp;amp; client configuration auditing(banner, key exchange, encryption, mac, compression, compatibility, security, etc).&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;ul>
&lt;li>On Arch&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pacman -S ssh-audit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>pip&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>pip3 install ssh-audit
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Generic - Download and extract tarball from release&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;pre tabindex="0">&lt;code>./ssh-audit.py 192.168.101.201
&lt;/code>&lt;/pre>&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jtesta/ssh-audit">https://github.com/jtesta/ssh-audit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ssh-audit.com/hardening_guides.html">https://www.ssh-audit.com/hardening_guides.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>SHA-256 (Secure Hash Algorithm 256-bit)</title><link>https://rishav-singh-0.github.io/posts/sha-256-secure-hash-algorithm-256-bit/</link><pubDate>Wed, 29 Jan 2025 14:12:00 +0000</pubDate><guid>https://rishav-singh-0.github.io/posts/sha-256-secure-hash-algorithm-256-bit/</guid><description>&lt;p>SHA-256 is a cryptographic hash function that produces a fixed-size 256-bit (32-byte) hash. It is &lt;strong>deterministic&lt;/strong>, &lt;strong>collision-resistant&lt;/strong>, and designed for security-critical applications.&lt;/p>
&lt;p>&lt;img src="https://rishav-singh-0.github.io/posts/sha-256-%28secure-hash-algorithm-256-bit%29/./hashing-algorithm-sha256.png" alt="hashing-algorithm-sha256"/>&lt;/p>
&lt;h3 id="how-sha-256-works">How SHA-256 Works&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Preprocessing&lt;/strong>:
&lt;ul>
&lt;li>Pad the input to a multiple of 512 bits.&lt;/li>
&lt;li>Append a &lt;code>1&lt;/code>, then add &lt;code>k&lt;/code> zeros, and finally append the original message length (64 bits).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Initialize Hash Values&lt;/strong>:
&lt;ul>
&lt;li>Use constants derived from the fractional parts of square roots of the first 8 primes (eight 32-bit words).&lt;/li>
&lt;li>Example: &lt;code>h0 = 0x6a09e667, h1 = 0xbb67ae85, ...&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Process Blocks&lt;/strong>:
&lt;ul>
&lt;li>Split the padded message into 512-bit blocks.&lt;/li>
&lt;li>For each block:
&lt;ul>
&lt;li>Expand the block into 64 words using a message schedule.&lt;/li>
&lt;li>Perform 64 rounds of compression using bitwise operations (e.g., XOR, AND, modular addition).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Compression Function&lt;/strong>
A compression function is applied to each block, creating a new hash value. This function involves mixing the bits of the current hash value and the message block.&lt;/li>
&lt;li>&lt;strong>Iteration&lt;/strong>
Repeat the compression function for each block, using the output of each iteration as input for the next.&lt;/li>
&lt;li>&lt;strong>Final Hash&lt;/strong>:
&lt;ul>
&lt;li>Combine the intermediate hash values to produce the final 256-bit digest.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="example-sha-256-for-string-hello">Example: SHA-256 for String &amp;ldquo;Hello&amp;rdquo;&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Input&lt;/strong>: &amp;ldquo;Hello&amp;rdquo; → ASCII &lt;code>48656C6C6F&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Padding&lt;/strong>:
&lt;ul>
&lt;li>Length = 40 bits (5 bytes).&lt;/li>
&lt;li>Pad with &lt;code>1&lt;/code>, 407 zeros, and &lt;code>0000000000000028&lt;/code> (hex for 40 bits).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Hash Computation&lt;/strong>:
&lt;ul>
&lt;li>After processing, the final hash is:
&lt;code>185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="use-cases">Use Cases&lt;/h3>
&lt;h4 id="sha-256">SHA-256&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Cryptographic security&lt;/strong> in:
&lt;ul>
&lt;li>Digital signatures (SSL/TLS certificates).&lt;/li>
&lt;li>Password storage (hashed+salted).&lt;/li>
&lt;li>Blockchain (Bitcoin transactions).&lt;/li>
&lt;li>File integrity verification (e.g., software downloads).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Guarantees&lt;/strong>: Pre-image resistance, collision resistance.&lt;/li>
&lt;/ul></description></item><item><title>CRC (Cyclic Redundancy Check)</title><link>https://rishav-singh-0.github.io/posts/crc-cyclic-redundancy-check/</link><pubDate>Wed, 29 Jan 2025 14:09:00 +0000</pubDate><guid>https://rishav-singh-0.github.io/posts/crc-cyclic-redundancy-check/</guid><description>&lt;p>CRC is an error-detection code used to detect accidental changes to raw data (e.g., during transmission or storage). It works by treating the data as a polynomial and performing polynomial division with a predefined &lt;strong>generator polynomial&lt;/strong>. The remainder of this division becomes the CRC value.&lt;/p>
&lt;h3 id="how-crc-is-calculated">How CRC is Calculated&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Convert data to binary&lt;/strong>: Treat the data as a sequence of bits.&lt;/li>
&lt;li>&lt;strong>Append zeros&lt;/strong>: Add &lt;code>n&lt;/code> zeros to the end of the data, where &lt;code>n&lt;/code> is the degree of the generator polynomial (e.g., CRC-32 uses a 33-bit polynomial, so append 32 zeros).&lt;/li>
&lt;li>&lt;strong>Polynomial division&lt;/strong>: Divide the data + zeros by the generator polynomial using &lt;strong>modulo-2 arithmetic&lt;/strong> (XOR operations).&lt;/li>
&lt;li>&lt;strong>CRC value&lt;/strong>: The remainder of this division is the CRC checksum.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="example-crc-8-for-string-hi">Example: CRC-8 for String &amp;ldquo;Hi&amp;rdquo;&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Data&lt;/strong>: &amp;ldquo;Hi&amp;rdquo; in ASCII is &lt;code>01001000 01101001&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Generator Polynomial&lt;/strong>: CRC-8 (e.g., &lt;code>x⁸ + x² + x + 1&lt;/code>), represented as &lt;code>100000111&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Append 8 zeros&lt;/strong>:&lt;br>
Data becomes &lt;code>010010000110100100000000&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Perform division&lt;/strong>:
&lt;ul>
&lt;li>Divide &lt;code>010010000110100100000000&lt;/code> by &lt;code>100000111&lt;/code> using XOR.&lt;/li>
&lt;li>&lt;strong>Remainder&lt;/strong>: Let’s assume the remainder is &lt;code>00110110&lt;/code> (hex &lt;code>0x36&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Final CRC&lt;/strong>: &lt;code>0x36&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="use-cases">Use Cases&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Error detection&lt;/strong> in:
&lt;ul>
&lt;li>Network protocols (Ethernet, Wi-Fi).&lt;/li>
&lt;li>Storage systems (hard drives, ZIP files).&lt;/li>
&lt;li>Quick checksums for small data transfers.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Not secure&lt;/strong> against intentional tampering.&lt;/li>
&lt;/ul></description></item><item><title>SSL Certificate</title><link>https://rishav-singh-0.github.io/posts/ssl-certificate/</link><pubDate>Tue, 10 Dec 2024 18:05:00 +0000</pubDate><guid>https://rishav-singh-0.github.io/posts/ssl-certificate/</guid><description>&lt;p>An &lt;strong>SSL certificate&lt;/strong> is a digital certificate issued by a trusted third-party authority known as a &lt;strong>Certificate Authority (CA)&lt;/strong>. It verifies the identity of a website or server and enables secure, encrypted communication.&lt;/p>
&lt;h3 id="components-of-an-ssl-certificate">Components of an SSL Certificate&lt;/h3>
&lt;ul>
&lt;li>Public Key:
&lt;ul>
&lt;li>Used for encryption and verifying the certificate&amp;rsquo;s authenticity.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Certificate Holder Information:
&lt;ul>
&lt;li>Details like the domain name, organization, and location.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Issuer Information:
&lt;ul>
&lt;li>The CA that issued the certificate.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Validity Period:
&lt;ul>
&lt;li>Specifies the time frame during which the certificate is valid.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Digital Signature:
&lt;ul>
&lt;li>Ensures the certificate was issued by a trusted CA and has not been tampered with.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="self-signed-certificates">Self-Signed Certificates&lt;/h2>
&lt;hr>
&lt;h3 id="examples-and-differences">Examples and Differences&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Usage&lt;/th>
&lt;th>Example&lt;/th>
&lt;th>Difference&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Self-Signed&lt;/strong>&lt;/td>
&lt;td>Internal servers, testing&lt;/td>
&lt;td>Generated via OpenSSL&lt;/td>
&lt;td>Not trusted by default in browsers or OS.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>CA-Signed&lt;/strong>&lt;/td>
&lt;td>Public-facing servers&lt;/td>
&lt;td>Issued by DigiCert, Let&amp;rsquo;s Encrypt&lt;/td>
&lt;td>Trusted by browsers and OS.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Wildcard Certificate&lt;/strong>&lt;/td>
&lt;td>Secures a domain and its subdomains&lt;/td>
&lt;td>&lt;code>*.example.com&lt;/code>&lt;/td>
&lt;td>Can’t be self-signed, requires a CA.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Multi-Domain Certificate&lt;/strong>&lt;/td>
&lt;td>Covers multiple domains&lt;/td>
&lt;td>&lt;code>example.com&lt;/code>, &lt;code>test.com&lt;/code>&lt;/td>
&lt;td>Self-signed possible but not widely used.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="self-signed-certificates-1">Self-Signed Certificates&lt;/h3>
&lt;p>A &lt;strong>self-signed certificate&lt;/strong> is a digital certificate that is not issued by a trusted Certificate Authority (CA) but is signed by the entity it is certifying (e.g., your own server). These certificates are primarily used for internal testing, development environments, or scenarios where external trust is not required.&lt;/p></description></item></channel></rss>